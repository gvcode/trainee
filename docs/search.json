[
  {
    "objectID": "aula1-python1.html",
    "href": "aula1-python1.html",
    "title": "1¬† Introdu√ß√£o ao Python I",
    "section": "",
    "text": "Introdu√ß√£o\nAdicionar/Editar: Motiva√ß√£o da aula\nAdicionar/Editar: TOC dos temas da aula (pra ajudar os alunos a se acharem na aula)\nAdicionar/Editar: Texto (enxuto, objetivo) com os objetivos de aprendizagem principais (o que, principalmente, os alunos tem que sair dessa aula sabendo)\nAdicionar/Editar: Ao longo da aula: adicionar mais refer√™ncias, especialmente sobre onde expandir os conhecimentos sobre cada tema\nAdicionar/Editar: Motiva√ß√£o da aula\nAdicionar/Editar: TOC dos temas da aula (pra ajudar os alunos a se acharem na aula)\nAdicionar/Editar: Texto (enxuto, objetivo) com os objetivos de aprendizagem principais (o que, principalmente, os alunos tem que sair dessa aula sabendo)",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Introdu√ß√£o ao Python I</span>"
    ]
  },
  {
    "objectID": "aula1-python1.html#porque-python",
    "href": "aula1-python1.html#porque-python",
    "title": "1¬† Introdu√ß√£o ao Python I",
    "section": "1.1 Porque Python?",
    "text": "1.1 Porque Python?\nAdicionar/Editar: Texto (enxuto, objetivo) explicando quais s√£o as caracter√≠sticas principais do Python, que fazem com que ela seja uma boa escolha para ensinar no trainee.\nAdicionar/Editar: Complementarmente, de modo breve, quais outros tipos de linguagens existem (com exemplos)",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Introdu√ß√£o ao Python I</span>"
    ]
  },
  {
    "objectID": "aula1-python1.html#sintaxe",
    "href": "aula1-python1.html#sintaxe",
    "title": "1¬† Introdu√ß√£o ao Python I",
    "section": "1.2 Sintaxe",
    "text": "1.2 Sintaxe\nAdicionar/Editar: no geral, essa se√ß√£o est√° boa, mas busque fazer melhorias do _flow_ de ensino, e checar se nenhum tema importante est√° sendo deixado de lado\n\n1.2.1 Scripts\nUm script √© um arquivo de texto com instru√ß√µes a serem executadas por um computador que antes traduzir√° o arquivo para linguagem de m√°quina.\nUm script √© um texto instrucional como qualquer outro, escrito em um tipo de linguagem especial, ‚Äúde programa√ß√£o‚Äù, ou ‚Äúc√≥digo‚Äù, mas √© um texto, quase como uma receita de bolo de cenoura.\nComo em qualquer linguagem, temos um vocabul√°rio √† disposi√ß√£o, um conjunto de palavras (ou tokens) existentes, organizadas em categorias como substantivos, adjetivos, etc. N√≥s combinamos as palavras em frases (ou statements) para descrever as instru√ß√µes. Por fim, organizamos o texto em par√°grafos (ou blocks), conjuntos de frases que devem ser lidas juntas, para definir a estrutura e facilitar o entendimento do texto.\nAdicionar/Editar: quais s√£o as op√ß√µes de palavras que comp√µe um c√≥digo? R: valores, (nomes de) vari√°veis, e fun√ß√µes/operadores\n\n\n1.2.2 Sintaxe B√°sica\nA sintaxe dentro do Python √© muito semelhante com a linguagem humana. O programa ‚Äúl√™‚Äù de cima para baixo, da esqueda para a direita de forma sequencial!\nNote ao longo dos programas: espa√ßos, quebras de linha, tabs, coment√°rios‚Ä¶\n\n#Vamos fazer essa soma!\n\nsoma = 2 + 2 # soma bem facil...\nsoma2=2+2\n\nprint(soma, soma2)\n\n4 4",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Introdu√ß√£o ao Python I</span>"
    ]
  },
  {
    "objectID": "aula1-python1.html#vari√°veis",
    "href": "aula1-python1.html#vari√°veis",
    "title": "1¬† Introdu√ß√£o ao Python I",
    "section": "1.3 Vari√°veis",
    "text": "1.3 Vari√°veis\nAdicionar/Editar: no geral, essa se√ß√£o est√° boa, mas busque fazer melhorias do _flow_ de ensino, e checar se nenhum tema importante est√° sendo deixado de lado\nAs vari√°veis no python s√£o bem parecidas com as vari√°veis da matem√°tica. Serve como caixinhas que carregam algo dentro e, sempre que o programa ler ela, entender√° o seu conte√∫do.\nx = \"julia\"  #toda vez que o programa ler x, ler√° a string julia\ny = 5        #toda vez que o programa ler y, ler√° o n√∫mero inteiro 5\nz = 2.5      #toda vez que o programa ler z, ler√° o n√∫mero float 2,5\nVari√°veis s√£o um nome, associado √† um valor, que mora na mem√≥ria do computador.\nTenha em mente ao nomear uma vari√°vel que: - N√£o se pode usar os termos reservados;\n\nNomes de vari√°veis podem conter apenas letras, n√∫meros e underscores(_). Podem come√ßar com uma letra ou um underscore, mas n√£o com um n√∫mero;\nEspa√ßos n√£o s√£o permitidos em nomes de vari√°veis (usa-se underscores para separa as palavras);\nDicas: nomes de vari√°veis devem ser concisos, por√©m descritivos.\n\nNa pr√°tica, quando escrevemos essas var√≠aveis, n√∫meros e strings em c√©lulas de c√≥digo, observamos diferentes cores que indicam o que o python est√° enxergando.\nTermos reservados s√£o termos que j√° possuem um ‚Äúsignificado‚Äù para o Python, ent√£o n√£o podemos usa-los como vari√°veis.",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Introdu√ß√£o ao Python I</span>"
    ]
  },
  {
    "objectID": "aula1-python1.html#tipos-de-dados",
    "href": "aula1-python1.html#tipos-de-dados",
    "title": "1¬† Introdu√ß√£o ao Python I",
    "section": "1.4 Tipos de Dados",
    "text": "1.4 Tipos de Dados\nAdicionar/Editar: texto introdut√≥rio sobre tipos de dados\nAdicionar/Editar: no geral, essa se√ß√£o est√° boa, mas busque fazer melhorias do flow de ensino\nAdicionar/Editar: checar se nenhum tema importante est√° sendo deixado de lado. Por exemplo, citar que existem n√∫meros complexos\n\n1.4.1 String\nUma string √© um ‚Äúdesenho‚Äù, onde o programa n√£o enxerga nenhum valor num√©rico mas consegue diferir os ‚Äúdesenhos‚Äù entre si. Seu s√≠mbolo √© ‚Äô ‚Äô ou ‚Äù ‚Äú, indicando ao programa que √© uma string. Um n√∫mero pode ter valor num√©rico (int ou float por exemplo) ou n√£o (str).\nObs: o python √© uma linguagem extremamente sens√≠vel, ent√£o a string ‚Äújulia‚Äù e a string ‚ÄúJulia‚Äù n√£o s√£o iguais para ele.\n\"Julia\"\n\"luana\"\n\"123456\"\nUma ferramenta que voc√™s usar√£o e que ‚Äúrespiram‚Äù strings √© o len().\n‚ÄúLen‚Äù √© a brevia√ß√£o para a palavra Length, ou seja, comprimento, e √© exatamente o que ele mede: essa fun√ß√£o retorna o n√∫mero de caract√©res de uma string.\nObs: os ESPA√áOS contam como caracteres.\nlen(\"julia cruz\") --&gt; retorna o n√∫mero 10 (um inteiro)\n\n\n1.4.2 Inteiro\nOs inteiros s√£o n√∫meros que n√£o s√£o strings e n√£o possuem valor depois da v√≠gula, ou seja, s√£o n√∫meros inteiros :D. Usados em express√µes matem√°ticas para contas.\n5\n6\n12\n1000\n\n\n1.4.3 Inteiro\nS√£o semelhantes aos n√∫meros inteiros por√©m considera e demanda valores depois da v√≠rgula, mesmo que seja 0. Se misturam com os inteiros em equa√ß√µes matem√°ticas.\n1.0\n2.3\n45.002\n1000.0\n\n\n1.4.4 Booleano\nUm valor booleano √© um tipo de dado que pode representar apenas dois estados distintos: verdadeiro ou falso. √â fundamental em muitos aspectos da programa√ß√£o e da l√≥gica, pois permite tomar decis√µes com base em condi√ß√µes.\nverdadeiro = True\nfalso = False",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Introdu√ß√£o ao Python I</span>"
    ]
  },
  {
    "objectID": "aula1-python1.html#operadores",
    "href": "aula1-python1.html#operadores",
    "title": "1¬† Introdu√ß√£o ao Python I",
    "section": "1.5 Operadores",
    "text": "1.5 Operadores\nAdicionar/Editar: texto introdut√≥rio de o que s√£o operadores\nAdicionar/Editar: no geral, essa se√ß√£o est√° boa, mas busque fazer melhorias do _flow_ de ensino, e checar se nenhum tema importante est√° sendo deixado de lado\n\n1.5.1 Operadores Aritim√©ticos\nOs operadores aritm√©ticos s√£o usados para realizar opera√ß√µes matem√°ticas entre operandos.\nAdicionar/Editar: Salvar como imagem em assets/img (falar com J√∫lia)\n\n\n\nimage.png\n\n\n\nprint(2+2)\n\n4\n\n\n\nprint(2*5 - 7)\n\n3\n\n\n\nprint(4%2)\n\n0\n\n\n\nprint(3%2)\n\n1\n\n\n\ndivisao_inteira = 10 // 6\nprint(divisao_inteira, 10/6)\n\n1 1.6666666666666667\n\n\n\n1.5.1.1 Ordem de Preced√™ncia\n\n# Parenteses\nexpressao_1 = ((2 + 5) * 3)\nprint(expressao_1)\n\nexpressao_2 = (2 + 5 * 3)\nprint(expressao_2)\n\nexpressao_3 = (1 + 5 ** 2)\nprint(expressao_3)\n\n21\n17\n26\n\n\n\nprint(((2*3)**3)/7)\n\n30.857142857142858\n\n\n\n\n\n1.5.2 Operadores l√≥gicos\nOs operadores l√≥gicos s√£o usados alguma rela√ß√£o entre operandos. Quando utilizados, eles retornam valores booleanos (True ou False).\nAdicionar/Editar: Salvar como imagem em assets/img (falar com J√∫lia)\n\n\n\nimage.png\n\n\nAdicionar/Editar: Salvar como imagem em assets/img (falar com J√∫lia)\n\nAdicionar/Editar: Salvar como imagem em assets/img (falar com J√∫lia)\n\nAdicionar/Editar: Salvar como imagem em assets/img (falar com J√∫lia)\n\n\n\n1.5.3 Operadores de Atribui√ß√£o\nOs operadores de atribui√ß√£o s√£o usados para atibuir valores a vari√°veis\nAdicionar/Editar: Salvar como imagem em assets/img (falar com J√∫lia)\n\n\nnumero = 5\nnumero += 1\nprint(numero)\n\n6\n\n\n\nnumero = 3\nnumero -= 1\nprint(numero)\n\n2\n\n\n\nnumero = 7\nnumero *= 5\nprint(numero)\n\n35\n\n\n\nnumero = 9\nnumero /= 5\nprint(numero)\n\n1.8\n\n\n\nnumero = 5\nnumero %= 2\nprint(numero)\n\n1\n\n\nAdicionar/Editar: Escolha uma frase remetendo pausa e tire print de alguma arte dela em https://patorjk.com/software/taag/. Exemplo:\n\n\n\n\nüòé",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Introdu√ß√£o ao Python I</span>"
    ]
  },
  {
    "objectID": "aula1-python1.html#control-flow",
    "href": "aula1-python1.html#control-flow",
    "title": "1¬† Introdu√ß√£o ao Python I",
    "section": "1.6 Control Flow",
    "text": "1.6 Control Flow\nAdicionar/Editar: texto introdut√≥rio de o que √© control flow\nAdicionar/Editar: o conte√∫do da aula antiga s√£o bons, mas podem ser reorganizados de uma maneira mais direta na estrutura abaixo. busque fazer melhorias do _flow_ de ensino, e checar se nenhum tema importante est√° sendo deixado de lado\n\n1.6.1 Condicionais\n\n1.6.1.1 if\n\n\n1.6.1.2 if else\n\n\n1.6.1.3 if elif else\n\n\n\n1.6.2 Loops\n\n1.6.2.1 while\n\n\n1.6.2.2 for\nAdicionar/Editar: lembrar que ainda n√£o ensinamos listas\n\n\n\n1.6.3 Keywords\n\n1.6.3.1 break\n\n\n1.6.3.2 continue",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Introdu√ß√£o ao Python I</span>"
    ]
  },
  {
    "objectID": "aula1-python1.html#fun√ß√µes",
    "href": "aula1-python1.html#fun√ß√µes",
    "title": "1¬† Introdu√ß√£o ao Python I",
    "section": "1.7 Fun√ß√µes",
    "text": "1.7 Fun√ß√µes\nAdicionar/Editar: texto introdut√≥rio de o que s√£o fun√ß√µes\nAdicionar/Editar: o conte√∫do da aula antiga s√£o bons, mas podem ser reorganizados de uma maneira mais direta na estrutura abaixo. busque fazer melhorias do _flow_ de ensino, e checar se nenhum tema importante est√° sendo deixado de lado\n\n1.7.1 Sintaxe e Defini√ß√£o\n\n\n1.7.2 Argumentos\nAdicionar/Editar: b√°sico, argumentos posicionais, e argumentos padr√£o\nAdicionar/Editar: Podemos passar praticamente qualquer coisa como argumentos para fun√ß√µes em Python. Isso inclui, mas n√£o est√° limitado a, n√∫meros, strings, cole√ß√µes de dados, e at√© mesmo outras fun√ß√µes + exemplo\n\n\n1.7.3 Fun√ß√µes An√¥nimas",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Introdu√ß√£o ao Python I</span>"
    ]
  },
  {
    "objectID": "aula1-python1.html#recapitulando",
    "href": "aula1-python1.html#recapitulando",
    "title": "1¬† Introdu√ß√£o ao Python I",
    "section": "Recapitulando",
    "text": "Recapitulando\nAdicionar/Editar: Adicionar texto de recapitulando. Em par√°grafos, primeiro sobre os principais objetivos de aprendizagem, depois sobre os conceitos te√≥ricos aprendidos, e por fim, dos conceitos \"decoreba\" aprendidos",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Introdu√ß√£o ao Python I</span>"
    ]
  },
  {
    "objectID": "aula1-python1.html#extras",
    "href": "aula1-python1.html#extras",
    "title": "1¬† Introdu√ß√£o ao Python I",
    "section": "1.8 Extras",
    "text": "1.8 Extras\nAdicionar/Editar: Realizar melhorias nessa se√ß√£o √© secund√°rio\nAdicionar/Editar: Resumir (em t√≥picos) o que ser√° visto nesta se√ß√£o, e como os alunos devem abordar o estudo desses temas (avisar se √© algo bem avan√ßado, dif√≠cil de entender, se √© algo mais \"decoreba\", etc\n\n1.8.1 T√≥picos Adicionais em Fun√ß√µes\n\n1.8.1.1 *args e **kwargs\nAdicionar/Editar: Esse √© um t√≥pico dif√≠cil, talvez d√™ para apresent√°-lo de uma maneira mais simples e did√°tica. Adicionar explica√ß√£o em texto para os exemplos\nO operador * e ** s√£o operadores de ‚Äúdesempacotamento‚Äù. Transformam uma lista em v√°rios argumentos ‚Äúsoltos‚Äù. Suponha que voc√™ tenha uma lista de argumentos que quer passar para uma fun√ß√£o, no lugar de pegar cada elemento da lista individualmente, voc√™ pode usar *:\n\nargs = [1, 2, 3]\n\nprint(1, 2, 3) #resultado quisto\nprint(args[0], args[1], args[2]) #pior\nprint(*args) #melhor\n\n1 2 3\n1 2 3\n1 2 3\n\n\nO operador ** √© similar, mas transforma um dicion√°rio em v√°rios argumentos nomeados:\n\nargs = (1, 2, 3)\nkwargs = {'sep': '-', 'end': '!\\n'}\n\nprint(1, 2, 3, sep = '-', end = '!\\n') #resultado quisto\nprint(args[0], args[1], args[2], sep = kwargs['sep'], end = kwargs['end']) #pior\nprint(*args, **kwargs) #melhor\n\n1-2-3!\n1-2-3!\n1-2-3!\n\n\nTamb√©m podemos fazer a opera√ß√£o inversa, criar uma fun√ß√£o que receba um n√∫mero desconhecido de argumentos (soltos/desempacotados). Podemos preceder qualquer nome de argumento com * ou **, e eles coletar√£o argumentos n√£o utilizados, e os empacotar√£o em uma tuple e dicion√°rio, respectivamente.\n\ndef f(a, *args):\n  print(args)\n\nprint(f(4, 1, 2, 3)) # a = 4 !!!\n\ndef g(a, **kwargs):\n  print(kwargs)\n\ng(4, um = 1, dois = 2, tres = 3)\n\n(1, 2, 3)\nNone\n{'um': 1, 'dois': 2, 'tres': 3}\n\n\nIsso √© √∫til porque a partir disso, podemos utilizar esses argumetos com base nos m√©todos de dicion√°rio e tuples. Ou, podemos desempacotar e pass√°-los diretamente √† outras fun√ß√µes:\n\ndef my_sum(*args):\n    result = 0\n    for x in args:\n        result += x\n    print(result)\n\nmy_sum(1, 2, 3, 4, 5, 6)\n\ndef my_print(*args, **kwargs):\n  print(*args, **kwargs)\n\nmy_print('oi', 'ol√°', sep = ', ', end = '!')\n\n21\noi, ol√°!\n\n\n\ndef calcular_imc(*args, **kwargs):\n    resultados = []\n\n    for i, pessoa in enumerate(args):\n        peso = kwargs.get(f'peso{i}', None)\n        altura = kwargs.get(f'altura{i}', None)\n\n        if peso is None or altura is None:\n            print(f\"Faltam dados para a pessoa {i+1}. Peso e altura s√£o necess√°rios.\")\n            continue\n\n        if peso &lt;= 0 or altura &lt;= 0:\n            print(f\"Valores inv√°lidos para a pessoa {i+1}. Peso e altura devem ser positivos.\")\n            continue\n\n        imc = peso / (altura ** 2)\n        resultados.append(imc)\n\n    return resultados\n\nimcs = calcular_imc(1,2,3, peso0=60, altura0=1.7, peso1=70, altura1=1.75, peso2=80, altura2=1.8)\nprint(imcs)\n\n[20.761245674740486, 22.857142857142858, 24.691358024691358]\n\n\n\n\n1.8.1.2 Ambientes e Busca de Valores\nAdicionar/Editar: texto explicativo sobre vari√°veis locais e globais, e como fun√ß√µes buscam por valores que precisam utilizar (com base nos exemplos abaixo)\n\na = 1\nb = 2\nc = 3\nd = 4\n\ndef fun(a, **kwargs):\n    b = 20\n    return [a, b, c, d]\n\nfun(a = 10, c = 30)\n\n[10, 20, 3, 4]\n\n\n\ndef fun(a, **kwargs):\n    b = 20\n    return [a, b, c, d, e]\n\nfun(a = 10, c = 30)\n\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[126], line 5\n      2     b = 20\n      3     return [a, b, c, d, e]\n----&gt; 5 fun(a = 10, c = 30)\n\nCell In[126], line 3, in fun(a, **kwargs)\n      1 def fun(a, **kwargs):\n      2     b = 20\n----&gt; 3     return [a, b, c, d, e]\n\nNameError: name 'e' is not defined\n\n\n\n\n\n\n1.8.2 Erros/Exce√ß√µes\n\n1.8.2.0.1 Tipos de exce√ß√µes\nRefer√™ncia: https://docs.python.org/3/library/warnings.html, https://www.tutorialsteacher.com/python/error-types-in-python\nExistem v√°rios motivos diferentes para um script n√£o rodar, √© importante saber os mais comuns para ajudar na hora de investigar o que est√° de errado com um c√≥digo.\n\nErro de sintaxe: SyntaxError, IndentationError, TabError\nErro de falta de mem√≥ria: MemoryError, OverflowError\nErro de refer√™ncia: IndexError, KeyError, NameError\nErro de opera√ß√£o: ZeroDivisionError, TypeError\nErro de l√≥gica: o python realiza o c√≥digo, mas n√£o faz o que voc√™ queria que ele fizesse\nExce√ß√µes: ‚Äúo python sabe o que fazer com o c√≥digo mas n√£o consegue realizar a a√ß√£o quista‚Äù\nAvisos: n√£o interrompem o c√≥digo, mas indicam que algo pode estar errado\n\n\n\n1.8.2.0.2 Como lidar com exce√ß√µes?\nRefer√™ncia: https://www.w3schools.com/python/python_try_except.asp\nAvisar ao utilizador do c√≥digo que houve algum erro espec√≠fico:\n\ntry:\n    juros = int(input(\"Qual a taxa de juros desejada? \"))\n    print(\"A taxa escolhida foi {0}%.\".format(juros))\nexcept:\n    print(\"A taxa de juros deve ser um n√∫mero\")\n\nA taxa de juros deve ser um n√∫mero\n\n\nEm um loop, indicar que um dos itens n√£o funcionou, mas realizar a opera√ß√£o para o resto dos itens:\n\nimport requests\n\npaginas = []\nurlList = ['https://finance.yahoo.com/quote/PETR4.SA', 'urlquebrado.com', 'https://finance.yahoo.com/quote/VALE3.SA']\n\nfor url in urlList:\n    try:\n        request = requests.get(url)\n        result = f\"result - {url}\" #algo com os dados da p√°gina\n        paginas.append(result)\n    except:\n        paginas.append(\"NA\")\n        print(f\"A p√°gina {url} n√£o pode ser lida\")\n\npaginas\n\nA p√°gina urlquebrado.com n√£o pode ser lida\n\n\n['result - https://finance.yahoo.com/quote/PETR4.SA',\n 'NA',\n 'result - https://finance.yahoo.com/quote/VALE3.SA']",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Introdu√ß√£o ao Python I</span>"
    ]
  },
  {
    "objectID": "aula2-python2.html",
    "href": "aula2-python2.html",
    "title": "2¬† Introdu√ß√£o ao Python II",
    "section": "",
    "text": "Introdu√ß√£o\nAdicionar/Editar: Motiva√ß√£o da aula\nAdicionar/Editar: TOC dos temas da aula (pra ajudar os alunos a se acharem na aula)\nAdicionar/Editar: Texto (enxuto, objetivo) com os objetivos de aprendizagem principais (o que, principalmente, os alunos tem que sair dessa aula sabendo)\nAdicionar/Editar: Ao longo da aula: adicionar mais refer√™ncias, especialmente sobre onde expandir os conhecimentos sobre cada tema",
    "crumbs": [
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Introdu√ß√£o ao Python II</span>"
    ]
  },
  {
    "objectID": "aula2-python2.html#oop",
    "href": "aula2-python2.html#oop",
    "title": "2¬† Introdu√ß√£o ao Python II",
    "section": "2.1 OOP",
    "text": "2.1 OOP\nAdicionar/Editar: Esse √© um t√≥pico dif√≠cil, com certeza d√° para modificar o texto e apresent√°-lo de uma maneira mais simples e did√°tica. Tamb√©m com certeza, h√° t√≥picos faltante. √â preciso ver o que vale a pena adicionar aqui, e o que √© avan√ßado demais/pouco utilizado. Falar com o Theodoro e o Michel, que eles manjam\nAdicionar/Editar: Os exemplos precisam ser explicados em markdown\nCome√ßamos com uma apresenta√ß√£o.\nO objetivo de criar uma fun√ß√£o era dar um nome √† uma opera√ß√£o espec√≠fica, para que n√£o seja necess√°rio escrever essa opera√ß√£o por extenso toda vez que se precise realiz√°-la. Al√©m disso, fica muito mais f√°cil fazer manuten√ß√£o no c√≥digo se existe um erro nessa opera√ß√£o.\nAs classes seguem um objetivo similar, mas servem para dar nome a uma estrutura de dados.\n\n2.1.1 Classes, Objetos, e M√©todos\nAs classes s√£o compostas de:\n\nAtributos ou Propriedades (Attributes ou Properties): S√£o dados ou estados caracter√≠sticos daquela classe. Por exemplo, a classe ‚Äúa√ß√µes‚Äù pode ser modelada como tendo um pre√ßo m√©dio, um volume di√°rio, e um ticker.\nM√©todos: S√£o as fun√ß√µes que s√£o espec√≠ficos daquela classe, muitas vezes utilizam os pr√≥prios atributos da classe para realizar uma opera√ß√£o. Por exemplo, pode-se criar um m√©todo na classe ‚Äúa√ß√µes‚Äù que mutliplique o pre√ßo m√©dio pelo volume di√°rio para se obter o volume financeiro m√©dio.\n\nMas ent√£o, o que s√£o os objetos?\n\nClasse (class), estrutura de dados / procedimentos / fun√ß√µes que podem se repetir no programa;\nObjeto (object), inst√¢ncias (exemplos espec√≠ficos) das classes.\n\nQualquer estrutura que possua m√∫ltiplas inst√¢ncias pode ser caracterizada como uma classe (class), e qualquer inst√¢ncia/exemplo dessa estrutura pode ser um objeto (object). Exemplo: a√ß√µes e PETR4.SA:\nAdicionar/Editar: Salvar como imagem em assets/img (falar com o Ricardo)\n\n\n\n2.1.2 Sintaxe e Defini√ß√£o\nAdicionar/Editar: √© preciso explicar melhor os exemplos, em texto\nUsamos a palavra class, o nome da classe (com a primeira letra em ma√≠sculo, por conven√ß√£o), e ‚Äú()‚Äù, indicando uma a√ß√£o (no caso, criar um objeto da classe).\nNormalmente a defini√ß√£o de uma classe come√ßa pelo m√©todo init. ele √© um m√©todo especial, o m√©todo construtor, e indica que todas as linhas subordinadas a ele devem ser executadas quando um objeto daquela classe √© criado. As linhas que est√£o subordinadas ao m√©todo init s√£o aquelas que estabelecem os atributos.\nAl√©m disso, a palavra self √© uma refer√™ncia a todos os atributos de um objeto. Os m√©todos levam como argumento o pr√≥prio objeto em si, ou seja, o m√©todo que tem self como argumento pode acessar e trabalhar com todos os elementos do objeto em si.\nDepois do m√©todo construtor (init), em geral, v√™m os m√©todos ordin√°rios, aqueles que executam a√ß√µes.\n\nclass aluno():\n  #criando atributos\n    def __init__(self, nome, nota1, nota2):\n        self.nome = nome\n        self.nota1 = nota1\n        self.nota2 = nota2\n        \n  #criando m√©todos\n    def media(self):\n        return (self.nota1 + self.nota2) / 2\n\n\nmichel = aluno(nome = \"Michel\", nota1 = 7, nota2 = 10)\nprint(michel.nome, michel.media())\n\nMichel 8.5\n\n\n\nclass Stocks():\n    def __init__(self, ticker_name, price_inDolars, volume_inUnits, beta_float,\n                 divDate_string, enterpriseValue_inDolars, price_inList):\n        self.ticker = ticker_name # preenchendo name com o valor referente ao argumento full_name\n        self.price_last = price_inDolars\n        self.volume_last_day = volume_inUnits\n        self.beta = beta_float\n        self.divDate = divDate_string\n        self.enterpriseValue = enterpriseValue_inDolars\n        self.price_hist = price_inList\n        self.portShare = 0# n√£o vem de argumento, sempre uma a√ß√£o come√ßa com esse valor de argumento\n\n    def eatfinVolume(self): # self entra como argumento para que o procedimento possa acessar os atributos e seus valores.\n        return self.price_last * self.volume_last_day\n\n    def addPrice(self, price):\n        self.price_hist.append(price)\n\n    def changeShare(self, newshare):\n        self.portShare = newshare\n\n    def printPrice(self):\n        print(\"The stock \" + self.ticker + \" has a last price of \" + str(self.price_last))\n\n    def __str__(self):\n        return \"The stock \" + str(self.ticker) + \" has a last price of \" + str(self.price_last)\n\n\npetr = Stocks(ticker_name = \"PETR4.SA\",\n              price_inDolars = 30.13,\n              volume_inUnits = 93824145,\n              beta_float = 1.33,\n              divDate_string = \"Aug 12, 2022\",\n              enterpriseValue_inDolars = 594060000000,\n              price_inList = [29.80, 30.39, 29.44])\n\nprint(petr.ticker)\n\npetr.eatfinVolume()\n\npetr.printPrice()\n\npetr.price_last = 31.23\nprint(petr.price_last)\n\npetr.nationality = \"Brazil\"\nprint(petr.nationality)\n\nprint(petr)\n\nPETR4.SA\nThe stock PETR4.SA has a last price of 30.13\n31.23\nBrazil\nThe stock PETR4.SA has a last price of 31.23",
    "crumbs": [
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Introdu√ß√£o ao Python II</span>"
    ]
  },
  {
    "objectID": "aula2-python2.html#cole√ß√µes",
    "href": "aula2-python2.html#cole√ß√µes",
    "title": "2¬† Introdu√ß√£o ao Python II",
    "section": "2.2 Cole√ß√µes",
    "text": "2.2 Cole√ß√µes\nAdicionar/Editar: texto introdut√≥rio de o que s√£o cole√ß√µes\nAdicionar/Editar: o conte√∫do da aula antiga s√£o bons, mas podem ser reorganizados de uma maneira mais direta na estrutura abaixo. busque fazer melhorias do _flow_ de ensino, e checar se nenhum tema importante est√° sendo deixado de lado\nAdicionar/Editar: criar texto para fazer a ponte que cole√ß√µes s√£o na verdade classes, com seus m√©todos!\nO nome cole√ß√µes vem de ‚Äúconjunto‚Äù de dados, e existem quatro tipos diferentes, que servem para objetivos diferentes, baseados em suas caracter√≠sticas:\n\n\n\n\nOrdenado\nMut√°vel\nDuplicatas\n\n\n\n\nListas\nsim\nsim\nsim\n\n\nTuples\nsim\nn√£o\nsim\n\n\nSets\nn√£o\nn√£o\nn√£o\n\n\nDicion√°rios\nsim\nsim\nn√£o\n\n\n\nEm termos mais simples listas s√£o as mais flex√≠veis e menos espec√≠ficas, tuples s√£o listas imut√°veis, e dicion√°rios s√£o listas nomeadas. Sets, os mais restritivos, funcionam como o conceito de ‚Äúconjunto‚Äù da matem√°tica.\nCada cole√ß√£o tem seus pr√≥prios m√©todos, d√™em uma olhada neles nos tutoriais abaixo:\n\nW3Schools: https://www.w3schools.com/python/python_lists.asp (mais simples e sucinto);\nDocumenta√ß√£o do Python: https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences (mais t√©cnico, mais informa√ß√µes).\n\n\n2.2.1 Listas\nAdicionar/Editar: Texto (enxuto, objetivo) de introdu√ß√£o\n\n2.2.1.1 Sintaxe e Defini√ß√£o\nAdicionar/Editar: criar com list() ou []. Falar sobre type()\n\n\n2.2.1.2 Acessar e Alterar\nAdicionar/Editar: t√©cnincas de indexing, `[]`, `[:]`\nAdicionar/Editar: nested lists e como acessar seus elementos\n\n\n2.2.1.3 Adicionar, Unir, e Remover\nAdicionar/Editar: adicionar/unir: .append, .extend, `+`/`*`, .insert\nAdicionar/Editar: remover: .clear, .pop, .remove, del\n\n\n2.2.1.4 Tamanho, Ordem, e Posi√ß√£o\nAdicionar/Editar: length(), .sort, .reverse\nAdicionar/Editar: .index e .count\n\n\n2.2.1.5 Comparadores\nAdicionar/Editar: `in`/`not in`, ==/!=, is/is not, &gt;/&gt;=/&lt;/&lt;=\n\n\n2.2.1.6 Loops e Comprehension\nAdicionar/Editar: for, [expression for item in collection], e varia√ß√µes mais complexas (com if, etc)\n\n\n\n2.2.2 Tuples\nAdicionar/Editar: Texto (enxuto, objetivo) de introdu√ß√£o\n\n2.2.2.1 Sintaxe e Defini√ß√£o\nAdicionar/Editar: criar com tuple() ou (). Falar sobre type()\n\n\n2.2.2.2 Similaridades com Listas\nAdicionar/Editar: Texto sobre as opera√ß√µes de listas que tuples. A sintaxe pro comprehension √© tuple(expression for item in collection)\n\n\n2.2.2.3 Unpacking\n\n\n\n2.2.3 Dicts\nAdicionar/Editar: Texto (enxuto, objetivo) de introdu√ß√£o\n\n2.2.3.1 Sintaxe e Defini√ß√£o\nAdicionar/Editar: criar com dict() ou {} ou .fromkeys. Falar sobre type()\n\n\n2.2.3.2 Similaridades com Listas\nAdicionar/Editar: Texto sobre as opera√ß√µes de listas que valem pra dicts. A sintaxe pro comprehension √© {expression for item in collection}\n\n\n2.2.3.3 Acessar e Alterar\nAdicionar/Editar: t√©cnincas de indexing com keys, .keys, .values, .items, .get\nAdicionar/Editar: .update, .pop, .popitem, .setdefault\n\n\n\n2.2.4 Sets\nAdicionar/Editar: Texto (enxuto, objetivo) de introdu√ß√£o\n\n2.2.4.1 Sintaxe e Defini√ß√£o\nAdicionar/Editar: criar com set() . Falar sobre type()\n\n\n2.2.4.2 Similaridades com Listas\nAdicionar/Editar: Texto sobre as opera√ß√µes de listas que valem pra dicts. A sintaxe pro comprehension √© {expression for item in collection}\n\n\n2.2.4.3 Acessar e Alterar\nAdicionar/Editar: .add\nAdicionar/Editar: .discard\n\n\n2.2.4.4 Set Operations\nAdicionar/Editar: union (|), intersection (&), update (|=), issub/superset (&gt;, &gt;=, &lt;, &lt;=), isdisjoint, etc\nAdicionar/Editar: Escolha uma frase remetendo pausa e tire print de alguma arte dela em https://patorjk.com/software/taag/. Exemplo:\n\n\n\n\nüòé\n\n\n\n\n\n\n2.2.5 Fun√ß√µes Sobre Iter√°veis\nAdicionar/Editar: Texto (enxuto, objetivo) de o que s√£o iter√°veis\nAdicionar/Editar: Os exemplos abaixo podem ser alterados, mas o mais importante √© adicionar explica√ß√£o em markdown das fun√ß√µes enumerate, filter, zip, e map\n\nmy_list = ['S√£o Paulo', 'Flamengo']\n\n# o que √© um iter√°vel?\n\nenumerate(my_list), list(enumerate(my_list))\n#type(enumerate(my_list))\n\n(&lt;enumerate at 0x1f99aa4be70&gt;, [(0, 'S√£o Paulo'), (1, 'Flamengo')])\n\n\n\n#sem enumerate:\nindex = 0\nfor i in my_list:\n    print('Parab√©ns ' + i + '! Voc√™ ficou em ' + str(index + 1) + '¬∫ lugar!')\n    index += 1\n\nParab√©ns S√£o Paulo! Voc√™ ficou em 1¬∫ lugar!\nParab√©ns Flamengo! Voc√™ ficou em 2¬∫ lugar!\n\n\n\n#com enumerate:\nfor index, i in enumerate(my_list):\n    print('Parab√©ns ' + i + '! Voc√™ ficou em ' + str(index + 1) + '¬∫ lugar!')\n\nprint(\"cof cof Copa do Brasil cof cof\")\n\nParab√©ns S√£o Paulo! Voc√™ ficou em 1¬∫ lugar!\nParab√©ns Flamengo! Voc√™ ficou em 2¬∫ lugar!\ncof cof Copa do Brasil cof cof\n\n\n\ndef maior_que_dois(x):\n    return x &gt; 2\n#Ou utilizar uma fun√ß√£o an√¥nima \"lambda\": lambda x: x &gt; 2\n\nmy_list = [1,2,3,4]\nprint(list(filter(maior_que_dois, my_list)))\nprint(list(filter(lambda x: x&gt;2, my_list)))\n\n[3, 4]\n[3, 4]\n\n\n\nmy_map = list(map(maior_que_dois, my_list)) # map: aplicar uma fun√ß√£o para todos os itens\nmy_map\n\n[False, False, True, True]\n\n\n\nprint(my_list)\nprint(my_map)\n[my_list, my_map]\n\n[(my_list[i], my_map[i]) for i in range(4)]\nlist(zip(my_list, my_map))\n# zip(): une tuplas, mas √© um objeto pr√≥prio\n# ‚Üí precisa fazer tuple(zip()) para ver a tupla mesmo\n\n[1, 2, 3, 4]\n[False, False, True, True]\n\n\n[(1, False), (2, False), (3, True), (4, True)]",
    "crumbs": [
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Introdu√ß√£o ao Python II</span>"
    ]
  },
  {
    "objectID": "aula2-python2.html#vari√°veis-novamente",
    "href": "aula2-python2.html#vari√°veis-novamente",
    "title": "2¬† Introdu√ß√£o ao Python II",
    "section": "2.3 Vari√°veis, Novamente",
    "text": "2.3 Vari√°veis, Novamente\nFalamos sobre como vari√°veis s√£o um conjunto nome-valor. Vamos explorar um pouco mais essa ideia.\nRefer√™ncia: https://nedbatchelder.com/text/names.html (fonte dos diagramas).\nObs: a discuss√£o aqui introduz um conceito te√≥rico, do mundo da Ci√™ncia da Computa√ß√£o. Al√©m de ser algo interessante, que vai ajudar voc√™ a entenderem como linguagens de programa√ß√£o funcionam, vai ajudar na pr√°tica a evitar um tipo espec√≠fico de erro.\nConsidere o c√≥digo x = 23, n√≥s temos o nome ‚Äúx‚Äù fazendo refer√™ncia ao valor (na mem√≥ria do computador) ‚Äú23‚Äù:\n\n\nx refers to 23\n\nx23\n\nSe fizermos y = x, n√£o criamos um novo objeto, mas temos agora um novo nome apontando para o mesmo valor:\n\n\nx and y both refer to 23\n\nxy23\n\nNote que poderia ser o contr√°rio, na cria√ß√£o de y, criava-se um novo valor (local na mem√≥ria) para ele, como abaixo, mas n√£o √©.\n\n\nx and y aren‚Äôt magically linked\n\nxy2323\n\nE se alterarmos a vari√°vel y, o que pode acontecer?\n\nO valor (o √∫nico que existe) √© alterado, e os dois nomes agora fazem refer√™ncia a esse valor atualizado.\nCria-se um novo valor para y, e agora cada nome se refere a um valor diferente.\n\nNo Python, neste caso, o que acontece √© a segunda op√ß√£o.\nSe rodarmos y = 12, o que n√£o acontece √©:\n\n\nx and y both refer to 23\n\nxy12\n\nE sim:\n\n\nx and y aren‚Äôt magically linked\n\nxy1223\n\nIsso √©, o valor foi primeiro copiado (para um novo local da mem√≥ria), e depois alterado. Esse comportamento tem o nome de ‚Äúcopy-on-modify‚Äù.\nEm oposi√ß√£o:\n\nPoder√≠amos chamar o comportamento em vermelho de ‚Äúcopy-on-creation‚Äù.\nO comportamento da ‚Äúop√ß√£o 2.‚Äù √© chamado de ‚Äúmodify in place‚Äù.\n\nMas esse comportamento depende do tipo do objeto. No exemplo acima, o valor foi copiado, porque era imut√°vel. Alguns tipos de valores s√£o mut√°veis e s√£o ‚Äúmodified-in-place‚Äù.\nVoc√™s viram que listas s√£o mut√°veis, vamos ver um exemplo com elas.\nO c√≥digo:\nnums = [1, 2, 3]\ntri = nums\nGera:\n\n\nnums and tri both refer to the same list\n\nnumstri123\n\nE se rodarmos nums.append(4)? Listas s√£o mut√°veis, ent√£o n√£o criaremos uma c√≥pia/um novo valor para nums, e sim, modificaremos o valor a quem nums se refere, in-place:\n\n\nchanging the list means both names see the change\n\nnumstri1234\n\nEssa diferen√ßa de comportamento, a depender do tipo do objeto, gera muita confus√£o. Para usu√°rios de R, notem que no R, todos (menos um) os tipos de objetos s√£o imut√°veis, e s√£o copied-when-modified, no Python, isso n√£o √© verdade.\nDo artigo do Ned Batchelder:\n\nThis Mutable Presto-Chango is the biggest issue people have with Python‚Äôs names and values. A value is shared by more than one name, and is modified, and all names see the change.\n\n\nKeep in mind, this is not a bug in Python, however much you might wish that it worked differently. Many values have more than one name at certain points in your program, and it‚Äôs perfectly fine to mutate values and have all the names see the change. The alternative would be for assignment to copy values, and that would make your programs unbearably slow.\n\nAgora, voc√™s sabem o mecanismo por tr√°s desse comportamento, e podem evitar cometer erros em rela√ß√£o √† isso.\nQuando voc√™s v√£o criar um objeto mut√°vel com base em outro, deve-se perguntar: ‚Äúeu quero que esse nome tenha a sua pr√≥pria c√≥pia independente dos dados, ou quero que ambos os nomes fa√ßam refer√™ncia ao mesmo dado?‚Äù.\n\nSe a sua inten√ß√£o √© a segunda, fa√ßa y = x.\nSe √© a segunda, os objetos mut√°veis tem um m√©todo .copy() exatamente para isso, faca y = x.copy()",
    "crumbs": [
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Introdu√ß√£o ao Python II</span>"
    ]
  },
  {
    "objectID": "aula2-python2.html#recapitulando",
    "href": "aula2-python2.html#recapitulando",
    "title": "2¬† Introdu√ß√£o ao Python II",
    "section": "Recapitulando",
    "text": "Recapitulando\nAdicionar/Editar: Adicionar texto de recapitulando. Em par√°grafos, primeiro sobre os principais objetivos de aprendizagem, depois sobre os conceitos te√≥ricos aprendidos, e por fim, dos conceitos \"decoreba\" aprendidos",
    "crumbs": [
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Introdu√ß√£o ao Python II</span>"
    ]
  },
  {
    "objectID": "aula2-python2.html#extras",
    "href": "aula2-python2.html#extras",
    "title": "2¬† Introdu√ß√£o ao Python II",
    "section": "2.4 Extras",
    "text": "2.4 Extras\nAdicionar/Editar: Realizar melhorias nessa se√ß√£o √© secund√°rio\nAdicionar/Editar: Resumir (em t√≥picos) o que ser√° visto nesta se√ß√£o, e como os alunos devem abordar o estudo desses temas (avisar se √© algo bem avan√ßado, dif√≠cil de entender, se √© algo mais \"decoreba\", etc\n\n2.4.1 f-strings\nAdicionar/Editar: explicar\n\n\n2.4.2 Fun√ß√µes √öteis\nAdicionar/Editar: Melhorar os exemplos, e adicionar markdown explicando. Muitos exemplos n√£o rodam, ou n√£o tem seu resultado printado, corrigir isso.\nDaqui em diante, a aula √© 100% expositiva. Vamos explicar as fun√ß√µes mais essenciais, e o resto fica aqui de consulta para voc√™s.\nRefer√™ncia: https://docs.python.org/3/library/functions.html\n\n2.4.2.1 Fun√ß√µes relacionadas √† tipos de vari√°veis\n\nbool(0), bool(1), bool(1811275162543)\n\n(False, True, True)\n\n\n\nfloat(10), float(3.5), float('3.5')\n\n(10.0, 3.5, 3.5)\n\n\n\nint('8'), int(10.7)\nstr(8)\n\n'8'\n\n\n\ntype([1, 2])\n\nlist\n\n\n\n\n2.4.2.2 Fun√ß√µes sobre cria√ß√£o de vari√°veis\n\ndict(zip(my_list, my_map))\n\n{1: False, 2: False, 3: True, 4: True}\n\n\n\nlist()\n\n[]\n\n\n\nset([1,2,2,3,4])\n\n{1, 2, 3, 4}\n\n\n\ntuple(my_list)\n\n(1, 2, 3, 4)\n\n\n\ntype((1, 2))\n\ntuple\n\n\n\n\n2.4.2.3 Outras fun√ß√µes\n\nmy_list, repr(my_list), eval(repr(my_list)), eval('1+2')\n# eval(): avalia um string para ver se tem como fazer contas l√° dentro ‚Üí se der, devolve quanto que d√°\n\n([1, 2, 3, 4], '[1, 2, 3, 4]', [1, 2, 3, 4], 3)\n\n\n\ninput(\"A aula t√° legal? \") #recebe algum valor do terminal\n\n''\n\n\n\n\n2.4.2.4 Fun√ß√µes matem√°ticas e l√≥gicas\n\nabs() #m√≥dulo\ndivmod() #n√∫mero, divisor. resultado: (parte inteira, resto)\nmax()\nmin()\npow() #base, expoente\nround() #n√∫mero, d√≠gitos\nsum()\nall([True, True, False]) # True se todos os argumentos s√£o true\nany([True, True, False]) # True se pelo menos um argumento √© verdadeiro\n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[166], line 1\n----&gt; 1 abs() #m√≥dulo\n      2 divmod() #n√∫mero, divisor. resultado: (parte inteira, resto)\n      3 max()\n\nTypeError: abs() takes exactly one argument (0 given)\n\n\n\n\nabs(-3), abs(3)\n\n\ndivmod(7, 5)\n\n\nround(3.1263817241864518742612, 4)\n\n\n\n2.4.2.5 Fun√ß√µes relacionadas √† tipos de vari√°veis\n\nbin(10)\nhex(445125215) # n√∫meros hexadecimais\nint('1000', 2) # \"1000 base 2\"\nord('a'), chr(97) # o item numero 97 no 'dicion√°rio' UNICODE\nchr(ord('a'))\nord(chr(98))\n\n\n\n2.4.2.6 Fun√ß√µes sobre armazenamento de vari√°veis\n\na = 10 #lembre deste 10!\nrepr(dir())\n# repr: retorna um string do objeto\n# dir: todas os nomes no diret√≥rio atual\n\n\nrepr(dir([1,3]))\n\n\nlist(globals().items())[1:5]\n\n\ndict(list(globals().items()))\ndict(list(globals().items()))['__name__']\n\n\n\n2.4.2.7 Outras fun√ß√µes\n\nopen(file_path, mode) #abre um arquivo\n#Mode: 'r', 'w', 'x', 'a'; '+'; 'b' ou 't'\n# 'r' = read\n# 'w' = write\n# 'x' = Create\n# 'a' = Append\n# 'b' = Binary\n# 't' = Text\n\n\nhelp() #abre o prompt de ajuda no terminal\n\n\n\n\n2.4.3 Bibliotecas\nAdicionar/Editar: Texto (enxuto, objetivo) de o que s√£o bibliotecas. Explicar a diferen√ßa de biblioteca, pacote, e m√≥dulo, e padronizar a nomenclatura deste documento\nAdicionar/Editar: Melhorar os exemplos, e adicionar markdown explicando. Muitos exemplos n√£o rodam, ou n√£o tem seu resultado printado, corrigir isso\n\n2.4.3.1 Como Instalar Bibliotecas\nRefer√™ncia: https://packaging.python.org/en/latest/tutorials/installing-packages/\nChecar instala√ß√£o do python (digitar no terminal): &gt; py ‚Äìversion\nChecar instala√ß√£o do pip, o instalador de pacotes: &gt; py -m pip ‚Äìversion\nInstalar o pacote pelo nome: &gt; py -m pip install nome_do_pacote\n\n\n2.4.3.2 M√≥dulo math\nRefer√™ncia: https://docs.python.org/3/library/math.html\n\nimport math\n\n\nround(math.pi, 3)\n\n\nmath.ceil()\nmath.floor()\nmath.trunc()\nmath.modf(5.256) #(0.2560000000000002, 5.0)\n\n\nmath.comb(k_items, n_op√ß√µes) #n! / (k! * (n - k)!) ) (sem ordem, sem repeti√ß√£o)\nmath.perm(k_items, n_op√ß√µes) #n! / (n - k)! (com ordem, sem repeti√ß√£o)\nmath.factorial(n)\n\n\nmath.gcd() #mdc\nmath.lcm() #mmc\n\n\n# abs(a-b) &lt;= max(rel_tol * max(abs(a), abs(b)), abs_tol)\n# rel_tol = toler√¢ncia relativa\n# abs_tol = toler√¢ncia absoluta\nprint(math.isclose(5, 10, rel_tol=0.49, abs_tol=0))\nprint(math.isclose(5, 10, rel_tol=0, abs_tol=5))\n\n\nmath.isfinite()\nmath.isinf()\n\n\n\n2**(0.5), math.sqrt(2)\n\n\nprint(math.dist((0,0), [1,1])) # dist√¢ncia euclidiana\nprint(math.hypot(1,1,1,1,1)) # norma euclidiana ‚Üí dist√¢ncia da origem at√© o ponto\n\n\nmath.cos(), math.sin(), math.tan() #etc.\nmath.degrees(), math.radians() #convers√£o de um pro outro\n\n\nmath.e, math.pi, math.inf\n\n\n\n2.4.3.3 M√≥dulo statistics\nRefer√™ncia: https://docs.python.org/3/library/statistics.html\n\nimport statistics as stat\n\n\nstat.mean()\nstat.geometric_mean()\nstat.harmonic_mean()\nstat.median()\nstat.mode('aaabbb'), stat.multimode('aaabbbc') #('a', ['a', 'b'])\n\n\nstat.quantiles(iterable, n_quantis, method) #m√©todo 'inclusive' se a amostra tiver os maiores valores da popula√ß√£o, e 'exclusive' (default) c.c.\n\n\nstat.stdev(), stat.pstdev()\nstat.variance(), stat.pvariance()\n#vers√µes amostrais e populacionais, respectivamente\n\n\nstat.covariance()\nstat.correlation()\n\n\n\n2.4.3.4 M√≥dulo random\nRefer√™ncia: https://docs.python.org/3/library/random.html\n\nimport random as rd\n\n\nrd.seed(seed)\n\n\nrd.randint(1, 10), rd.random()\n\n\nrd.choices(my_list, weights=[0, 10, 80, 10], cum_weights=None, k=10)\n#rd.choices(my_list, weights=None, cum_weights=[0,m, 10, 90, 100], k=10)\n\n\nprint(my_list)\nrd.shuffle(my_list) #nenhum output\nmy_list #alterou a lista\n\n\nprint(rd.sample(my_list, len(my_list), counts=None)) #nova lista\nprint(my_list) #n√£o alterou a lista\nprint(rd.sample(my_list, 7, counts=[1, 2, 5, 2]))\n#a lista usada foi [3, 2, 2, 4, 4, 4, 4, 4, 1, 1]\n\n\nrd.uniform(2, 8)\nrd.gauss(mu, sigma)\n\n\n\n2.4.3.5 M√≥dulo os\nRefer√™ncia: https://docs.python.org/3/library/os.html, https://www.youtube.com/watch?v=tJxcKyFMTGo\n\nimport os\n\n\nrepr(dir(os))\n\n\nos.getcwd()\nos.chdir('/User/Michel')\n\n\nos.listdir()\n\n\nos.rmdir('aulas gvcode')\nos.removedirs('name/subname')\n\n\nos.rename('text.txt', 'new.txt')\n\n\nos.stat('text.txt') #tamanho, data de cria√ß√£o e modifica√ß√£o, etc\n\n\n\n2.4.3.6 M√≥dulo ScyPy\nRefer√™ncias: https://docs.scipy.org/doc/scipy/tutorial/index.html#user-guide\n\nEstat√≠stica: https://scipy.github.io/devdocs/reference/stats.html\nOtimiza√ß√£o: https://scipy.github.io/devdocs/reference/optimize.html\n√Ålgebra linear: https://scipy.github.io/devdocs/reference/linalg.html\nInterpola√ß√£o: https://scipy.github.io/devdocs/reference/generated/scipy.interpolate.interp1d.html#scipy.interpolate.interp1d\n\n\nimport scipy.stats\n\n\nscipy.stats.linregress(x, y)\n\nAqui, as fun√ß√µes menos essenciais, de consulta para voc√™s.\nRefer√™ncia: https://docs.python.org/3/library/functions.html",
    "crumbs": [
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Introdu√ß√£o ao Python II</span>"
    ]
  },
  {
    "objectID": "aula3-python3.html",
    "href": "aula3-python3.html",
    "title": "3¬† Introdu√ß√£o ao Python III",
    "section": "",
    "text": "Introdu√ß√£o\nAdicionar/Editar: Motiva√ß√£o da aula\nAdicionar/Editar: TOC dos temas da aula (pra ajudar os alunos a se acharem na aula)\nAdicionar/Editar: Texto (enxuto, objetivo) com os objetivos de aprendizagem principais (o que, principalmente, os alunos tem que sair dessa aula sabendo)\nAdicionar/Editar: Adiantando: Em termos simplistas, vamos apresentar dois novos tipos de dados, os vetores e os dataframes (e como utiliz√°-los); Adicionalmente, estudaremos as fun√ß√µes para vetores/dataframes separados pelos \"tipos de opera√ß√µes\", entender essa l√≥gica ajuda a pegar o big picture dos pacotes\nAdicionar/Editar: Ao longo da aula: adicionar mais refer√™ncias, especialmente sobre onde expandir os conhecimentos sobre cada tema",
    "crumbs": [
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Introdu√ß√£o ao Python III</span>"
    ]
  },
  {
    "objectID": "aula3-python3.html#vetores-e-dataframes",
    "href": "aula3-python3.html#vetores-e-dataframes",
    "title": "3¬† Introdu√ß√£o ao Python III",
    "section": "3.1 Vetores e Dataframes",
    "text": "3.1 Vetores e Dataframes\nAdicionar/Editar: Motivar teoricamente porque estamos interessados em aprender outros tipos de (cole√ß√µes de) dados, al√©m da lista. O texto abaixo est√° interessante, mas pode n√£o estar t√£o did√°tico\n\n3.1.1 O Problema\nConsidere o c√≥digo abaixo:\n\nl1 = [1, 2, 3, 4, 5]\nprint(l1 * 2)\nprint([i * 2 for i in l1])\n\n[1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\n[2, 4, 6, 8, 10]\n\n\nA lista n√£o √© multiplicada ‚Äútermo-a-termo‚Äù, que chato‚Ä¶ Porque?\nConsidere a lista [1, \"a\", 3, (1, 2)], como voc√™ faria a multiplica√ß√£o termo-a-termo? N√£o √© √≥bvio.\nO problema √© que listas n√£o precisam ser homog√™neas, seus elementos podem ser de tipos diferentes. Como uma mesma opera√ß√£o √© definida de maneiras diferentes para cada tipo ‚Äì ou as vezes, nem definida est√° ‚Äì, n√£o d√° para fazer uma opera√ß√£o termo-a-termo.\n\n\n3.1.2 Vetores\nVamos ter que considerar um novo tipo de cole√ß√£o, os vetores!\nA palavra vetor tem v√°rias defini√ß√µes diferentes, nesta aula, em termos simplistas (!!), pensem em um vetor como uma cole√ß√£o homog√™nea de dados.\nNote que, para ser homog√™nea, todos os elementos devem ser do mesmo tipo. Tendo essa restri√ß√£o, conseguimos aplicar opera√ß√µes vetorizadas, termo-a-termo, muito mais r√°pidas que usando um loop/comprehension.\nNote que vetores n√£o podem conter vetores (pois estes tem o tipo ‚Äúarray‚Äù). Ainda assim, vetores podem ser multi-dimensionais. Pense que s√£o cole√ß√µes meramente organizadas em linhas/colunas.\nVamos adquirir o conhecimento aplicado sobre vetores em breve.\n\n3.1.2.1 Exemplos\nVeja exemplos abaixo, e se poder√£o ou n√£o ser entendidos como arrays:\n\n[1] poder√°.\n[1, 2] poder√°.\n[1, \"a\"] n√£o poder√°, tem elementos de tipos diferentes.\n[1, [1, 2]] n√£o poder√°, tem elementos de tipos diferentes (inteiro e uma cole√ß√£o).\n\nAlguns exemplos mais complexos:\n\n[[1, 2], [3, 4]] poder√°! Arrays podem ‚Äúconter si mesmos‚Äù, mas, especialmente, entenda isso como arrays podem ser ‚Äúorganizados em m√∫ltiplas dimens√µes‚Äù. No caso, seria um array bidimensional, uma matriz com linhas e colunas.\n[[1, 2], [3, 4, 5]] n√£o poder√°! Essa √© outra novidade, os arrays devem ser ‚Äúretangulares‚Äù, dentro de cada dimens√£o, todos os elementos devem ter o memso tamanho. Isso ficar√° mais claro a diante.\nE [[1, 2], [3, \"a\"]]? N√£o poder√°. Tudo dentro de um array tem que ter o mesmo tipo. Tamb√©m podemos pensar que, dentro de uma dimens√£o, tudo deve poder ser entendida como um array.\n\nOk, ent√£o, um array √© um caso espec√≠fico de uma lista, √© uma lista com duas restri√ß√µes:\n\nTodos os elementos devem ter o mesmo ‚Äútipo‚Äù.\nDeve ser retangulares.\n\n\n\n3.1.2.2 Utilidade dos Vetores\nPorque isso √© √∫til? O que ganhamos com essa perda de generaliza√ß√£o?\nNa vida real, muitas vezes nos deparamos com esse tipo de dado. Em bases de dado, normalmente cada coluna √© uma vari√°vel, uma cole√ß√£o de valores de um mesmo tipo. Al√©m disso, s√£o incont√°veis os lugares onde matrizes aparecem, e n√£o apenas as bidimensionais.\nCriar um framework que seja especializado nesses casos gera tr√™s benef√≠cios principais:\n\nO cl√°ssico trade-off especializa√ß√£o-qualifica√ß√£o, o numpy √© muito eficiente em realizar opera√ß√µes com esse tipo de dado. E o essa √© uma das maiores propagandas que o numpy faz.\n\nInclusive, por tr√°s dos panos, a n√≠vel t√©cnico, arrays s√£o objetos bem diferentes de listas.\n\nA cria√ß√£o de ferramentas especialmente intuitivas e √∫teis para o contexto.\nFacilita√ß√£o do escopo, fica muito mais simples e intuitivo elencar as ferramentas que queremos ter para trabalhar.\n\nPense em como buscar as ferramentas relevantes para limpar uma base de dados, na documenta√ß√£o dos m√©todos de listas e bibliotecas math, stat, etc. Versus buscar as ferramentas na documenta√ß√£o do numpy.\n\n\n\n\n\n3.1.3 Dataframes\nCom o conhecimento de o que s√£o vetores, fica f√°cil de pensar que √© muito comum que o nosso dado de interesse seja um conjunto de vetores.\nA palavra dataframe tem v√°rias defini√ß√µes diferentes, nesta aula, em termos simplistas (!!), ela significa uma cole√ß√£o de vetores (todos do mesmo tamanho).\nVamos adquirir o conhecimento aplicado sobre dataframes em breve.",
    "crumbs": [
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Introdu√ß√£o ao Python III</span>"
    ]
  },
  {
    "objectID": "aula3-python3.html#numpy",
    "href": "aula3-python3.html#numpy",
    "title": "3¬† Introdu√ß√£o ao Python III",
    "section": "3.2 Numpy",
    "text": "3.2 Numpy\nAdicionar/Editar: Texto (enxuto, objetivo) sobre caracter√≠sticas b√°sicas do Numpy\nAdicionar/Editar: Existem muuuitas fun√ß√µes do Numpy. O material da aula passada est√° bom, mas organizar as fun√ß√µes nos \"tipos de opera√ß√£o\" (a estrutura abaixo) facilitar√° o aprendizado\nAdicionar/Editar: tem que checar na documenta√ß√£o do numpy se n√£o h√° outras fun√ß√µes/m√©todos importantes, que queremos falar sobre. Com certeza, tem fun√ß√µes que mereceriam estar pelo menos linkadas aqui\nO que √© Numpy? De acordo com o site oficial:\n\nNumPy is the fundamental package for scientific computing in Python. It is a Python library that provides a multidimensional array object, various derived objects (such as masked arrays and matrices), and an assortment of routines for fast operations on arrays, including mathematical, logical, shape manipulation, sorting, selecting, I/O, discrete Fourier transforms, basic linear algebra, basic statistical operations, random simulation and much more.\n\nAntes de tudo, vamos instalar e carregar a biblioteca:\n\nimport numpy as np\n\nObs: exemplo de efici√™ncia de opera√ß√µes vetorizadas no Numpy:\n\nn = 1000000\na1 = np.arange(n)\nl1 = list(range(n))\n%timeit a1 * 2\n%timeit [x * 2 for x in l1]\n\n1.89 ms ¬± 139 ¬µs per loop (mean ¬± std. dev. of 7 runs, 1,000 loops each)\n78.9 ms ¬± 1.25 ms per loop (mean ¬± std. dev. of 7 runs, 10 loops each)\n\n\n\n3.2.1 Cria√ß√£o e Caracter√≠sticas\nVamos come√ßar vendo a ‚Äúcara‚Äù dos arrays:\n\na1 = np.array([1, 1, 1])\na2 = np.array([[1, 0, 1], [3, 4, 1]])\na3 = np.array([[[1, 7, 9], [5, 9, 3]], [[3,2,1], [4,5,6]]])\nfor a in [a1, a2, a3]: print(a, \"\\n\")\n\n[1 1 1] \n\n[[1 0 1]\n [3 4 1]] \n\n[[[1 7 9]\n  [5 9 3]]\n\n [[3 2 1]\n  [4 5 6]]] \n\n\n\nAdicionar/Editar: salvar na pasta assets/img e colocar aqui na sintaxe de markdown\n\nNote que come√ßamos a ‚Äúcontar‚Äù pelo vetor, depois pelas linhas, depois pelas matrizes, etc.\nExistem v√°rias maneiras de criar vetores. List√°-los seria muita decoreba, ent√£o veja-as em Extras.\n\n3.2.1.1 Caracter√≠sticas\nAdicionar/Editar: range, shape, type(), dtype\nAdicionar/Editar: .copy (ver se√ß√£o \"Vari√°veis, Novamente\" da aula passada!) .tolist\n\n\n\n3.2.2 Tipos de arrays\nMais cedo, falamos que todos os elementos de um arrays tem sempre o mesmo ‚Äútipo‚Äù. Em termos simplificados, o nome normalmente associado √† ‚Äútipo‚Äù √© dtype.\nUm elemento (um ‚Äúescalar‚Äù) pode ter v√°rios tipos, mas os mais comuns s√£o:\n\nint_: n√∫meros inteiros (integer).\nfloat_: n√∫meros de ponto flutuante (floating-point). O tipo padr√£o.\nbool_: valores booleanos (True ou False).\nstr_: strings de texto.\nE outros menos utilizados: complex_: n√∫meros complexos, object_: objetos Python gen√©ricos, datetime64: datas e hor√°rios, timedelta64: diferen√ßas entre datas e hor√°rios, category: categorias ou r√≥tulos.\n\nVeja alguns coment√°rios t√©cnicos na se√ß√£o Mais Sobre Tipos.\n\n3.2.2.1 Coer√ß√£o de Tipos\nMas e se eu tentar criar o array [1, \"a\"]? O numpy usa coer√ß√£o, ele converte todos os elementos a um mesmo tipo, de acordo com uma lista de prioridade. De maneira simples, int ‚Üí float ‚Üí string. Voc√™ tamb√©m pode converter um array para outro tipo usando o m√©todo x.astype(). Veja exemplos abaixo.\n\nprint(np.array([[1,2], [3.0, 4]]), \"\\n\")\nprint(np.array([[1,2], [3.0, \"4.0\"]]), \"\\n\")\nprint(np.array([[1,2], [3, 4]], dtype = np.complex_), \"\\n\")\nprint(np.array([[1,2], [3, 4]]).astype(str), \"\\n\")\n\n[[1. 2.]\n [3. 4.]] \n\n[['1' '2']\n ['3.0' '4.0']] \n\n[[1.+0.j 2.+0.j]\n [3.+0.j 4.+0.j]] \n\n[['1' '2']\n ['3' '4']] \n\n\n\n\n\n3.2.2.2 Mais Informa√ß√µes\nPara mais informa√ß√µes sobre arrays, como funcionam, como s√£o salvos na mem√≥ria, veja API Ref. ‚Üí Array objects. Cuidado, muitos temas t√©cnicos e desnecess√°rios (para o momento).\nEspecialmente, foram ignorados dois t√≥picos de arrays:\n\nOs masked arrays, arrays com valores faltantes, API Ref. ‚Üí Array objects ‚Üí Masked arrays.\nE os datetime arrays, arrays de datas, API Ref. ‚Üí Array objects ‚Üí Datetimes and Timedeltas.\n\n\n\n\n3.2.3 Opera√ß√µes Vetorizadas\nLembre-se que o ponto mais importante √© a vetoriza√ß√£o. O numpy define ‚Äúfun√ß√µes universais‚Äù, fun√ß√µes que podem ser aplicadas de forma vetorizadas.\nListar as fun√ß√µes seria muita decoreba, veja-as em Extras. Abaixo, explicamos algumas das mais √∫teis.\nAdicionar/Editar: Selecinar as que achar mais √∫teis e explic√°-las BREVEMENTE\n\n\n3.2.4 Subset\nA refer√™ncia b√°sica est√° em User guide ‚Üí Indexing on ndarrays.\nA indexa√ß√£o de arrays √© feita de forma similar √† listas, com a1[algo]. A maioria das t√©cnicas dispon√≠veis para listas est√° dispon√≠vel aqui tamb√©m.\nEssa parte √© bem √∫til, porque l√≥gicas similares de indexa√ß√£o podem ser utilizadas no pandas e em listas.\n\n3.2.4.1 Subseting B√°sico\nCom uma dimens√£o, √© simples. Conseguimos utilizar a t√©cnica de indexes negativos.\n\nimport numpy as np\na1 = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])\nprint(a1, \"\\n\")\n\nprint(a1[0])\nprint(a1[-1])\n\n[1 2 3 4 5 6 7 8 9] \n\n1\n9\n\n\nE com duas dimens√µes? Agora, temos que informar o que queremos pegar de cada dimens√£o, a2[algo1, algo2]:\n\na2 = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nprint(a2, \"\\n\")\n\nprint(a2[0, 1])\n\n[[1 2 3]\n [4 5 6]\n [7 8 9]] \n\n2\n\n\nE se eu quiser selecionar mais do que um elemento? Aqui, tamb√©m √© poss√≠vel utilizar a t√©cnica de slicing :.\n\nprint(a1[1:3])\nprint(a1[1:])\nprint(a1[:2])\nprint(a1[:])\n\n[2 3]\n[2 3 4 5 6 7 8 9]\n[1 2]\n[1 2 3 4 5 6 7 8 9]\n\n\nCom duas dimens√µes √© a mesma ideia, lembrando que precisamos falar o que queremos pegar de ambas as dimens√µes, as possibilidades aumentam.\n\nprint(a2[0, 0:2])\nprint(a2[0:2, 1])\nprint(a2[1:, :])\n\n[1 2]\n[2 5]\n[[4 5 6]\n [7 8 9]]\n\n\nCom n dimens√µes √© a mesma ideia, com uma entrada em [] para cada dimens√£o.\nSe tiver curiosidade, veja dois truques usando ... e None nos √≠ndices aqui.\n\nimport numpy as np\na3 = np.arange(3**3).reshape(3, 3, 3)\n\nprint(a3[2, 2, 0])\nprint(a3[0, :, :])\n\n24\n[[0 1 2]\n [3 4 5]\n [6 7 8]]\n\n\nQuando voc√™ ficar pica, vai descobrir que d√° para omitir dimens√µes, como abaixo. Mas por enquanto, n√£o inventa, coloque um ‚Äúalgo‚Äù para cada dimens√£o, nem que o ‚Äúalgo‚Äù seja ‚Äúselecione tudo‚Äù (:).\n\nprint(a3[0:])\n\n[[[ 0  1  2]\n  [ 3  4  5]\n  [ 6  7  8]]\n\n [[ 9 10 11]\n  [12 13 14]\n  [15 16 17]]\n\n [[18 19 20]\n  [21 22 23]\n  [24 25 26]]]\n\n\nNote que essa no√ß√£o do subset deixa claro qual √© a ‚Äúordem‚Äù dos componentes de um array multidimensional. Isto √©, quando pedimos for i in a3, o que ser√° passado para i? Cada elemento? Cada coluna, cada linha? cada matriz?\n\nfor mat in a3:\n    for row in mat:\n        for item in row: print(item, end = \" \")\n\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 \n\n\nVemos que, do array tridimensional a3, i s√£o as sub-matrizes, j s√£o as linhas de uma sub-matriz, e i os elementos de cada linha. Isto √©, a ordem √© da maior/√∫ltima/mais alta dimens√£o para a menor/mais baixa.\n\n\n3.2.4.2 Filter\nE se os √≠ndices que voc√™ quer obter est√£o em uma cole√ß√£o? Podemos utilizar cole√ß√µes de inteiros ou booleanos para acessar √≠ndices tamb√©m!\n\nprint(a1[np.array([1, 2])]) #a1[[1, 2]]\nprint(a1[np.array([True, False, False, True, False, False, False, True, False])])\n\n[2 3]\n[1 4 8]\n\n\nNote que para booleanos, o √≠ndice-cole√ß√£o precisa ser do mesmo tamanho da dimens√£o relevante.\nO legal, √© que da para utilizar isso para criar filtros:\n\nprint(a1[a1 + 1 &gt; 2])\n\n[2 3 4 5 6 7 8 9]\n\n\nExistem muitas outras t√©cnicas utilizando essas ferramentas. Veja mais aqui.\nFalamos apenas sobre um tipo de opera√ß√£o, ‚Äúsubset‚Äù. Exitem v√°rios outros que valem a pena saber, veja mais em Extras.\n\n\n\n3.2.5 Repeated Operations\nAdicionar/Editar: np.where, for loops, fazer refer√™ncia √†s fun√ß√µes universais, mais alguma coisa?\nFim!\nPronto! Voc√™s aprenderam o b√°sico de numpy! Agora, podemos aplicar esse novo jeito de pensar para bases de dados, e conhecer a biblioteca especializada nisso, o pandas. Especialmente, relembre do que aprendemos, sobre a maneira de se pensar em dados vetorizados.\nLembre de ver os temas extras depois.\nAdicionar/Editar: Escolha uma frase remetendo pausa e tire print de alguma arte dela em https://patorjk.com/software/taag/. Exemplo:\n\n\n\n\nüòé",
    "crumbs": [
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Introdu√ß√£o ao Python III</span>"
    ]
  },
  {
    "objectID": "aula3-python3.html#pandas",
    "href": "aula3-python3.html#pandas",
    "title": "3¬† Introdu√ß√£o ao Python III",
    "section": "3.3 Pandas",
    "text": "3.3 Pandas\nAdicionar/Editar: Texto (enxuto, objetivo) sobre caracter√≠sticas b√°sicas do Pandas. O texto da aula antiga est√° grande demais\nAdicionar/Editar: Existem muuuitas fun√ß√µes do Pandas. O material da aula passada est√° bom, mas organizar as fun√ß√µes nos \"tipos de opera√ß√£o\" (a estrutura abaixo) facilitar√° o aprendizado\nAdicionar/Editar: tem que checar na documenta√ß√£o do pandas se n√£o h√° outras fun√ß√µes/m√©todos importantes, que queremos falar sobre. Com certeza, tem fun√ß√µes que mereceriam estar pelo menos linkadas aqui\n\nimport pandas as pd\n\n\n3.3.1 Cria√ß√£o e Caracter√≠sticas\nAntes de falar sobre dataframes, o Pandas tem seu pr√≥prio objeto de vetor (porque sim), o pd.Series, mas √© bem parecido com um np.array de uma dimens√£o.\n\nprint(pd.Series([4, 7, -5, 3]))\nprint(pd.Series([4, 7, -5, 3], index=[\"d\", \"b\", \"a\", \"c\"]))\n\n0    4\n1    7\n2   -5\n3    3\ndtype: int64\nd    4\nb    7\na   -5\nc    3\ndtype: int64\n\n\nAdicionar/Editar: cria√ß√£o de dataframes falar dos v√°rios m√©todos (e qual √© mais √∫til), com base em dicion√°rios, em arrays/listas, em arquivos (criar um aquivo de exemplo em assets/materials)\nAdicionar/Editar: caracter√≠sticas: shape, types, info, head, tail, dtypes, shape\nAdicionar/Editar: .copy() ver aula passada!\n\n\n3.3.2 Subset\n\n3.3.2.1 De Colunas\nAdicionar/Editar: .columns, ['key'], .key, [[key1, key2]]\n\n\n3.3.2.2 De Linhas\nAdicionar/Editar: head, tail, sample,\nAdicionar/Editar: [filtro] e .query\n\n\n3.3.2.3 Ambos Juntos\nAdicionar/Editar: loc, iloc\nAdicionar/Editar: apenas fazer referencia (linkar) sobre it e iat\n\n\n\n3.3.3 Operate/Create\nAdicionar/Editar: criar/deletar/alterar colunas\nAdicionar/Editar: criar/deletar/alterar linhas\nAdicionar/Editar: apenas fazer referencia sobre criar/deletar/alterar c√©lulas\nAdicionar/Editar: lidar com dados NA\n\n\n3.3.4 Reorder\nAdicionar/Editar: mais algo?\nLinhas:\ndf1.sort_values(by='cases', ascending=False)\nColunas:\ndf1.reindex(columns=['year', 'cases', 'population', 'country'])\n\n\n3.3.5 Rename\nLinhas:\ndf1.rename({0: 'Row1', 1: 'Row2', 2: 'Row3', 3: 'Row4', 4: 'Row5', 5: 'Row6'})\nColunas:\ndf1.rename(columns={'cases': 'new_cases', 'population': 'new_population'}, inplace=False)\nAssim como na parte de Numpy, alguns tipos de opera√ß√µes mais avan√ßados n√£o foram tratados aqui. Veja-os em Extras. Parte deles ser√£o tratados nas pr√≥ximas aulas.\n\n\n3.3.6 Repeated Operations",
    "crumbs": [
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Introdu√ß√£o ao Python III</span>"
    ]
  },
  {
    "objectID": "aula3-python3.html#recapitulando",
    "href": "aula3-python3.html#recapitulando",
    "title": "3¬† Introdu√ß√£o ao Python III",
    "section": "Recapitulando",
    "text": "Recapitulando\nAdicionar/Editar: Adicionar texto de recapitulando. Em par√°grafos, primeiro sobre os principais objetivos de aprendizagem, depois sobre os conceitos te√≥ricos aprendidos, e por fim, dos conceitos \"decoreba\" aprendidos",
    "crumbs": [
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Introdu√ß√£o ao Python III</span>"
    ]
  },
  {
    "objectID": "aula3-python3.html#extras",
    "href": "aula3-python3.html#extras",
    "title": "3¬† Introdu√ß√£o ao Python III",
    "section": "3.4 Extras",
    "text": "3.4 Extras\n\n3.4.1 Numpy: Cria√ß√£o de Vetores\n\n3.4.1.1 Vetores Placeholder\nTamb√©m podemos criar arrays com valores comuns, temos v√°rias fun√ß√µes, como:\n\nnumpy.empty: cria um array vazio com a forma especificada.\nnumpy.ones: cria um array preenchido com uns.\nnumpy.zeros: cria um array preenchido com zeros.\nnumpy.full: cria um array preenchido com um valor constante.\nnumpy.eye: cria uma matriz identidade.\nnumpy.linspace: cria um array com valores espa√ßados uniformemente dentro de um intervalo.\nnumpy.arange: cria um array com valores espa√ßados uniformemente dentro de um intervalo especificado.\n\n\nprint(\"Empty: \\n\", np.empty((2, 3)), \"\\n\")\nprint(\"Ones: \\n\", np.ones((2, 3)), \"\\n\")\nprint(\"Zeros: \\n\", np.zeros((2, 3)), \"\\n\")\nprint(\"Full: \\n\", np.full((2, 3), 5), \"\\n\")\nprint(\"Eye: \\n\", np.eye(3), \"\\n\")\nprint(\"Linspace: \\n\", np.linspace(0, 10, num=5), \"\\n\")\nprint(\"Arange: \\n\", np.arange(0, 10, 2), \"\\n\")\n\nEmpty: \n [[1.48539705e-313 1.06099790e-313 6.36598738e-314]\n [4.24399158e-314 8.48798316e-314 1.27319747e-313]] \n\nOnes: \n [[1. 1. 1.]\n [1. 1. 1.]] \n\nZeros: \n [[0. 0. 0.]\n [0. 0. 0.]] \n\nFull: \n [[5 5 5]\n [5 5 5]] \n\nEye: \n [[1. 0. 0.]\n [0. 1. 0.]\n [0. 0. 1.]] \n\nLinspace: \n [ 0.   2.5  5.   7.5 10. ] \n\nArange: \n [0 2 4 6 8] \n\n\n\n\n\n3.4.1.2 Vetores Aleat√≥rios\nO numpy tem uma parte da biblioteca focada na gera√ß√£o de n√∫meros aleat√≥rios, numpy.random. Se tiver curiosidade, leia mais sobre como computadores geram n√∫meros pseudo-aleat√≥rios.\nTodas as distribui√ß√µes que voc√™ pensar podem ser geradas pelo numpy:\n\nUniforme: numpy.random.uniform.\n\nUniforme 0-1: numpy.random.random.\nUniforme discreta A-B: numpy.random.integers.\n\nBinomial: numpy.random.binomial.\nNormal: numpy.random.normal.\nPoisson: numpy.random.poisson.\nSamplear um array: numpy.random.choice.\n\n\n\n3.4.1.3 Vetores Importados\nPodemos salvar arrays em arquivos, usando fun√ß√µes como:\n\nnumpy.save: salva como um ‚Äúarquivo array‚Äù ‚Äú.npy‚Äù.\nnumpy.savetxt: salva como um arquivo CSV, adequado apenas para arrays 1D e 2D.\nA biblioteca pickle: uma bilbioteca que consegue ‚Äúconservar‚Äù qualquer objeto do python, mas pode ser demorado.\n\nSimilarmente, podemos importar arquivos, com fun√ß√µes numpy.load e numpy.loadtxt.\nPor fim, √© comum converter outros objetos em arrays. Veja as fun√ß√µes numpy.asarray e pandas.Series.to_numpy.\nAdicionar/Editar: √â esse tipo de coment√°rio com refer√™ncias para mais conte√∫do que deve ser criado com mais frequ√™ncia, e nas outras aulas!!\nPara mais informa√ß√£o sobre cria√ß√£o de arrays, veja API Ref. ‚Üí Routines ‚Üí Array creation:\n\nCriando por forma e valor.\nCriando por dados, e API Ref. ‚Üí Routines ‚Üí I/O.\nCriando por ranges.\nCriando matrizes.\n\n\n\n\n3.4.2 Numpy: Mais Sobre Tipos\nNa realidade, embora exista o conceito de ‚Äún√∫mero inteiro‚Äù, e o Python s√≥ defina um tipo de dado integer, existem muitas maneiras de representar um n√∫mero na mem√≥ria do computador. O numpy se importa com isso, e existem v√°rios tipos para cada um dos conceitos acima.\n\nPor conta disso, o dtype pode aparecer com nomes diferentes como int64.\nSe voc√™ for muito nerd, talvez isso importe para o seu projeto. Para escolher um tipo espec√≠fico use a fun√ß√£o np.array com o argumento dtype = .... Leia mais sobre isso aqui.\nO tipo de um array x pode ser descoberto com x.dtype e x.dtype.name.\n\n\n\n3.4.3 Numpy: Opera√ß√µes Vetorizadas\n\n3.4.3.1 Opera√ß√µes Aritm√©ticas\nAdicionar/Editar: falar sobre min/max, +*-/, mean/median/var/std, sum/prod, cumsum/cumprod, argmax/argmin, round\nVeja mais em API Ref. ‚Üí Routines ‚Üí Mathematical functions.\n\na1, a2 = np.array([1,2,3]), np.array([4,5,6])\n\nprint(np.subtract(a1, a2), \"\\n\") #a1 + a2\nprint(np.divide(a1, a2), \"\\n\") #a1 * a2\nprint(np.exp(a1), \"\\n\")\nprint(np.sqrt(a1), \"\\n\")\nprint(np.sin(a1), \"\\n\")\nprint(np.log(a1), \"\\n\")\n\n[-3 -3 -3] \n\n[0.25 0.4  0.5 ] \n\n[ 2.71828183  7.3890561  20.08553692] \n\n[1.         1.41421356 1.73205081] \n\n[0.84147098 0.90929743 0.14112001] \n\n[0.         0.69314718 1.09861229] \n\n\n\nTamb√©m considere as constantes abaixo. Mais informa√ß√µes em API Ref. ‚Üí Constants.\n\nnp.pi, np.e, np.nan, np.inf\n\n(3.141592653589793, 2.718281828459045, nan, inf)\n\n\n\n\n3.4.3.2 Opera√ß√µes Matriciais\nVeja mais em API Ref. ‚Üí Routines ‚Üí Linear algebra.\n\na1, a2 = np.array([(1,2), (-1,-3)]), np.array([(4,5), (-4,-6)]) # Note o uso, indiferenci√°vel, de tuplas\n\nprint(a1 * a2, \"\\n\")\nprint(np.dot(a1, a2), \"\\n\") #a1 @ a2 (produto escalar)\nprint(np.linalg.matrix_power(a1, 3), \"\\n\") #(pot√™ncia de matriz)\nprint(np.linalg.det(a1), \"\\n\") #(determinante)\nprint(np.linalg.inv(a1), \"\\n\") #(matriz inversa)\nprint(np.linalg.norm(a1), \"\\n\") #(norma)\nprint(np.linalg.eig(a1), \"\\n\") #(autovalores e autovertores)\n\n[[ 4 10]\n [ 4 18]] \n\n[[-4 -7]\n [ 8 13]] \n\n[[  3  10]\n [ -5 -17]] \n\n-1.0 \n\n[[ 3.  2.]\n [-1. -1.]] \n\n3.872983346207417 \n\nEigResult(eigenvalues=array([ 0.41421356, -2.41421356]), eigenvectors=array([[ 0.95968298, -0.50544947],\n       [-0.28108464,  0.86285621]])) \n\n\n\n\n\n3.4.3.3 Opera√ß√µes com Strings\nVeja mais em API Ref. ‚Üí Routines ‚Üí String operations.\n\na1, a2 = np.array(['ol√°', 'oi', 'oopa']), np.array([', tudo bem?', ', bem?', ', b√£o?'])\n\nprint(np.char.add(a1, a2), \"\\n\")\nprint(np.char.multiply(a1, [3, 1, 2]), \"\\n\")\nprint(np.char.capitalize(a1), \"\\n\")\nprint(np.char.count(a1, 'o'), \"\\n\")\nprint(np.char.find(a1, 'o'), \"\\n\")\n\n['ol√°, tudo bem?' 'oi, bem?' 'oopa, b√£o?'] \n\n['ol√°ol√°ol√°' 'oi' 'oopaoopa'] \n\n['Ol√°' 'Oi' 'Oopa'] \n\n[1 1 2] \n\n[0 0 0] \n\n\n\n\n\n3.4.3.4 Opera√ß√µes L√≥gicas/de Compara√ß√£o\nVeja mais em API Ref. ‚Üí Routines ‚Üí Logic functions. Tamb√©m veja opera√ß√µes de sets em API Ref. ‚Üí Routines ‚Üí Set functions.\n\na1, a2 = np.array([(1,2), (-1,-3)]), np.array([(4,5), (-4,-6)])\n\nprint(np.greater(a1, a2), \"\\n\") #a1 &gt; a2\nprint((a1 == a2).any(), \"\\n\") #note the usage of ()\nprint(np.logical_or(a1 &gt; 1, a2 &lt; 0), \"\\n\") #a1 &gt; 1 or a2 &lt; 0\n\n[[False False]\n [ True  True]] \n\nFalse \n\n[[False  True]\n [ True  True]] \n\n\n\n\n\n3.4.3.5 Opera√ß√µes Estat√≠sticas\nVeja mais em API Ref. ‚Üí Routines ‚Üí Statistics.\n\na1 = np.random.normal(0, 1, 100000)\na2 = a1 + np.random.normal(0, 0.5, 100000)\n\nprint(np.mean(a1), \"\\n\")\nprint(np.median(a1), \"\\n\")\nprint(np.std(a1), \"\\n\")\nprint(np.quantile(a1, 0.25), \"\\n\")\nprint(np.corrcoef(a1, a2), \"\\n\")\n\n0.0014274762281511 \n\n0.0025126008047063083 \n\n0.9979381079716622 \n\n-0.6661109489960002 \n\n[[1.         0.89446592]\n [0.89446592 1.        ]] \n\n\n\n\n\n\n3.4.4 Numpy: Outros Tipos de Opera√ß√µes\n\n3.4.4.1 Operate/Create\nVeja os fun√ß√µes:\n\nappend(), insert(), e delete().\n\nAdicionar/Editar: criar/deletar/alterar elementos (faltam fun√ß√µes abaixo)\n\n\n3.4.4.2 Reorder\nAdicionar/Editar: .arrange, .sort, .argsort\n\n\n3.4.4.3 Reshape\nVeja as fun√ß√µes/m√©todos:\n\n.resize() e reshape(): para alterar a forma de um array, passando a nova forma como uma tupla.\ntranspose(): transpor arrays.\n.flatten() e .ravel(): achatar arrays.\n\n\n\n3.4.4.4 Combine, Separate e Unite\nVeja as fun√ß√µes:\n\nconcatenate().\nvstack(), e hstack().\n\nEm oposi√ß√£o, podemos dividir arrays:\n\n.hsplit() e .vsplit().\n\n\n\n\n3.4.5 Numpy: Fun√ß√µes Universais\nExiste um √∫ltimo t√≥pico interessante, mas mais avan√ßado. As fun√ß√µes do numpy s√£o bem poderosas e flex√≠veis. √â poss√≠vel:\n\nAplic√°-las para cada dimens√£o separadamente ‚Äì usando o argumento axis=.\nFiltrar dimens√µes para n√£o aplicar ‚Äì usando o argumento where=\nAplicar de modo a ‚Äúacumular‚Äù ou ‚Äúreduzir‚Äù o resultado ‚Äì usando os m√©todos .accumulate() e .reduce().\n\nAprendam sobre esses t√≥picos em Api Ref. ‚≠¢ Universal functions. Adicionalmente, Tamb√©m vejam algumas t√°ticas avan√ßadas em Api Ref. ‚≠¢ Routines ‚≠¢ Functional programming.\nAbaixo apresento alguns exemplos sem contexto nenhum.\n\na1 = np.array([1,2,3])\n\nnp.add.accumulate(a1)\nnp.add.reduce(a1)\n\n6\n\n\n\na2 = np.array([[1,2], [4,5]])\n\nprint(np.add.accumulate(a2, axis = 0))\nprint(np.add.reduce(a2, axis = 0))\n\n[[1 2]\n [5 7]]\n[5 7]\n\n\n\nwhere1 = [True, True, False]\nwhere2 = [[True, False], [False, True]]\n\nprint(np.add.reduce(a1, 0, where = where1), \"\\n\")\nprint(np.add.reduce(a2, 0, where = where2), \"\\n\")\n\n3 \n\n[1 5] \n\n\n\n\n\n3.4.6 Pandas: Outros Tipos de Opera√ß√µes\n\n# Alguns exemplos:\n\ntables_links = {\n    'df1': 'https://raw.githubusercontent.com/tidyverse/tidyr/c6c126a61f67a10b5ab9ce6bb1d9dbbb7a380bbd/data-raw/table1.csv',\n    'df2': 'https://raw.githubusercontent.com/tidyverse/tidyr/c6c126a61f67a10b5ab9ce6bb1d9dbbb7a380bbd/data-raw/table2.csv',\n    'df3': 'https://raw.githubusercontent.com/tidyverse/tidyr/c6c126a61f67a10b5ab9ce6bb1d9dbbb7a380bbd/data-raw/table3.csv',\n    'df4a': 'https://raw.githubusercontent.com/tidyverse/tidyr/c6c126a61f67a10b5ab9ce6bb1d9dbbb7a380bbd/data-raw/table4a.csv',\n    'df4b': 'https://raw.githubusercontent.com/tidyverse/tidyr/c6c126a61f67a10b5ab9ce6bb1d9dbbb7a380bbd/data-raw/table4b.csv',\n    'df5': 'https://raw.githubusercontent.com/tidyverse/tidyr/c6c126a61f67a10b5ab9ce6bb1d9dbbb7a380bbd/data-raw/table6.csv'\n}\n\nfor i in tables_links.keys():\n    globals()[i] = pd.read_csv(tables_links[i])\n\n\n3.4.6.1 Reshape\nAdicionar/Editar: Mais informa√ß√µa\nWide to long (melt):\n\nprint(df4a)\npd.melt(df4a, id_vars = [\"country\"], var_name = \"year\", value_name = \"cases\")\n\n       country    1999    2000\n0  Afghanistan     745    2666\n1       Brazil   37737   80488\n2        China  212258  213766\n\n\n\n\n\n\n\n\n\ncountry\nyear\ncases\n\n\n\n\n0\nAfghanistan\n1999\n745\n\n\n1\nBrazil\n1999\n37737\n\n\n2\nChina\n1999\n212258\n\n\n3\nAfghanistan\n2000\n2666\n\n\n4\nBrazil\n2000\n80488\n\n\n5\nChina\n2000\n213766\n\n\n\n\n\n\n\nLong to wide (pivot)\n\nprint(df2)\npd.pivot(df2, index = [\"country\", \"year\"], columns = \"type\", values = \"count\")\n\n        country  year        type       count\n0   Afghanistan  1999       cases         745\n1   Afghanistan  1999  population    19987071\n2   Afghanistan  2000       cases        2666\n3   Afghanistan  2000  population    20595360\n4        Brazil  1999       cases       37737\n5        Brazil  1999  population   172006362\n6        Brazil  2000       cases       80488\n7        Brazil  2000  population   174504898\n8         China  1999       cases      212258\n9         China  1999  population  1272915272\n10        China  2000       cases      213766\n11        China  2000  population  1280428583\n\n\n\n\n\n\n\n\n\ntype\ncases\npopulation\n\n\ncountry\nyear\n\n\n\n\n\n\nAfghanistan\n1999\n745\n19987071\n\n\n2000\n2666\n20595360\n\n\nBrazil\n1999\n37737\n172006362\n\n\n2000\n80488\n174504898\n\n\nChina\n1999\n212258\n1272915272\n\n\n2000\n213766\n1280428583\n\n\n\n\n\n\n\n\n\n3.4.6.2 Separate e Unite\nSeparar:\n\nprint(df3, \"\\n\")\n\ndf3[[\"cases\", \"population\"]] = df3[\"rate\"].str.split(\"/\", expand = True)\ndf3 = df3.drop(\"rate\", axis = 1)\nprint(df3)\n\n       country  year               rate\n0  Afghanistan  1999       745/19987071\n1  Afghanistan  2000      2666/20595360\n2       Brazil  1999    37737/172006362\n3       Brazil  2000    80488/174504898\n4        China  1999  212258/1272915272\n5        China  2000  213766/1280428583 \n\n       country  year   cases  population\n0  Afghanistan  1999     745    19987071\n1  Afghanistan  2000    2666    20595360\n2       Brazil  1999   37737   172006362\n3       Brazil  2000   80488   174504898\n4        China  1999  212258  1272915272\n5        China  2000  213766  1280428583\n\n\nUnir:\n\nprint(df5, \"\\n\")\n\ndf5[\"year\"] = df5[\"century\"] + df5[\"year\"]\ndf5 = df5.drop(\"century\", axis = 1)\nprint(df5)\n\n       country  century  year               rate\n0  Afghanistan       19    99       745/19987071\n1  Afghanistan       20     0      2666/20595360\n2       Brazil       19    99    37737/172006362\n3       Brazil       20     0    80488/174504898\n4        China       19    99  212258/1272915272\n5        China       20     0  213766/1280428583 \n\n       country  year               rate\n0  Afghanistan   118       745/19987071\n1  Afghanistan    20      2666/20595360\n2       Brazil   118    37737/172006362\n3       Brazil    20    80488/174504898\n4        China   118  212258/1272915272\n5        China    20  213766/1280428583\n\n\n\n\n3.4.6.3 Combine\nAdicionar/Editar: Mais explica√ß√£o. explicar os tipos de merge (left, inner, outer)\nVeja a fun√ß√£o: - .concat()\nVeja as fun√ß√µes abaixo para unir dataframes de maneiras diferentes:\nStandard Joins:\n\n.merge()\n\nFiltering Joints:\n\n.isin()\n\n\n\n3.4.6.4 Aggregate",
    "crumbs": [
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Introdu√ß√£o ao Python III</span>"
    ]
  },
  {
    "objectID": "aula4-cd-manipulacao.html",
    "href": "aula4-cd-manipulacao.html",
    "title": "4¬† CD: Manipula√ß√£o",
    "section": "",
    "text": "5 Introdu√ß√£o\nAdicionar/Editar: Motiva√ß√£o da aula\nAdicionar/Editar: TOC dos temas da aula (pra ajudar os alunos a se acharem na aula)\nAdicionar/Editar: Texto (enxuto, objetivo) com os objetivos de aprendizagem principais (o que, principalmente, os alunos tem que sair dessa aula sabendo)\nAdicionar/Editar: Ao longo da aula: adicionar mais refer√™ncias, especialmente sobre onde expandir os conhecimentos sobre cada tema\nAdicionar/Editar: comentar sobre como agora, vamos aplicar o modo de pensar da aula passada, de saber os \"tipos de opera√ß√µes existentes\", e desenvolver a habilidade de olhar pra um dataset, e saber quais opera√ß√µes aplicar\nEsta aula marca uma divis√£o no curso de trainee. At√© agora, voc√™s estavam aprendendo v√°rias ferramentas √∫teis, mas sem um objetivo espec√≠fico al√©m de simplesmente aprender a programar em Python. Nesta aula, vamos apresentar o objetivo, voc√™s ir√£o aprender a realizar ‚Äúprojetos de Ci√™ncia de Dados‚Äù.",
    "crumbs": [
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>CD: Manipula√ß√£o</span>"
    ]
  },
  {
    "objectID": "aula4-cd-manipulacao.html#ci√™ncia-de-dados",
    "href": "aula4-cd-manipulacao.html#ci√™ncia-de-dados",
    "title": "4¬† CD: Manipula√ß√£o",
    "section": "5.1 Ci√™ncia de Dados",
    "text": "5.1 Ci√™ncia de Dados\n\n5.1.1 A Ci√™ncia de Dados\nA Ci√™ncia de Dados √© um campo gigante, que nasceu via uma demanda de expandir a estat√≠stica para vias de ‚Äúlearn from data‚Äù, ‚Äúmore emphasis on data preparation and presentation rather than statistical modeling‚Äù, e ‚Äúemphasis on prediction rather than inference‚Äù. Atualmente, o termo n√£o √© super bem definido, e o campo tem muita intersec√ß√£o com outras disciplinas.\nDe acordo com a Wikipedia:\n\nData science is an interdisciplinary academic field that uses statistics, scientific computing, scientific methods, processes, algorithms and systems to extract or extrapolate knowledge and insights from data.\n\nFontes: ‚Äú50 Years of Data Science‚Äù (2017) e Wikipedia.\n\n\n5.1.2 As etapas de um projeto\nMais interessante que ficar tentando definir a disciplina, vamos entend√™-la na pr√°tica. Como a aula √© minha, e eu fa√ßo o que eu quiser, vou utilizar a explica√ß√£o do livro ‚ÄúR for Data Science‚Äù.\nUm projeto comum, no geral, se parece como abaixo. Veja uma breve explica√ß√£o de cada t√≥pico.\n\n\n5.1.2.1 Importing\nA primeira etapa √© a importa√ß√£o. Alguns coment√°rios:\n\nOs dados podem vir de v√°rias fontes, como arquivos locais, bancos de dados, APIs (application programming interface), ou de sites (via web scrapping).\nOs dados podem estar em v√°rios formatos como CSV, Excel, JSON, entre outros. √â interessante ter um conhecimento b√°sico de como cada um funciona.\nCada tipo de fonte tem uma maneira diferente de se interagir, e cada formato exige sua pr√≥pria fun√ß√£o. Para os casos mais simples, o pandas (e qualquer outra biblioteca de dataframes), tem fun√ß√µes para I/O.\n\nN√£o vamos entrar em detalhes nesse tema. N√£o √© algo super extenso nem complexo, e existem muitas refer√™ncias online. Uma das mais completas que achei foi esse tutorial da RealPython.\n\n\n5.1.2.2 Tidy\nA pr√≥xima etapa √© arrumar, tidy, os dados. Vamos falar sobre isso com mais detalhe, mas existe uma no√ß√£o bem espec√≠fica do que s√£o dados arrumados, tidy data.\nAs tr√™s pr√≥ximas etapas existem dentro de um ciclo.\n\n\n5.1.2.3 Transform\nMesmo com dados j√° arrumados, ainda temos o interesse de transform√°-los, para conseguir obter insights novos da mesma base de dados. Na aula de hoje, vamos dar alguns exemplos de interesses, e este tema ficar√° mais claro.\nVisualizar e modelar os dados trar√° novos insights e novas demandas, de modo que estamos constantemente transformando os dados para criar novas visualiza√ß√µes e modelagens.\nTidy e transform juntos s√£o chamados de data wrangling.\n\n\n5.1.2.4 Visualize\nAqui, serei pregui√ßoso, o texto do Hadley Wickham √© muito bom:\n\nVisualisation is a fundamentally human activity. A good visualisation will show you things that you did not expect, or raise new questions about the data. A good visualisation might also hint that you‚Äôre asking the wrong question, or you need to collect different data. Visualisations can surprise you, but don‚Äôt scale particularly well because they require a human to interpret them.\n\n\n\n5.1.2.5 Model\nUm modelo √©, em termos simplificados e a depender do contexto, um conjunto de hip√≥teses sobre o mundo ‚Äì sobre o processo gerador dos dados ‚Äì, acrescido com um m√©todo matem√°tico e computacional de estimar esse processo.\n\nModels are a fundamentally mathematical or computational tool, so they generally scale well. (‚Ä¶) But every model makes assumptions, and by its very nature a model cannot question its own assumptions. That means a model cannot fundamentally surprise you.\n\n\n\n5.1.2.6 Comunication\nO √∫ltimo passo √© comunica√ß√£o. As linguagens de programa√ß√£o prov√©m ferramentas para expor seus resultados. O pr√≥prio Jupyter Notebook onde esta aula foi escrita √© um exemplo disso. Mas existem muitas outras ferramentas mais avan√ßadas para criar reports, livros, p√°ginas na web, aplicativos, etc. No curso de trainee, n√£o iremos cobrir essa etapa com detalhe.\nPor fim, dos √∫ltimos coment√°rios. Primeiro, e a programa√ß√£o?\n\nSurrounding all these tools is programming. Programming is a cross-cutting tool that you use in every part of the project. You don‚Äôt need to be an expert programmer to be a data scientist, but learning more about programming pays off because becoming a better programmer allows you to automate common tasks, and solve new problems with greater ease.\n\nE o que falta?\nNo curso do trainee iremos explicar todas as etapas (fora comunica√ß√£o), mas √© s√≥ isso que voc√™ precisar√°? N√£o, cada projeto exige seu conhecimento espec√≠fico, em cada tema, cada disciplina, existem conceitos pr√≥prios que entrar√£o em alguma das etapas aqui descritas. Mas tudo bem, o importante √© voc√™s saberem a base, e conseguir√£o ir atr√°s do adicional por conta pr√≥pria.\nO caminho √© o seguinte:\n\nNa aula de hoje, aprenderemos as etapas de tidy e transform.\nNa aula 5, aprenderemos a etapa visualize.\nNa aula 6, aprenderemos a etapa model.\nPor fim, na aula 7, juntaremos tudo, aprendendo como fazer um projeto completo. Adicionalmente, aprenderemos como organizar um script para tal.\n\n\n\n\n5.1.3 Data Wrangle e Tidy Data\n\n\n5.1.4 Tidy\n\n5.1.4.1 Tidy data\nDados podem ser representados de v√°rias maneiras, veja os exemplos abaixo. Nenhuma delas √© necessariamente melhor que as outras, s√£o organiza√ß√µes diferentes.\n\n\nPara ci√™ncia de dados, ser√° √∫til utilizar uma organiza√ß√£o espec√≠fica, chamada de ‚Äútidy dataset‚Äù. Tr√™s regras a definem:\n\nCada vari√°vel deve ter sua pr√≥pria coluna.\nCada observa√ß√£o deve ter sua pr√≥pria linha.\nCada valor deve ter sua pr√≥pria c√©lula.\n\n\nQuais s√£o os benef√≠cios de organizar dados assim?\n\nA consist√™ncia de utilizar uma mesma organiza√ß√£o, independente de qual, √© muito √∫til, especialmente porque facilita entender as ferramentas que trabalhar√£o com ela.\nA arruma√ß√£o tidy √© intuitiva, e √© utilizada de maneira muito natural nas ferramentas, muitaz vezes vetorizadas, de visualiza√ß√£o e modelagem.\n\n\n\n5.1.4.2 Arrumando datasets\nAgora que j√° entendemos o que √© tidy data, podemos adquirir a habilidade de olhar para um dataset e, sabendo onde queremos chegar, elencar quais s√£o as altera√ß√µes a serem feitas ‚Äì ‚Äúremover esta linha‚Äù, ‚Äúdividir essa coluna no meio‚Äù.\nAp√≥s elencar quais altera√ß√µes devem ser feitas, √© simples fazer a ponte de quais manipula√ß√µes de dados voc√™ quer fazer ‚Äì ‚Äúsubset linhas‚Äù e ‚Äúseparar colunas‚Äù.\nPor fim, s√≥ falta relembrar como √© o c√≥digo que aplica essa manipula√ß√£o. Essa √© a parte mais simples! √â s√≥ voltar na aula passada, pesquisar na internet, ver no chat, ou perguntar para o seu amigo preferido!\nTendo as duas primeiras habilidades, voc√™ tem tudo o que precisa para pesquisar, e n√£o h√° problema nenhum em ter que pesquisar, o problema √© ter que pesquisar , e n√£o saber como!. Agora, se voc√™ s√≥ sabe a terceira, voc√™ n√£o precisa pesquisar, mas n√£o sabe o que voc√™ n√£o precisa pesquisar, o que n√£o √© especialmente √∫til.\nSe voc√™ quiser ficar insano no pandas, rever a aula passada tr√™s vezes por dia, deitado numa banheira congelada, ser√° √≥timo, voc√™ ficar√° efici√™nte muito r√°pidamente. Mas n√£o precisa, essa efici√™ncia vem com o tempo, e o mais importante √© saber a l√≥gica de ‚Äúo que precisa alterar‚Äù e ‚Äúquais s√£o as manipula√ß√µes que existem‚Äù.\nOk, sem mais delongas, vamos aprender a elencar altera√ß√µes, vamos ver uns exemplos vide o PPT.\nQual foi a receitinha de bolo que aprendemos? (hmm bolo üòã). Recebemos um dataset, e:\n\nArrumar os dados para o formato data frame.\n\nTodas as colunas s√£o homog√™neas?\n\nRemover linhas ‚Äúruins‚Äù, converter valores.\n\nTodas as colunas s√£o do mesmo tamanho?\n\nRemover linhas ‚Äúruins‚Äù.\n\n\nArrumar os dados para o formato tidy.\n\nToda coluna √© uma vari√°vel?\n\nRemover colunas ‚Äúruins‚Äù.\nSeparar/unir colunas colunas.\n\nToda linha √© uma observa√ß√£o?\n\nQuais s√£o as vari√°veis que definem uma observa√ß√£o?\nPivot e melt.\n\nToda c√©lula √© um valor?\n\nTransformar dados ‚Äúruins‚Äù em NA.\nLidar com dados NA.\n\n\nTenho mais de um dataset? Deix√°-los tidy e ent√£o realizaram algum merge.\n\n\n\n\n5.1.5 Transform\nAp√≥s arrumarmos um dataset, ainda aplicaremos transforma√ß√µes com base nas demandas da fase de visualiza√ß√£o e modelagem.\n\nManipular linhas.\n\nSorting.\nSampling.\nFiltrar observa√ß√µes.\n\nTransformar/criar colunas:\n\nAlterar a unidade de uma vari√°vel.\nNormalizar vari√°veis.\nAgrupar as categorias de uma vari√°vel categ√≥rica.\nCorrigir/formatar texto de vari√°veis string.\nManipular datas.\nCriar novas colunas a partir de opera√ß√µes com m√∫ltiplas outras Exemplos: sal√°rio semanal * semanas trabalhadas; idade ao quadrado.\nCriar uma coluna para ajudar em um plot.\n\n\nTodas essas opera√ß√µes s√£o fact√≠veis de serem feitas com base na aula passada de pandas. Voc√™s ver√£o muitos exemplos dessa etapa na aula 6.\nAdicionar/Editar: Escolha uma frase remetendo pausa e tire print de alguma arte dela em https://patorjk.com/software/taag/. Exemplo:\n\n\n\n\nüòé",
    "crumbs": [
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>CD: Manipula√ß√£o</span>"
    ]
  },
  {
    "objectID": "aula4-cd-manipulacao.html#data-wrangle-com-pandas",
    "href": "aula4-cd-manipulacao.html#data-wrangle-com-pandas",
    "title": "4¬† CD: Manipula√ß√£o",
    "section": "5.2 Data Wrangle com Pandas",
    "text": "5.2 Data Wrangle com Pandas\nAdicionar/Editar: Adicionar uns exemplos de data wrangle, especialmente usando as opera√ß√µes que n√£o foram ensinadas na aula passada (reshape, separate/unite, e combine)",
    "crumbs": [
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>CD: Manipula√ß√£o</span>"
    ]
  },
  {
    "objectID": "aula4-cd-manipulacao.html#recapitulando",
    "href": "aula4-cd-manipulacao.html#recapitulando",
    "title": "4¬† CD: Manipula√ß√£o",
    "section": "Recapitulando",
    "text": "Recapitulando\nAdicionar/Editar: Adicionar texto de recapitulando. Em par√°grafos, primeiro sobre os principais objetivos de aprendizagem, depois sobre os conceitos te√≥ricos aprendidos, e por fim, dos conceitos \"decoreba\" aprendidos",
    "crumbs": [
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>CD: Manipula√ß√£o</span>"
    ]
  },
  {
    "objectID": "aula4-cd-manipulacao.html#extras",
    "href": "aula4-cd-manipulacao.html#extras",
    "title": "4¬† CD: Manipula√ß√£o",
    "section": "5.3 Extras",
    "text": "5.3 Extras\nAdicionar/Editar: tem que ver o que vem pra ca. talvez mais exemplos?",
    "crumbs": [
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>CD: Manipula√ß√£o</span>"
    ]
  },
  {
    "objectID": "aula5-cd-visualizacao.html",
    "href": "aula5-cd-visualizacao.html",
    "title": "5¬† CD: Visualiza√ß√£o",
    "section": "",
    "text": "6 Introdu√ß√£o\nAdicionar/Editar: Motiva√ß√£o da aula\nAdicionar/Editar: TOC dos temas da aula (pra ajudar os alunos a se acharem na aula)\nAdicionar/Editar: Texto (enxuto, objetivo) com os objetivos de aprendizagem principais (o que, principalmente, os alunos tem que sair dessa aula sabendo)\nAdicionar/Editar: Ao longo da aula: adicionar mais refer√™ncias, especialmente sobre onde expandir os conhecimentos sobre cada tema\nAdicionar/Editar: Na mesma ideia das aulas passadas, vamos explicar teoricamente o que √© uma visualiza√ß√£o (tanto como tabela ou gr√°fico), e depois falar sobre os \"tipos\" de visualiza√ß√µes que queremos criar",
    "crumbs": [
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>CD: Visualiza√ß√£o</span>"
    ]
  },
  {
    "objectID": "aula5-cd-visualizacao.html#visualiza√ß√£o-de-dados",
    "href": "aula5-cd-visualizacao.html#visualiza√ß√£o-de-dados",
    "title": "5¬† CD: Visualiza√ß√£o",
    "section": "6.1 Visualiza√ß√£o de Dados",
    "text": "6.1 Visualiza√ß√£o de Dados\nAdicionar/Editar: explicar o objetivo. brevemente falar sobre tabelas de sumariza√ß√£o (e seus componentes) e gr√°ficos (e seus componentes)",
    "crumbs": [
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>CD: Visualiza√ß√£o</span>"
    ]
  },
  {
    "objectID": "aula5-cd-visualizacao.html#sumariza√ß√£o-com-pandas",
    "href": "aula5-cd-visualizacao.html#sumariza√ß√£o-com-pandas",
    "title": "5¬† CD: Visualiza√ß√£o",
    "section": "6.2 Sumariza√ß√£o com Pandas",
    "text": "6.2 Sumariza√ß√£o com Pandas\nUma maneira de visualizar dados √© criar resumos, calcular estat√≠sticas descritivas que contem informa√ß√µes chave sobre os dados, de maneira concisa.\nEstes links tem alguns tutoriais interessantes:\n\nhttps://pandas.pydata.org/docs/getting_started/intro_tutorials/06_calculate_statistics.html\nhttps://www.geeksforgeeks.org/pandas-groupby-summarising-aggregating-and-grouping-data-in-python/\n\nVamos come√ßar carregando dados:\n\nimport pandas as pd\n\nAdicionar/Editar: salvar o dataframe em assets/materials\n\ndf = pd.read_csv(\"https://drive.google.com/uc?id=1u2MEH_DTBMyG3clVKA4Q5FEpntLZNKeE\")\ndf\n\n\n\n\n\n\n\n\nUnnamed: 0\nName\nLocation\nYear\nKilometers_Driven\nFuel_Type\nTransmission\nOwner_Type\nMileage\nEngine\nPower\nSeats\nNew_Price\nPrice\n\n\n\n\n0\n0\nMaruti Wagon R LXI CNG\nMumbai\n2010\n72000\nCNG\nManual\nFirst\n26.6 km/kg\n998 CC\n58.16 bhp\n5.0\nNaN\n1.75\n\n\n1\n1\nHyundai Creta 1.6 CRDi SX Option\nPune\n2015\n41000\nDiesel\nManual\nFirst\n19.67 kmpl\n1582 CC\n126.2 bhp\n5.0\nNaN\n12.50\n\n\n2\n2\nHonda Jazz V\nChennai\n2011\n46000\nPetrol\nManual\nFirst\n18.2 kmpl\n1199 CC\n88.7 bhp\n5.0\n8.61 Lakh\n4.50\n\n\n3\n3\nMaruti Ertiga VDI\nChennai\n2012\n87000\nDiesel\nManual\nFirst\n20.77 kmpl\n1248 CC\n88.76 bhp\n7.0\nNaN\n6.00\n\n\n4\n4\nAudi A4 New 2.0 TDI Multitronic\nCoimbatore\n2013\n40670\nDiesel\nAutomatic\nSecond\n15.2 kmpl\n1968 CC\n140.8 bhp\n5.0\nNaN\n17.74\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n6014\n6014\nMaruti Swift VDI\nDelhi\n2014\n27365\nDiesel\nManual\nFirst\n28.4 kmpl\n1248 CC\n74 bhp\n5.0\n7.88 Lakh\n4.75\n\n\n6015\n6015\nHyundai Xcent 1.1 CRDi S\nJaipur\n2015\n100000\nDiesel\nManual\nFirst\n24.4 kmpl\n1120 CC\n71 bhp\n5.0\nNaN\n4.00\n\n\n6016\n6016\nMahindra Xylo D4 BSIV\nJaipur\n2012\n55000\nDiesel\nManual\nSecond\n14.0 kmpl\n2498 CC\n112 bhp\n8.0\nNaN\n2.90\n\n\n6017\n6017\nMaruti Wagon R VXI\nKolkata\n2013\n46000\nPetrol\nManual\nFirst\n18.9 kmpl\n998 CC\n67.1 bhp\n5.0\nNaN\n2.65\n\n\n6018\n6018\nChevrolet Beat Diesel\nHyderabad\n2011\n47000\nDiesel\nManual\nFirst\n25.44 kmpl\n936 CC\n57.6 bhp\n5.0\nNaN\n2.50\n\n\n\n\n6019 rows √ó 14 columns\n\n\n\n\n6.2.1 Sumarisando o dataframe como um todo\nExistem algumas fun√ß√µes que combinam v√°rias informa√ß√µes sobre todas as vari√°veis ao mesmo tempo.\n\ndf.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 6019 entries, 0 to 6018\nData columns (total 14 columns):\n #   Column             Non-Null Count  Dtype  \n---  ------             --------------  -----  \n 0   Unnamed: 0         6019 non-null   int64  \n 1   Name               6019 non-null   object \n 2   Location           6019 non-null   object \n 3   Year               6019 non-null   int64  \n 4   Kilometers_Driven  6019 non-null   int64  \n 5   Fuel_Type          6019 non-null   object \n 6   Transmission       6019 non-null   object \n 7   Owner_Type         6019 non-null   object \n 8   Mileage            6017 non-null   object \n 9   Engine             5983 non-null   object \n 10  Power              5983 non-null   object \n 11  Seats              5977 non-null   float64\n 12  New_Price          824 non-null    object \n 13  Price              6019 non-null   float64\ndtypes: float64(2), int64(3), object(9)\nmemory usage: 658.5+ KB\n\n\n\ndf.describe()\n\n\n\n\n\n\n\n\nUnnamed: 0\nYear\nKilometers_Driven\nSeats\nPrice\n\n\n\n\ncount\n6019.000000\n6019.000000\n6.019000e+03\n5977.000000\n6019.000000\n\n\nmean\n3009.000000\n2013.358199\n5.873838e+04\n5.278735\n9.479468\n\n\nstd\n1737.679967\n3.269742\n9.126884e+04\n0.808840\n11.187917\n\n\nmin\n0.000000\n1998.000000\n1.710000e+02\n0.000000\n0.440000\n\n\n25%\n1504.500000\n2011.000000\n3.400000e+04\n5.000000\n3.500000\n\n\n50%\n3009.000000\n2014.000000\n5.300000e+04\n5.000000\n5.640000\n\n\n75%\n4513.500000\n2016.000000\n7.300000e+04\n5.000000\n9.950000\n\n\nmax\n6018.000000\n2019.000000\n6.500000e+06\n10.000000\n160.000000\n\n\n\n\n\n\n\n\n\n6.2.2 Sumarisando vari√°veis categ√≥ricas\nPara vari√°veis categ√≥ricas, podemos ver a frequ√™ncia de cada categoria.\n\ncounts = df['Fuel_Type'].value_counts(normalize = True)\n\nprint(counts)\ncounts.plot(kind = \"bar\")\n\nFuel_Type\nDiesel      0.532480\nPetrol      0.456222\nCNG         0.009304\nLPG         0.001661\nElectric    0.000332\nName: proportion, dtype: float64\n\n\n\n\n\n\n\n\n\n\n\n6.2.3 Sumarisando vari√°veis cont√≠nuas\nAs estat√≠sticas descritivas principais est√£o na tabela ‚Äúdescribe‚Äù, mas tamb√©m podem ser obtidas individualmente.\n\nprint(df['Price'].mean()) # Tamb√©m existe .sum(), .min(), etc.\n\ndf['Price'].describe()\n\n9.47946835022429\n\n\ncount    6019.000000\nmean        9.479468\nstd        11.187917\nmin         0.440000\n25%         3.500000\n50%         5.640000\n75%         9.950000\nmax       160.000000\nName: Price, dtype: float64\n\n\nDe modo mais geral, mas menos mensur√°vel, podemos olhar para a distribui√ß√£o da vari√°vel como um todo, e uma visualiza√ß√£o simplificada com boxplots.\n\ndf['Price'].plot.density()\n\n\n\n\n\n\n\n\n\ndf['Price'].plot.box()\n\n\n\n\n\n\n\n\n\n\n6.2.4 Analisando grupos nos dados\nAdicionar/Editar: falar bem mais, falar das fun√ß√µes de aggregate que n√£o falamos na aula 3\nPodemos estar interessado em fazer esses resumos mas utilizando grupos nos dados. Veja este tutorial para mais informa√ß√µes.\n\ndf.groupby('Fuel_Type')['Price'].sum()\n\nFuel_Type\nCNG           196.94\nDiesel      41154.14\nElectric       25.75\nLPG            24.87\nPetrol      15655.22\nName: Price, dtype: float64\n\n\n\ndf.plot.box(column = 'Price', by = 'Fuel_Type')\n\nPrice    Axes(0.125,0.11;0.775x0.77)\ndtype: object\n\n\n\n\n\n\n\n\n\nAdicionar/Editar: Escolha uma frase remetendo pausa e tire print de alguma arte dela em https://patorjk.com/software/taag/. Exemplo:\n\n\n\n\nüòé",
    "crumbs": [
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>CD: Visualiza√ß√£o</span>"
    ]
  },
  {
    "objectID": "aula5-cd-visualizacao.html#gr√°ficos-com-o-matplotlib",
    "href": "aula5-cd-visualizacao.html#gr√°ficos-com-o-matplotlib",
    "title": "5¬† CD: Visualiza√ß√£o",
    "section": "6.3 Gr√°ficos com o Matplotlib",
    "text": "6.3 Gr√°ficos com o Matplotlib\nAdicionar/Editar: cuidado pra n√£o deixar a aula muito expositiva/densa. conte√∫dos de decoreba, mova para a se√ß√£o de Extras\n\n6.3.1 Anatomia e Estilo de Programa√ß√£o\nAdicionar/Editar: Falar mais sobre os componentes de um gr√°fico, para setar o contexto para dividir as fun√ß√µes do matplotlib em \"caixinhas\"\nO Matplotlib exibe seus dados em Figuras (por exemplo, janelas, widgets Jupyter, etc.), cada uma das quais pode conter um ou mais Eixos, uma √°rea onde pontos podem ser especificados em termos de coordenadas x-y (ou theta-r em um gr√°fico polar, x-y-z em um gr√°fico 3D, etc.). A maneira mais simples de criar uma Figura com um Eixo √© usando pyplot.subplots.\nAlguns links √∫teis:\n\nhttps://matplotlib.org/stable/users/explain/quick_start.html.\nhttps://matplotlib.org/3.8.3/users/index.html.\nhttps://matplotlib.org/cheatsheets/_images/cheatsheets-1.png.\nhttps://matplotlib.org/3.8.3/index.html.\nhttps://matplotlib.org/3.8.3/api/index.html.\n\n\n\n6.3.2 Anatomia de uma figura\n\n\n\n6.3.3 O estilo da programa√ß√£o\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(0, 2, 100)  # Sample data.\n\n# Note that even in the OO-style, we use `.pyplot.figure` to create the Figure.\nfig, ax = plt.subplots(figsize=(5, 2.7), layout='constrained')\nax.plot(x, x, label='linear')  # Plot some data on the axes.\nax.plot(x, x**2, label='quadratic')  # Plot more data on the axes...\nax.plot(x, x**3, label='cubic')  # ... and some more.\nax.set_xlabel('x label')  # Add an x-label to the axes.\nax.set_ylabel('y label')  # Add a y-label to the axes.\nax.set_title(\"Simple Plot\")  # Add a title to the axes.\nax.legend()  # Add a legend.\n\n\n\n\n\n\n\n\n\n\n6.3.4 Plots\nAdicionar/Editar: Falar os tipos de plots quistos, e citar as fun√ß√µes que os criam. scatterplot, line plot, bar/colplot, histograms/violinplot, boxplot, pieplot, o que mais?\n\n\n6.3.5 Est√©ticas\nAdicionar/Editar: est√©ticas s√£o os componentes visuais que tem rela√ß√£o direta com os dados cores, fills, markers, linetypes, etc.\nAdicionar/Editar: √© nessa se√ß√£o que deve-se ensinar a fazer plots com dados separados com uma legenda, pra v√°rias est√©ticas diferentes\n\n\n6.3.6 Tema\nAdicionar/Editar: temas s√£o os componentes visuais que n√£o tem rela√ß√£o com os dados: t√≠tulos, grade, cores de fundo, etc.\n\n\n6.3.7 Plots Combinados\nAdicionar/Editar: ensinar",
    "crumbs": [
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>CD: Visualiza√ß√£o</span>"
    ]
  },
  {
    "objectID": "aula5-cd-visualizacao.html#recapitulando",
    "href": "aula5-cd-visualizacao.html#recapitulando",
    "title": "5¬† CD: Visualiza√ß√£o",
    "section": "Recapitulando",
    "text": "Recapitulando\nAdicionar/Editar: Adicionar texto de recapitulando. Em par√°grafos, primeiro sobre os principais objetivos de aprendizagem, depois sobre os conceitos te√≥ricos aprendidos, e por fim, dos conceitos \"decoreba\" aprendidos",
    "crumbs": [
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>CD: Visualiza√ß√£o</span>"
    ]
  },
  {
    "objectID": "aula5-cd-visualizacao.html#extras",
    "href": "aula5-cd-visualizacao.html#extras",
    "title": "5¬† CD: Visualiza√ß√£o",
    "section": "6.4 Extras",
    "text": "6.4 Extras\nAdicionar/Editar: colocar as partes muito decorebas aqui\n\n6.4.1 Outras Bibliotecas Gr√°ficas\nAdicionar/Editar: falar que existem, e suas diferen√ßas com o matplot",
    "crumbs": [
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>CD: Visualiza√ß√£o</span>"
    ]
  },
  {
    "objectID": "aula6-cd-modelagem.html",
    "href": "aula6-cd-modelagem.html",
    "title": "6¬† CD: Modelagem",
    "section": "",
    "text": "6.1 Modelagem\nVide o ppt",
    "crumbs": [
      "<span class='chapter-number'>6</span>¬† <span class='chapter-title'>CD: Modelagem</span>"
    ]
  },
  {
    "objectID": "aula6-cd-modelagem.html#recapitulando",
    "href": "aula6-cd-modelagem.html#recapitulando",
    "title": "6¬† CD: Modelagem",
    "section": "Recapitulando",
    "text": "Recapitulando\nAdicionar/Editar: Adicionar texto de recapitulando. Em par√°grafos, primeiro sobre os principais objetivos de aprendizagem, depois sobre os conceitos te√≥ricos aprendidos, e por fim, dos conceitos \"decoreba\" aprendidos",
    "crumbs": [
      "<span class='chapter-number'>6</span>¬† <span class='chapter-title'>CD: Modelagem</span>"
    ]
  },
  {
    "objectID": "aula6-cd-modelagem.html#extras",
    "href": "aula6-cd-modelagem.html#extras",
    "title": "6¬† CD: Modelagem",
    "section": "6.2 Extras",
    "text": "6.2 Extras\n\n6.2.1 Detalhamento dos Modelos e Seus Hiperpar√¢metros\nAdicionar/Editar: Escrever",
    "crumbs": [
      "<span class='chapter-number'>6</span>¬† <span class='chapter-title'>CD: Modelagem</span>"
    ]
  },
  {
    "objectID": "aula7-cd-projetos.html",
    "href": "aula7-cd-projetos.html",
    "title": "7¬† CD: Projetos",
    "section": "",
    "text": "7.1 Organiza√ß√£o de um Script",
    "crumbs": [
      "<span class='chapter-number'>7</span>¬† <span class='chapter-title'>CD: Projetos</span>"
    ]
  },
  {
    "objectID": "aula7-cd-projetos.html#exemplo-de-script",
    "href": "aula7-cd-projetos.html#exemplo-de-script",
    "title": "7¬† CD: Projetos",
    "section": "7.2 Exemplo de Script",
    "text": "7.2 Exemplo de Script\nAdicionar/Editar: colocar em um script separado em assets/materials",
    "crumbs": [
      "<span class='chapter-number'>7</span>¬† <span class='chapter-title'>CD: Projetos</span>"
    ]
  },
  {
    "objectID": "aula7-cd-projetos.html#recapitulando",
    "href": "aula7-cd-projetos.html#recapitulando",
    "title": "7¬† CD: Projetos",
    "section": "Recapitulando",
    "text": "Recapitulando\nAdicionar/Editar: Adicionar texto de recapitulando. Em par√°grafos, primeiro sobre os principais objetivos de aprendizagem, depois sobre os conceitos te√≥ricos aprendidos, e por fim, dos conceitos \"decoreba\" aprendidos",
    "crumbs": [
      "<span class='chapter-number'>7</span>¬† <span class='chapter-title'>CD: Projetos</span>"
    ]
  },
  {
    "objectID": "aula7-cd-projetos.html#extras",
    "href": "aula7-cd-projetos.html#extras",
    "title": "7¬† CD: Projetos",
    "section": "7.3 Extras",
    "text": "7.3 Extras",
    "crumbs": [
      "<span class='chapter-number'>7</span>¬† <span class='chapter-title'>CD: Projetos</span>"
    ]
  },
  {
    "objectID": "aula8-outros.html",
    "href": "aula8-outros.html",
    "title": "8¬† Outros T√≥picos",
    "section": "",
    "text": "8.1 Git e Github",
    "crumbs": [
      "<span class='chapter-number'>8</span>¬† <span class='chapter-title'>Outros T√≥picos</span>"
    ]
  },
  {
    "objectID": "aula8-outros.html#boas-pr√°ticas-de-programa√ß√£o",
    "href": "aula8-outros.html#boas-pr√°ticas-de-programa√ß√£o",
    "title": "8¬† Outros T√≥picos",
    "section": "8.2 Boas Pr√°ticas de Programa√ß√£o",
    "text": "8.2 Boas Pr√°ticas de Programa√ß√£o",
    "crumbs": [
      "<span class='chapter-number'>8</span>¬† <span class='chapter-title'>Outros T√≥picos</span>"
    ]
  },
  {
    "objectID": "aula8-outros.html#o-campo-da-programa√ß√£o",
    "href": "aula8-outros.html#o-campo-da-programa√ß√£o",
    "title": "8¬† Outros T√≥picos",
    "section": "8.3 O Campo da Programa√ß√£o",
    "text": "8.3 O Campo da Programa√ß√£o",
    "crumbs": [
      "<span class='chapter-number'>8</span>¬† <span class='chapter-title'>Outros T√≥picos</span>"
    ]
  },
  {
    "objectID": "aula8-outros.html#extras",
    "href": "aula8-outros.html#extras",
    "title": "8¬† Outros T√≥picos",
    "section": "8.4 Extras",
    "text": "8.4 Extras\n\n8.4.1 REGEX\n\n\n8.4.2 Web Scrapping",
    "crumbs": [
      "<span class='chapter-number'>8</span>¬† <span class='chapter-title'>Outros T√≥picos</span>"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "GVCode Trainee",
    "section": "",
    "text": "Bem Vindos!\nEste √© o material do curso de Trainee da GVCode. Cada cap√≠tulo est√° associado a uma aula presencial.\nEsse material foi 100% escrito pelos veteranos da entidade, e est√° sendo otimizado desde 2020! Ao final, temos algumas das bibliografias utilizadas em sua confec√ß√£o.",
    "crumbs": [
      "Bem Vindos!"
    ]
  },
  {
    "objectID": "index.html#aulas",
    "href": "index.html#aulas",
    "title": "GVCode Trainee",
    "section": "Aulas",
    "text": "Aulas\nIntrodu√ß√£o ao Python I (30/set a 4/out)\n\nO que √© um script; sintaxe; vari√°veis; tipos de dados.\nOperadores; control flow; fun√ß√µes.\nExtra: *args; condi√ß√µes (try except).\n\nIntrodu√ß√£o ao Python II (7/out a 11/out)\n\nPrograma√ß√£o orientada ao objeto.\nCole√ß√µes (list, dict, tuple, set); subsetting e m√©todos.\nIter√°veis loops, comprehension, e enumerate, filter, zip, e map.\nExtra: fun√ß√µes √∫teis, f-strings\n\nIntrodu√ß√£o ao Python III (14/out a 18/out)\n\nNumpy: arrays e vetoriza√ß√£o; opera√ß√µes e subsetting.\nPandas: dataframes; opera√ß√µes.\nExtra: t√≥picos avan√ßados em Numpy e Pandas.\n\nCi√™ncia de Dados: Manipula√ß√£o (21/out a 25/out)\n\nIntrodu√ß√£o √† ci√™ncia de dados; o que √© processamento de dados.\nComo arrumar dados com Pandas.\n\nCi√™ncia de Dados: Visualiza√ß√£o (28/out a 1/nov)\n\nO que √© visualiza√ß√£o de dados.\nSumariza√ß√£o com Pandas; Gr√°ficos com o Matplotlib.\nExtra: seaborn e outras bibliotecas; gr√°ficos avan√ßados.\n\nCi√™ncia de Dados: Modelagem (4/nov a 8/nov)\n\nO que √© modelagem de dados.\nAula te√≥rica sobre modelos de machine learning.\n\nCi√™ncia de Dados: Projetos (11/nov a 15/nov)\n\nEtapas e exemplo de um script de ci√™ncia de dados.\nFun√ß√µes de modelagem.\nExtra: apresentar trabalho.\n\nOutros Temas em Programa√ß√£o (18/nov a 22/nov)\n\nGit e Github.\nBoas pr√°ticas de programa√ß√£o (python‚Äôs pep8).\nExtra: regex; web scrapping.",
    "crumbs": [
      "Bem Vindos!"
    ]
  }
]