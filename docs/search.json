[
  {
    "objectID": "aula1-python1.html",
    "href": "aula1-python1.html",
    "title": "1¬† Introdu√ß√£o ao Python I",
    "section": "",
    "text": "Introdu√ß√£o\nNesta aula, vamos aprender desde o b√°sico, sintaxe, tomada de decis√µes, repeti√ß√£o de a√ß√µes, e estruturar melhor nossos programas, para que eles possam lidar com diferentes situa√ß√µes de forma din√¢mica.",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Introdu√ß√£o ao Python I</span>"
    ]
  },
  {
    "objectID": "aula1-python1.html#introdu√ß√£o",
    "href": "aula1-python1.html#introdu√ß√£o",
    "title": "1¬† Introdu√ß√£o ao Python I",
    "section": "",
    "text": "Sintaxe e Scripts B√°sicos\nTipos de Dados em Python\nOperadores em Python\nControle de Fluxo\nFun√ß√µes\nTratamento de Erros",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Introdu√ß√£o ao Python I</span>"
    ]
  },
  {
    "objectID": "aula1-python1.html#porque-python",
    "href": "aula1-python1.html#porque-python",
    "title": "1¬† Introdu√ß√£o ao Python I",
    "section": "1.1 Porque Python?",
    "text": "1.1 Porque Python?\nPython √© uma linguagem de programa√ß√£o f√°cil de aprender, com uma sintaxe clara e intuitiva, ideal para iniciantes. √â amplamente utilizada em diversas √°reas, como ci√™ncia de dados, desenvolvimento web e automa√ß√£o, tornando-se uma ferramenta vers√°til e pr√°tica.",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Introdu√ß√£o ao Python I</span>"
    ]
  },
  {
    "objectID": "aula1-python1.html#sintaxe",
    "href": "aula1-python1.html#sintaxe",
    "title": "1¬† Introdu√ß√£o ao Python I",
    "section": "1.2 Sintaxe",
    "text": "1.2 Sintaxe\n\n\n1.2.1 Scripts\nUm script √© um arquivo de texto com instru√ß√µes a serem executadas por um computador que antes traduzir√° o arquivo para linguagem de m√°quina.\nUm script √© um texto instrucional como qualquer outro, escrito em um tipo de linguagem especial, ‚Äúde programa√ß√£o‚Äù, ou ‚Äúc√≥digo‚Äù, mas √© um texto, quase como uma receita de bolo de cenoura.\nComo em qualquer linguagem, temos um vocabul√°rio √† disposi√ß√£o, um conjunto de palavras (ou tokens) existentes, organizadas em categorias como substantivos, adjetivos, etc. N√≥s combinamos as palavras em frases (ou statements) para descrever as instru√ß√µes. Por fim, organizamos o texto em par√°grafos (ou blocks), conjuntos de frases que devem ser lidas juntas, para definir a estrutura e facilitar o entendimento do texto.\n\n\n\n1.2.2 Sintaxe B√°sica\nA sintaxe dentro do Python √© muito semelhante com a linguagem humana. O programa ‚Äúl√™‚Äù de cima para baixo, da esqueda para a direita de forma sequencial!\nNote ao longo dos programas: espa√ßos, quebras de linha, tabs, coment√°rios‚Ä¶\n\n#Vamos fazer essa soma!\n\nsoma = 2 + 2 # soma bem facil...\nsoma2=2+2\n\nprint(soma, soma2)\n\n4 4",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Introdu√ß√£o ao Python I</span>"
    ]
  },
  {
    "objectID": "aula1-python1.html#vari√°veis",
    "href": "aula1-python1.html#vari√°veis",
    "title": "1¬† Introdu√ß√£o ao Python I",
    "section": "1.3 Vari√°veis",
    "text": "1.3 Vari√°veis\n\nAs vari√°veis no python s√£o bem parecidas com as vari√°veis da matem√°tica. Serve como caixinhas que carregam algo dentro e, sempre que o programa ler ela, entender√° o seu conte√∫do.\nx = \"julia\"  #toda vez que o programa ler x, ler√° a string julia\ny = 5        #toda vez que o programa ler y, ler√° o n√∫mero inteiro 5\nz = 2.5      #toda vez que o programa ler z, ler√° o n√∫mero float 2,5\nVari√°veis s√£o um nome, associado √† um valor, que mora na mem√≥ria do computador.\nTenha em mente ao nomear uma vari√°vel que: - N√£o se pode usar os termos reservados;\n\nNomes de vari√°veis podem conter apenas letras, n√∫meros e underscores(_). Podem come√ßar com uma letra ou um underscore, mas n√£o com um n√∫mero;\nEspa√ßos n√£o s√£o permitidos em nomes de vari√°veis (usa-se underscores para separa as palavras);\nDicas: nomes de vari√°veis devem ser concisos, por√©m descritivos.\n\nNa pr√°tica, quando escrevemos essas var√≠aveis, n√∫meros e strings em c√©lulas de c√≥digo, observamos diferentes cores que indicam o que o python est√° enxergando.\nTermos reservados s√£o termos que j√° possuem um ‚Äúsignificado‚Äù para o Python, ent√£o n√£o podemos usa-los como vari√°veis.",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Introdu√ß√£o ao Python I</span>"
    ]
  },
  {
    "objectID": "aula1-python1.html#tipos-de-dados",
    "href": "aula1-python1.html#tipos-de-dados",
    "title": "1¬† Introdu√ß√£o ao Python I",
    "section": "1.4 Tipos de Dados",
    "text": "1.4 Tipos de Dados\nTipos de dados s√£o os ‚Äútijolinhos‚Äù b√°sicos que formam nossos programas. Eles representam os diferentes tipos de informa√ß√µes que podemos armazenar e manipular, como textos, n√∫meros e valores l√≥gicos. Cada tipo de dado √© salvo de uma forma espec√≠fica na mem√≥ria, permitindo que realizemos opera√ß√µes adequadas para cada tipo.\nNesta aula, vamos explorar os principais tipos de dados em Python. Para se aprofundar mais: https://docs.python.org/3/library/datatypes.html\n\n\n\n\n\n1.4.1 String\nUma string √© um ‚Äúdesenho‚Äù, onde o programa n√£o enxerga nenhum valor num√©rico mas consegue diferir os ‚Äúdesenhos‚Äù entre si. Seu s√≠mbolo √© ‚Äô ‚Äô ou ‚Äù ‚Äú, indicando ao programa que √© uma string. Um n√∫mero pode ter valor num√©rico (int ou float por exemplo) ou n√£o (str).\nObs: o python √© uma linguagem extremamente sens√≠vel, ent√£o a string ‚Äújulia‚Äù e a string ‚ÄúJulia‚Äù n√£o s√£o iguais para ele.\n\"Julia\"\n\"luana\"\n\"123456\"\nUma ferramenta que voc√™s usar√£o e que ‚Äúrespiram‚Äù strings √© o len().\n‚ÄúLen‚Äù √© a brevia√ß√£o para a palavra Length, ou seja, comprimento, e √© exatamente o que ele mede: essa fun√ß√£o retorna o n√∫mero de caract√©res de uma string.\nObs: os ESPA√áOS contam como caracteres.\nlen(\"julia cruz\") --&gt; retorna o n√∫mero 10 (um inteiro)\n\n\n1.4.2 Inteiro\nOs inteiros s√£o n√∫meros que n√£o s√£o strings e n√£o possuem valor depois da v√≠gula, ou seja, s√£o n√∫meros inteiros :D. Usados em express√µes matem√°ticas para contas.\n5\n6\n12\n1000\n\n\n1.4.3 Float\nS√£o semelhantes aos n√∫meros inteiros por√©m considera e demanda valores depois da v√≠rgula, mesmo que seja 0. Se misturam com os inteiros em equa√ß√µes matem√°ticas.\n1.0\n2.3\n45.002\n1000.0\n\n\n1.4.4 Booleano\nUm valor booleano √© um tipo de dado que pode representar apenas dois estados distintos: verdadeiro ou falso. √â fundamental em muitos aspectos da programa√ß√£o e da l√≥gica, pois permite tomar decis√µes com base em condi√ß√µes.\nverdadeiro = True\nfalso = False",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Introdu√ß√£o ao Python I</span>"
    ]
  },
  {
    "objectID": "aula1-python1.html#operadores",
    "href": "aula1-python1.html#operadores",
    "title": "1¬† Introdu√ß√£o ao Python I",
    "section": "1.5 Operadores",
    "text": "1.5 Operadores\nS√£o s√≠mbolos que nos permitem realizar opera√ß√µes sobre vari√°veis e valores. Eles s√£o fundamentais para a constru√ß√£o de express√µes em Python, ajudando a manipular dados, fazer c√°lculos e tomar decis√µes.\nMaterial base e aprofundamento: https://docs.python.org/3/library/operator.html  \n\n\n1.5.1 Operadores Aritim√©ticos\nOs operadores aritm√©ticos s√£o usados para realizar opera√ß√µes matem√°ticas entre operandos.\n\n\n\n\nimage.png\n\n\n\nprint(2+2)\n\n4\n\n\n\nprint(2*5 - 7)\n\n3\n\n\n\nprint(4%2)\n\n0\n\n\n\nprint(3%2)\n\n1\n\n\n\ndivisao_inteira = 10 // 6\nprint(divisao_inteira, 10/6)\n\n1 1.6666666666666667\n\n\n\n1.5.1.1 Ordem de Preced√™ncia\n\n# Parenteses\nexpressao_1 = ((2 + 5) * 3)\nprint(expressao_1)\n\nexpressao_2 = (2 + 5 * 3)\nprint(expressao_2)\n\nexpressao_3 = (1 + 5 ** 2)\nprint(expressao_3)\n\n21\n17\n26\n\n\n\nprint(((2*3)**3)/7)\n\n30.857142857142858\n\n\n\n\n\n1.5.2 Operadores l√≥gicos\nOs operadores l√≥gicos s√£o usados alguma rela√ß√£o entre operandos. Quando utilizados, eles retornam valores booleanos (True ou False).\n\n\n\n\n\n\n\n\n\n1.5.3 Operadores de Atribui√ß√£o\nOs operadores de atribui√ß√£o s√£o usados para atibuir valores a vari√°veis\n\n\n\nnumero = 5\nnumero += 1\nprint(numero)\n\n6\n\n\n\nnumero = 3\nnumero -= 1\nprint(numero)\n\n2\n\n\n\nnumero = 7\nnumero *= 5\nprint(numero)\n\n35\n\n\n\nnumero = 9\nnumero /= 5\nprint(numero)\n\n1.8\n\n\n\nnumero = 5\nnumero %= 2\nprint(numero)\n\n1\n\n\n\n\n\n\n\nüòé",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Introdu√ß√£o ao Python I</span>"
    ]
  },
  {
    "objectID": "aula1-python1.html#control-flow",
    "href": "aula1-python1.html#control-flow",
    "title": "1¬† Introdu√ß√£o ao Python I",
    "section": "1.6 Control Flow",
    "text": "1.6 Control Flow\nBasicamente, control flow √© sobre como o programa decide qual parte do c√≥digo executar e quando. Essas ferramentas permitem que o c√≥digo se adapte a diferentes situa√ß√µes, tome decis√µes e realize a√ß√µes repetitivas, dependendo dos valores e condi√ß√µes presentes no programa.\nPara se aprofundar: https://docs.python.org/3/tutorial/controlflow.html\n\n1.6.1 Condicionais\nCondicionais s√£o estruturas usadas para tomar decis√µes dentro de um programa. Elas permitem que o c√≥digo execute diferentes blocos de instru√ß√µes dependendo de condi√ß√µes espec√≠ficas. Assim, com condicionais, √© poss√≠vel direcionar o fluxo do programa com base em crit√©rios, como valores de vari√°veis, facilitando a cria√ß√£o de comportamentos din√¢micos e adaptativos.\n\n1.6.1.1 if\nA estrutura if √© usada para verificar se uma condi√ß√£o √© verdadeira e, caso seja, executar um bloco de c√≥digo espec√≠fico. Ela √© a base das decis√µes em um programa, permitindo que diferentes a√ß√µes aconte√ßamm dependendo do valor de uma condi√ß√£o. Se a condi√ß√£o for verdadeira, o c√≥digo dentro do if ser√° executado; caso contr√°rio, ser√° ignorado.\n\n\n1.6.1.2 if else\nA estrutura if else √© usada quando h√° a necessidade de definir duas a√ß√µes diferentes: uma a ser executada se a condi√ß√£o for verdadeira (if) e outra se essa condi√ß√£o for falsa (else). Dessa forma, ela garante que um dos dois blocos de c√≥digo ser√° executado, cobrindo todas as possibilidades de resultado da condi√ß√£o.\n\n\n1.6.1.3 if elif else\nA estrutura if elif else √© usada quando h√° mais de duas possibilidades para a condi√ß√£o. Primeiro, o if verifica a condi√ß√£o inicial. Caso ela seja falsa, o elif (abrevia√ß√£o de ‚Äúelse if‚Äù) verifica uma nova condi√ß√£o, e isso pode se repetir quantas vezes for necess√°rio. Por fim, o else cobre o caso em que nenhuma das condi√ß√µes anteriores √© satisfeita. Essa estrutura permite criar m√∫ltiplos caminhos de decis√£o dentro do c√≥digo.\n\n\n\n1.6.2 Loops\nLoops s√£o estruturas usadas para repetir um bloco de c√≥digo v√°rias vezes, facilitando a automa√ß√£o de tarefas repetitivas. Eles s√£o √∫teis quando se deseja realizar uma mesma opera√ß√£o v√°rias vezes, seja sobre uma cole√ß√£o de itens ou at√© que uma determinada condi√ß√£o seja atendida. Com loops, √© poss√≠vel escrever um c√≥digo de forma mais concisa e eficiente, evitando a repeti√ß√£o manual de instru√ß√µes.\n\n1.6.2.1 while\nA estrutura while repete um bloco de c√≥digo enquanto uma condi√ß√£o for verdadeira. Ela √© √∫til quando n√£o se sabe exatamente quantas vezes o bloco do c√≥digo precisar√° ser executado, mas sim at√© que uma determinada condi√ß√£o seja atendida. Assim que a condi√ß√£o se tornar falsa, o loop √© interrompido.\n\n\n1.6.2.2 for\nA estrutura for √© usada para repetir um bloco de c√≥digo um n√∫mero espec√≠fico de vezes. Geralmente, √© usada quando j√° se sabe quantas vezes o bloco de c√≥digo deve ser executado. No contexto inicial, sem listas, o for pode ser usado para repetir a√ß√µes com base em um intervalo definido, permitindo automatizar processos repetitivos de maneira simples.\n\n\n\n1.6.3 Keywords\n\n1.6.3.1 break\nA instru√ß√£o break √© usada para interromper um loop antes de ele ser conclu√≠do. Quando o break √© executado, o loop √© finalizado imediatamente, e o programa segue para a pr√≥xima instru√ß√£o. Essa instru√ß√£o √© √∫til quando se deseja parar a repeti√ß√£o ao atender a uma condi√ß√£o espec√≠fica, mesmo que o loop ainda n√£o tenha terminado seu ciclo completo.\n\n\n1.6.3.2 continue\nA instru√ß√£o continue √© usada para pular a itera√ß√£o atual de um loop e avan√ßar para a pr√≥xima itera√ß√£o. Quando continue √© executado, o loop n√£o finaliza, mas simplesmente ignora o restante do bloco de c√≥digo daquela itera√ß√£o e volta para o in√≠cio, verificando a condi√ß√£o novamente ou avan√ßando para o pr√≥ximo item. Isso √© √∫til para evitar executar parte do c√≥digo do loop em condi√ß√µes espec√≠ficas.\n\n\n\n1.6.4 Indo pra pr√°tica‚Ä¶\n\n1.6.4.1 If elif else\n\nhora = 7 \n\nif hora &gt;= 6:\n    print(\"Hora de acordar!\")\nif hora &lt; 6:\n    print(\"Pode dormir mais um pouco.\")\n\nHora de acordar!\n\n\n\ndinheiro = 30\npre√ßo = 25\n\nif dinheiro &gt;= pre√ßo:\n    print(\"Voc√™ pode comprar o produto!\")\nif dinheiro &lt; pre√ßo:\n    print(\"Voc√™ n√£o tem dinheiro suficiente para comprar o produto.\")\n\nVoc√™ pode comprar o produto!\n\n\n\ntemperatura = 80\n\nif temperatura &gt;= 100:\n    print(\"A √°gua est√° fervendo!\")\nif temperatura &lt; 100:\n    print(\"A √°gua n√£o est√° fervendo ainda.\")\n\nA √°gua n√£o est√° fervendo ainda.\n\n\nExemplos que vou mostrar (vou tirar essa se√ß√£o depois, est√° nos coment√°rios)\n\n\n\n\n\n1.6.5 Sintaxe e Defini√ß√£o\n\n\n1.6.6 Argumentos\nArgumentos s√£o valores fornecidos a fun√ß√µes para que elas possam trabalhar com dados espec√≠ficos. Existem tr√™s tipos principais:\n\nArgumentos Posicionais: S√£o passados para a fun√ß√£o na ordem em que s√£o definidos, e essa ordem determina qual par√¢metro ser√° preenchido.\nArgumentos Padr√£o: S√£o valores definidos como padr√£o (default) na fun√ß√£o. Se um valor n√£o for passado ao chamar a fun√ß√£o, o valor padr√£o ser√° usado.\n\n\n\ndef mostrar_dados(idade, nome):\n    print(f\"Nome: {nome}, Idade: {idade}\")\n\n# Posicional\nmostrar_dados(20, \"Aldo\")\n\nNome: Aldo, Idade: 20\n\n\n\ndef funcao_exemplo(fun√ß√£o):\n    fun√ß√£o()\n\ndef dizer_ola():\n    print(\"Ol√°!\")\n\n# Posicional\nfuncao_exemplo(dizer_ola)\n\nOl√°!\n\n\n\ndef saudar(nome, saudacao):\n    print(f\"{saudacao}, {nome}!\")\n\n# Usando argumentos nomeados\nsaudar(nome=\"Vitor\", saudacao=\"Bom dia\")\nsaudar(saudacao=\"Boa tarde\", nome=\"Ana\")  # Aqui a ordem foi invertida, mas podemos identificar os argumentos pelo nome\n\nBom dia, Vitor!\nBoa tarde, Ana!\n\n\n\ndef mostrar_dados_2(nome, idade=30):\n    print(f\"Nome: {nome}, Idade: {idade}\")\n\n# Chamando a fun√ß√£o sem passar o valor para o argumento 'idade', o valor padr√£o ser√° utilizado\nmostrar_dados_2(\"Mariana\")  # Nome: Mariana, Idade: 30\n\n# Chamando a fun√ß√£o passando todos os argumentos\nmostrar_dados_2(\"Jo√£o\", 40)  # Nome: Jo√£o, Idade: 40\n\n# O default deve ser o √∫ltimo par√¢metro a ser definido.\n\nNome: Mariana, Idade: 30\nNome: Jo√£o, Idade: 40\n\n\n\ndef calcular_quadrados(numeros):\n    for numero in numeros:\n        quadrado = numero ** 2\n        print(f\"O quadrado de {numero} √© {quadrado}\")\n\nvalores = [1, 2, 3, 4, 5]\ncalcular_quadrados(valores)\n\nO quadrado de 1 √© 1\nO quadrado de 2 √© 4\nO quadrado de 3 √© 9\nO quadrado de 4 √© 16\nO quadrado de 5 √© 25\n\n\n\n\n1.6.7 Fun√ß√µes An√¥nimas\nFun√ß√µes an√¥nimas s√£o apenas uma forma mais curta de escrever fun√ß√µes normais. Elas tamb√©m s√£o conhecidas como fun√ß√µes lambda. Ao inv√©s de usar def para definir uma fun√ß√£o, as fun√ß√µes an√¥nimas s√£o escritas em uma linha, ideal para tarefas simples. Elas s√£o muito √∫teis quando voc√™ precisa de uma pequena fun√ß√£o que ser√° usada apenas uma vez e n√£o quer se preocupar em dar um nome para ela.\nhttps://www.w3schools.com/python/python_lambda.asp\n\n#Estrutura b√°sica:\n#lambda argumentos: express√£o\n#onde:\n#lambda: A palavra-chave que indica o in√≠cio de uma fun√ß√£o lambda.\n#argumentos: Lista de argumentos separados por v√≠rgulas, semelhante aos argumentos das fun√ß√µes normais. Pode ser um √∫nico argumento, m√∫ltiplos argumentos, ou nenhum.\n#express√£o: Uma express√£o que √© executada e cujo valor √© retornado pela fun√ß√£o lambda. Diferentemente das fun√ß√µes definidas com def, uma fun√ß√£o lambda pode ter apenas uma express√£o.\n\n\n# Fun√ß√£o normal:\n\npreco = int(input('\\nDigite o pre√ßo para o calculo do imposto: '))\n\ndef calcular_imposto(preco):\n    return preco * 0.3\n\nprint(calcular_imposto(preco))\n\n\n# Fun√ß√£o Lambda:\n\npreco = int(input('\\nDigite o pre√ßo para o calculo do imposto: '))\n\ncalcular_imposto = lambda preco: preco * 0.3\n\nprint(calcular_imposto(preco))\n\n\n\n1.6.8 T√©cnicas com Fun√ß√µes\n\n1.6.8.1 Recurs√£o\nDigamos que temos uma s√©rie temporal de vendas di√°rias, e queremos calcular o total acumulado at√© um determinado dia. Uma forma que podemos fazer isso √© montar uma fun√ß√£o recurssiva. De forma simples, n√≥s definimos uma fun√ß√£o que vai se usar novamente dentro de si mesma.\n\ndef acumulado(vendas, n):\n    # Caso base: se o √≠ndice for 0, s√≥ existe um valor a ser somado\n    if n == 0:\n        return vendas[0]\n    # Caso recursivo: soma o valor atual com o acumulado at√© o ponto anterior\n    else:\n        return vendas[n] + acumulado(vendas, n - 1)\n\n# Exemplo de uso\nvendas = [100, 150, 200, 250, 300]\ntotal_acumulado = acumulado(vendas, 4)\nprint(f\"Total acumulado at√© o quinto dia: {total_acumulado}\")\n\nTotal acumulado at√© o quinto dia: 1000\n\n\n\n\n\n1.6.9 Fun√ß√£o como argumento\nJ√° vimos que podemos usar muitas coisas como argumentos para fun√ß√µes, isso incluindo at√© mesmo outras fun√ß√µes. A utilidade disso depende de sua criatividade, mas √© uma ferramenta muito √∫til!\n\ndef aplicar_opera√ß√£o(lista, opera√ß√£o):\n    return [opera√ß√£o(item) for item in lista]\n\n# Fun√ß√µes espec√≠ficas que podemos aplicar\ndef dobrar(x):\n    return x * 2\n\ndef triplicar(x):\n    return x * 3\n\n# Exemplo de uso\nnumeros = [1, 2, 3, 4, 5]\n\nresultado_dobrar = aplicar_opera√ß√£o(numeros, dobrar)\nprint(f\"Dobrando: {resultado_dobrar}\")\n\nresultado_triplicar = aplicar_opera√ß√£o(numeros, triplicar)\nprint(f\"Triplicando: {resultado_triplicar}\")\n\nDobrando: [2, 4, 6, 8, 10]\nTriplicando: [3, 6, 9, 12, 15]",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Introdu√ß√£o ao Python I</span>"
    ]
  },
  {
    "objectID": "aula1-python1.html#recapitulando",
    "href": "aula1-python1.html#recapitulando",
    "title": "1¬† Introdu√ß√£o ao Python I",
    "section": "Recapitulando",
    "text": "Recapitulando\nNesta aula, come√ßamos aprendendo a sintaxe b√°sica do Python, que define como organizar o c√≥digo de forma que o Python possa compreend√™-lo. Exploramos conceitos como vari√°veis e tipos de dados, os quais s√£o os ‚Äútijolinhos‚Äù essenciais para armazenar informa√ß√µes e construir um programa.\nEm seguida, discutimos como podemos brincar com esses tijolinhos usando os operadores aritm√©ticos e l√≥gicos. Eles nos permitem manipular esses dados, realizando c√°lculos e criando express√µes l√≥gicas. Entendemos tamb√©m a ordem de preced√™ncia entre esses operadores, que determina a sequ√™ncia em que as opera√ß√µes s√£o executadas.\nDepois, avan√ßamos para o control flow. Aprendemos a tomar decis√µes no c√≥digo usando estruturas condicionais (if, elif, else) e a repetir a√ß√µes automaticamente com os loops (for e while). Tamb√©m vimos como controlar a execu√ß√£o dos loops com break e continue.\nPor fim, abordamos o conceito de fun√ß√µes. Vimos como criar fun√ß√µes utilizando def e como utilizar fun√ß√µes an√¥nimas (lambda). Entendendo como s√£o, essencialmente, o mesmo, mas igualmente importantes.\nEsses conceitos, desde a sintaxe b√°sica at√© a cria√ß√£o de fun√ß√µes e controle de fluxo, formam a base do Python e s√£o fundamentais para que possamos prosseguir e escrever programas organizados.",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Introdu√ß√£o ao Python I</span>"
    ]
  },
  {
    "objectID": "aula1-python1.html#extras",
    "href": "aula1-python1.html#extras",
    "title": "1¬† Introdu√ß√£o ao Python I",
    "section": "1.7 Extras",
    "text": "1.7 Extras\n\n\n\n1.7.1 Erros/Exce√ß√µes\n\n1.7.1.0.1 Tipos de exce√ß√µes\nRefer√™ncia: https://docs.python.org/3/library/warnings.html, https://www.tutorialsteacher.com/python/error-types-in-python\nExistem v√°rios motivos diferentes para um script n√£o rodar, √© importante saber os mais comuns para ajudar na hora de investigar o que est√° de errado com um c√≥digo.\n\nErro de sintaxe: SyntaxError, IndentationError, TabError\nErro de falta de mem√≥ria: MemoryError, OverflowError\nErro de refer√™ncia: IndexError, KeyError, NameError\nErro de opera√ß√£o: ZeroDivisionError, TypeError\nErro de l√≥gica: o python realiza o c√≥digo, mas n√£o faz o que voc√™ queria que ele fizesse\nExce√ß√µes: ‚Äúo python sabe o que fazer com o c√≥digo mas n√£o consegue realizar a a√ß√£o quista‚Äù\nAvisos: n√£o interrompem o c√≥digo, mas indicam que algo pode estar errado\n\n\n\n1.7.1.0.2 Como lidar com exce√ß√µes?\nRefer√™ncia: https://www.w3schools.com/python/python_try_except.asp\nAvisar ao utilizador do c√≥digo que houve algum erro espec√≠fico:\n\ntry:\n    juros = int(input(\"Qual a taxa de juros desejada? \"))\n    print(\"A taxa escolhida foi {0}%.\".format(juros))\nexcept:\n    print(\"A taxa de juros deve ser um n√∫mero\")\n\nA taxa de juros deve ser um n√∫mero\n\n\nEm um loop, indicar que um dos itens n√£o funcionou, mas realizar a opera√ß√£o para o resto dos itens:\n\nimport requests\n\npaginas = []\nurlList = ['https://finance.yahoo.com/quote/PETR4.SA', 'urlquebrado.com', 'https://finance.yahoo.com/quote/VALE3.SA']\n\nfor url in urlList:\n    try:\n        request = requests.get(url)\n        result = f\"result - {url}\" #algo com os dados da p√°gina\n        paginas.append(result)\n    except:\n        paginas.append(\"NA\")\n        print(f\"A p√°gina {url} n√£o pode ser lida\")\n\npaginas\n\nA p√°gina urlquebrado.com n√£o pode ser lida\n\n\n['result - https://finance.yahoo.com/quote/PETR4.SA',\n 'NA',\n 'result - https://finance.yahoo.com/quote/VALE3.SA']",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Introdu√ß√£o ao Python I</span>"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "GVCode Trainee",
    "section": "",
    "text": "Bem Vindos!\nEste √© o material do curso de Trainee da GVCode. Cada cap√≠tulo est√° associado a uma aula presencial.\nEsse material foi 100% escrito pelos veteranos da entidade, e est√° sendo otimizado desde 2020! Ao final, temos algumas das bibliografias utilizadas em sua confec√ß√£o.",
    "crumbs": [
      "Bem Vindos!"
    ]
  },
  {
    "objectID": "index.html#aulas",
    "href": "index.html#aulas",
    "title": "GVCode Trainee",
    "section": "Aulas",
    "text": "Aulas\nIntrodu√ß√£o ao Python I (30/set a 4/out)\n\nO que √© um script; sintaxe; vari√°veis; tipos de dados.\nOperadores; control flow; fun√ß√µes.\nExtra: *args; condi√ß√µes (try except).\n\nIntrodu√ß√£o ao Python II (7/out a 11/out)\n\nPrograma√ß√£o orientada ao objeto.\nCole√ß√µes (list, dict, tuple, set); subsetting e m√©todos.\nIter√°veis loops, comprehension, e enumerate, filter, zip, e map.\nExtra: fun√ß√µes √∫teis, f-strings\n\nIntrodu√ß√£o ao Python III (14/out a 18/out)\n\nNumpy: arrays e vetoriza√ß√£o; opera√ß√µes e subsetting.\nPandas: dataframes; opera√ß√µes.\nExtra: t√≥picos avan√ßados em Numpy e Pandas.\n\nCi√™ncia de Dados: Manipula√ß√£o (21/out a 25/out)\n\nIntrodu√ß√£o √† ci√™ncia de dados; o que √© processamento de dados.\nComo arrumar dados com Pandas.\n\nCi√™ncia de Dados: Visualiza√ß√£o (28/out a 1/nov)\n\nO que √© visualiza√ß√£o de dados.\nSumariza√ß√£o com Pandas; Gr√°ficos com o Matplotlib.\nExtra: seaborn e outras bibliotecas; gr√°ficos avan√ßados.\n\nCi√™ncia de Dados: Modelagem (4/nov a 8/nov)\n\nO que √© modelagem de dados.\nAula te√≥rica sobre modelos de machine learning.\n\nCi√™ncia de Dados: Projetos (11/nov a 15/nov)\n\nEtapas e exemplo de um script de ci√™ncia de dados.\nFun√ß√µes de modelagem.\nExtra: apresentar trabalho.\n\nOutros Temas em Programa√ß√£o (18/nov a 22/nov)\n\nGit e Github.\nBoas pr√°ticas de programa√ß√£o (python‚Äôs pep8).\nExtra: regex; web scrapping.",
    "crumbs": [
      "Bem Vindos!"
    ]
  }
]