[
  {
    "objectID": "aula1-python1.html",
    "href": "aula1-python1.html",
    "title": "1¬† Introdu√ß√£o ao Python I",
    "section": "",
    "text": "Introdu√ß√£o\nNesta aula, vamos aprender desde o b√°sico, sintaxe, tomada de decis√µes, repeti√ß√£o de a√ß√µes, e estruturar melhor nossos programas, para que eles possam lidar com diferentes situa√ß√µes de forma din√¢mica.",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Introdu√ß√£o ao Python I</span>"
    ]
  },
  {
    "objectID": "aula1-python1.html#introdu√ß√£o",
    "href": "aula1-python1.html#introdu√ß√£o",
    "title": "1¬† Introdu√ß√£o ao Python I",
    "section": "",
    "text": "Sintaxe e Scripts B√°sicos\nTipos de Dados em Python\nOperadores em Python\nControle de Fluxo\nFun√ß√µes\nTratamento de Erros",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Introdu√ß√£o ao Python I</span>"
    ]
  },
  {
    "objectID": "aula1-python1.html#porque-python",
    "href": "aula1-python1.html#porque-python",
    "title": "1¬† Introdu√ß√£o ao Python I",
    "section": "1.1 Porque Python?",
    "text": "1.1 Porque Python?\nPython √© uma linguagem de programa√ß√£o f√°cil de aprender, com uma sintaxe clara e intuitiva, ideal para iniciantes. √â amplamente utilizada em diversas √°reas, como ci√™ncia de dados, desenvolvimento web e automa√ß√£o, tornando-se uma ferramenta vers√°til e pr√°tica.",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Introdu√ß√£o ao Python I</span>"
    ]
  },
  {
    "objectID": "aula1-python1.html#sintaxe",
    "href": "aula1-python1.html#sintaxe",
    "title": "1¬† Introdu√ß√£o ao Python I",
    "section": "1.2 Sintaxe",
    "text": "1.2 Sintaxe\n\n\n1.2.1 Scripts\nUm script √© um arquivo de texto com instru√ß√µes a serem executadas por um computador que antes traduzir√° o arquivo para linguagem de m√°quina.\nUm script √© um texto instrucional como qualquer outro, escrito em um tipo de linguagem especial, ‚Äúde programa√ß√£o‚Äù, ou ‚Äúc√≥digo‚Äù, mas √© um texto, quase como uma receita de bolo de cenoura.\nComo em qualquer linguagem, temos um vocabul√°rio √† disposi√ß√£o, um conjunto de palavras (ou tokens) existentes, organizadas em categorias como substantivos, adjetivos, etc. N√≥s combinamos as palavras em frases (ou statements) para descrever as instru√ß√µes. Por fim, organizamos o texto em par√°grafos (ou blocks), conjuntos de frases que devem ser lidas juntas, para definir a estrutura e facilitar o entendimento do texto.\n\n\n\n1.2.2 Sintaxe B√°sica\nA sintaxe dentro do Python √© muito semelhante com a linguagem humana. O programa ‚Äúl√™‚Äù de cima para baixo, da esqueda para a direita de forma sequencial!\nNote ao longo dos programas: espa√ßos, quebras de linha, tabs, coment√°rios‚Ä¶\n\n#Vamos fazer essa soma!\n\nsoma = 2 + 2 # soma bem facil...\nsoma2=2+2\n\nprint(soma, soma2)\n\n4 4",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Introdu√ß√£o ao Python I</span>"
    ]
  },
  {
    "objectID": "aula1-python1.html#vari√°veis",
    "href": "aula1-python1.html#vari√°veis",
    "title": "1¬† Introdu√ß√£o ao Python I",
    "section": "1.3 Vari√°veis",
    "text": "1.3 Vari√°veis\n\nAs vari√°veis no python s√£o bem parecidas com as vari√°veis da matem√°tica. Serve como caixinhas que carregam algo dentro e, sempre que o programa ler ela, entender√° o seu conte√∫do.\nx = \"julia\"  #toda vez que o programa ler x, ler√° a string julia\ny = 5        #toda vez que o programa ler y, ler√° o n√∫mero inteiro 5\nz = 2.5      #toda vez que o programa ler z, ler√° o n√∫mero float 2,5\nVari√°veis s√£o um nome, associado √† um valor, que mora na mem√≥ria do computador.\nTenha em mente ao nomear uma vari√°vel que: - N√£o se pode usar os termos reservados;\n\nNomes de vari√°veis podem conter apenas letras, n√∫meros e underscores(_). Podem come√ßar com uma letra ou um underscore, mas n√£o com um n√∫mero;\nEspa√ßos n√£o s√£o permitidos em nomes de vari√°veis (usa-se underscores para separa as palavras);\nDicas: nomes de vari√°veis devem ser concisos, por√©m descritivos.\n\nNa pr√°tica, quando escrevemos essas var√≠aveis, n√∫meros e strings em c√©lulas de c√≥digo, observamos diferentes cores que indicam o que o python est√° enxergando.\nTermos reservados s√£o termos que j√° possuem um ‚Äúsignificado‚Äù para o Python, ent√£o n√£o podemos usa-los como vari√°veis.",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Introdu√ß√£o ao Python I</span>"
    ]
  },
  {
    "objectID": "aula1-python1.html#tipos-de-dados",
    "href": "aula1-python1.html#tipos-de-dados",
    "title": "1¬† Introdu√ß√£o ao Python I",
    "section": "1.4 Tipos de Dados",
    "text": "1.4 Tipos de Dados\nTipos de dados s√£o os ‚Äútijolinhos‚Äù b√°sicos que formam nossos programas. Eles representam os diferentes tipos de informa√ß√µes que podemos armazenar e manipular, como textos, n√∫meros e valores l√≥gicos. Cada tipo de dado √© salvo de uma forma espec√≠fica na mem√≥ria, permitindo que realizemos opera√ß√µes adequadas para cada tipo.\nNesta aula, vamos explorar os principais tipos de dados em Python. Para se aprofundar mais: https://docs.python.org/3/library/datatypes.html\n\n\n\n\n\n1.4.1 String\nUma string √© um ‚Äúdesenho‚Äù, onde o programa n√£o enxerga nenhum valor num√©rico mas consegue diferir os ‚Äúdesenhos‚Äù entre si. Seu s√≠mbolo √© ‚Äô ‚Äô ou ‚Äù ‚Äú, indicando ao programa que √© uma string. Um n√∫mero pode ter valor num√©rico (int ou float por exemplo) ou n√£o (str).\nObs: o python √© uma linguagem extremamente sens√≠vel, ent√£o a string ‚Äújulia‚Äù e a string ‚ÄúJulia‚Äù n√£o s√£o iguais para ele.\n\"Julia\"\n\"luana\"\n\"123456\"\nUma ferramenta que voc√™s usar√£o e que ‚Äúrespiram‚Äù strings √© o len().\n‚ÄúLen‚Äù √© a brevia√ß√£o para a palavra Length, ou seja, comprimento, e √© exatamente o que ele mede: essa fun√ß√£o retorna o n√∫mero de caract√©res de uma string.\nObs: os ESPA√áOS contam como caracteres.\nlen(\"julia cruz\") --&gt; retorna o n√∫mero 10 (um inteiro)\n\n\n1.4.2 Inteiro\nOs inteiros s√£o n√∫meros que n√£o s√£o strings e n√£o possuem valor depois da v√≠gula, ou seja, s√£o n√∫meros inteiros :D. Usados em express√µes matem√°ticas para contas.\n5\n6\n12\n1000\n\n\n1.4.3 Float\nS√£o semelhantes aos n√∫meros inteiros por√©m considera e demanda valores depois da v√≠rgula, mesmo que seja 0. Se misturam com os inteiros em equa√ß√µes matem√°ticas.\n1.0\n2.3\n45.002\n1000.0\n\n\n1.4.4 Booleano\nUm valor booleano √© um tipo de dado que pode representar apenas dois estados distintos: verdadeiro ou falso. √â fundamental em muitos aspectos da programa√ß√£o e da l√≥gica, pois permite tomar decis√µes com base em condi√ß√µes.\nverdadeiro = True\nfalso = False",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Introdu√ß√£o ao Python I</span>"
    ]
  },
  {
    "objectID": "aula1-python1.html#operadores",
    "href": "aula1-python1.html#operadores",
    "title": "1¬† Introdu√ß√£o ao Python I",
    "section": "1.5 Operadores",
    "text": "1.5 Operadores\nS√£o s√≠mbolos que nos permitem realizar opera√ß√µes sobre vari√°veis e valores. Eles s√£o fundamentais para a constru√ß√£o de express√µes em Python, ajudando a manipular dados, fazer c√°lculos e tomar decis√µes.\nMaterial base e aprofundamento: https://docs.python.org/3/library/operator.html  \n\n\n1.5.1 Operadores Aritim√©ticos\nOs operadores aritm√©ticos s√£o usados para realizar opera√ß√µes matem√°ticas entre operandos.\n\n\n\n\nimage.png\n\n\n\nprint(2+2)\n\n4\n\n\n\nprint(2*5 - 7)\n\n3\n\n\n\nprint(4%2)\n\n0\n\n\n\nprint(3%2)\n\n1\n\n\n\ndivisao_inteira = 10 // 6\nprint(divisao_inteira, 10/6)\n\n1 1.6666666666666667\n\n\n\n1.5.1.1 Ordem de Preced√™ncia\n\n# Parenteses\nexpressao_1 = ((2 + 5) * 3)\nprint(expressao_1)\n\nexpressao_2 = (2 + 5 * 3)\nprint(expressao_2)\n\nexpressao_3 = (1 + 5 ** 2)\nprint(expressao_3)\n\n21\n17\n26\n\n\n\nprint(((2*3)**3)/7)\n\n30.857142857142858\n\n\n\n\n\n1.5.2 Operadores l√≥gicos\nOs operadores l√≥gicos s√£o usados alguma rela√ß√£o entre operandos. Quando utilizados, eles retornam valores booleanos (True ou False).\n\n\n\n\n\n\n\n\n\n1.5.3 Operadores de Atribui√ß√£o\nOs operadores de atribui√ß√£o s√£o usados para atibuir valores a vari√°veis\n\n\n\nnumero = 5\nnumero += 1\nprint(numero)\n\n6\n\n\n\nnumero = 3\nnumero -= 1\nprint(numero)\n\n2\n\n\n\nnumero = 7\nnumero *= 5\nprint(numero)\n\n35\n\n\n\nnumero = 9\nnumero /= 5\nprint(numero)\n\n1.8\n\n\n\nnumero = 5\nnumero %= 2\nprint(numero)\n\n1\n\n\n\n\n\n\n\nüòé",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Introdu√ß√£o ao Python I</span>"
    ]
  },
  {
    "objectID": "aula1-python1.html#control-flow",
    "href": "aula1-python1.html#control-flow",
    "title": "1¬† Introdu√ß√£o ao Python I",
    "section": "1.6 Control Flow",
    "text": "1.6 Control Flow\nBasicamente, control flow √© sobre como o programa decide qual parte do c√≥digo executar e quando. Essas ferramentas permitem que o c√≥digo se adapte a diferentes situa√ß√µes, tome decis√µes e realize a√ß√µes repetitivas, dependendo dos valores e condi√ß√µes presentes no programa.\nPara se aprofundar: https://docs.python.org/3/tutorial/controlflow.html\n\n1.6.1 Condicionais\nCondicionais s√£o estruturas usadas para tomar decis√µes dentro de um programa. Elas permitem que o c√≥digo execute diferentes blocos de instru√ß√µes dependendo de condi√ß√µes espec√≠ficas. Assim, com condicionais, √© poss√≠vel direcionar o fluxo do programa com base em crit√©rios, como valores de vari√°veis, facilitando a cria√ß√£o de comportamentos din√¢micos e adaptativos.\n\n1.6.1.1 if\nA estrutura if √© usada para verificar se uma condi√ß√£o √© verdadeira e, caso seja, executar um bloco de c√≥digo espec√≠fico. Ela √© a base das decis√µes em um programa, permitindo que diferentes a√ß√µes aconte√ßamm dependendo do valor de uma condi√ß√£o. Se a condi√ß√£o for verdadeira, o c√≥digo dentro do if ser√° executado; caso contr√°rio, ser√° ignorado.\n\n\n1.6.1.2 if else\nA estrutura if else √© usada quando h√° a necessidade de definir duas a√ß√µes diferentes: uma a ser executada se a condi√ß√£o for verdadeira (if) e outra se essa condi√ß√£o for falsa (else). Dessa forma, ela garante que um dos dois blocos de c√≥digo ser√° executado, cobrindo todas as possibilidades de resultado da condi√ß√£o.\n\n\n1.6.1.3 if elif else\nA estrutura if elif else √© usada quando h√° mais de duas possibilidades para a condi√ß√£o. Primeiro, o if verifica a condi√ß√£o inicial. Caso ela seja falsa, o elif (abrevia√ß√£o de ‚Äúelse if‚Äù) verifica uma nova condi√ß√£o, e isso pode se repetir quantas vezes for necess√°rio. Por fim, o else cobre o caso em que nenhuma das condi√ß√µes anteriores √© satisfeita. Essa estrutura permite criar m√∫ltiplos caminhos de decis√£o dentro do c√≥digo.\n\n\n\n1.6.2 Loops\nLoops s√£o estruturas usadas para repetir um bloco de c√≥digo v√°rias vezes, facilitando a automa√ß√£o de tarefas repetitivas. Eles s√£o √∫teis quando se deseja realizar uma mesma opera√ß√£o v√°rias vezes, seja sobre uma cole√ß√£o de itens ou at√© que uma determinada condi√ß√£o seja atendida. Com loops, √© poss√≠vel escrever um c√≥digo de forma mais concisa e eficiente, evitando a repeti√ß√£o manual de instru√ß√µes.\n\n1.6.2.1 while\nA estrutura while repete um bloco de c√≥digo enquanto uma condi√ß√£o for verdadeira. Ela √© √∫til quando n√£o se sabe exatamente quantas vezes o bloco do c√≥digo precisar√° ser executado, mas sim at√© que uma determinada condi√ß√£o seja atendida. Assim que a condi√ß√£o se tornar falsa, o loop √© interrompido.\n\n\n1.6.2.2 for\nA estrutura for √© usada para repetir um bloco de c√≥digo um n√∫mero espec√≠fico de vezes. Geralmente, √© usada quando j√° se sabe quantas vezes o bloco de c√≥digo deve ser executado. No contexto inicial, sem listas, o for pode ser usado para repetir a√ß√µes com base em um intervalo definido, permitindo automatizar processos repetitivos de maneira simples.\n\n\n\n1.6.3 Keywords\n\n1.6.3.1 break\nA instru√ß√£o break √© usada para interromper um loop antes de ele ser conclu√≠do. Quando o break √© executado, o loop √© finalizado imediatamente, e o programa segue para a pr√≥xima instru√ß√£o. Essa instru√ß√£o √© √∫til quando se deseja parar a repeti√ß√£o ao atender a uma condi√ß√£o espec√≠fica, mesmo que o loop ainda n√£o tenha terminado seu ciclo completo.\n\n\n1.6.3.2 continue\nA instru√ß√£o continue √© usada para pular a itera√ß√£o atual de um loop e avan√ßar para a pr√≥xima itera√ß√£o. Quando continue √© executado, o loop n√£o finaliza, mas simplesmente ignora o restante do bloco de c√≥digo daquela itera√ß√£o e volta para o in√≠cio, verificando a condi√ß√£o novamente ou avan√ßando para o pr√≥ximo item. Isso √© √∫til para evitar executar parte do c√≥digo do loop em condi√ß√µes espec√≠ficas.\n\n\n\n1.6.4 Indo pra pr√°tica‚Ä¶\n\n1.6.4.1 If elif else\n\nhora = 7 \n\nif hora &gt;= 6:\n    print(\"Hora de acordar!\")\nif hora &lt; 6:\n    print(\"Pode dormir mais um pouco.\")\n\nHora de acordar!\n\n\n\ndinheiro = 30\npre√ßo = 25\n\nif dinheiro &gt;= pre√ßo:\n    print(\"Voc√™ pode comprar o produto!\")\nif dinheiro &lt; pre√ßo:\n    print(\"Voc√™ n√£o tem dinheiro suficiente para comprar o produto.\")\n\nVoc√™ pode comprar o produto!\n\n\n\ntemperatura = 80\n\nif temperatura &gt;= 100:\n    print(\"A √°gua est√° fervendo!\")\nif temperatura &lt; 100:\n    print(\"A √°gua n√£o est√° fervendo ainda.\")\n\nA √°gua n√£o est√° fervendo ainda.\n\n\nExemplos que vou mostrar (vou tirar essa se√ß√£o depois, est√° nos coment√°rios)\n\n\n\n\n\n1.6.5 Sintaxe e Defini√ß√£o\n\n\n1.6.6 Argumentos\nArgumentos s√£o valores fornecidos a fun√ß√µes para que elas possam trabalhar com dados espec√≠ficos. Existem tr√™s tipos principais:\n\nArgumentos Posicionais: S√£o passados para a fun√ß√£o na ordem em que s√£o definidos, e essa ordem determina qual par√¢metro ser√° preenchido.\nArgumentos Padr√£o: S√£o valores definidos como padr√£o (default) na fun√ß√£o. Se um valor n√£o for passado ao chamar a fun√ß√£o, o valor padr√£o ser√° usado.\n\n\n\ndef mostrar_dados(idade, nome):\n    print(f\"Nome: {nome}, Idade: {idade}\")\n\n# Posicional\nmostrar_dados(20, \"Aldo\")\n\nNome: Aldo, Idade: 20\n\n\n\ndef funcao_exemplo(fun√ß√£o):\n    fun√ß√£o()\n\ndef dizer_ola():\n    print(\"Ol√°!\")\n\n# Posicional\nfuncao_exemplo(dizer_ola)\n\nOl√°!\n\n\n\ndef saudar(nome, saudacao):\n    print(f\"{saudacao}, {nome}!\")\n\n# Usando argumentos nomeados\nsaudar(nome=\"Vitor\", saudacao=\"Bom dia\")\nsaudar(saudacao=\"Boa tarde\", nome=\"Ana\")  # Aqui a ordem foi invertida, mas podemos identificar os argumentos pelo nome\n\nBom dia, Vitor!\nBoa tarde, Ana!\n\n\n\ndef mostrar_dados_2(nome, idade=30):\n    print(f\"Nome: {nome}, Idade: {idade}\")\n\n# Chamando a fun√ß√£o sem passar o valor para o argumento 'idade', o valor padr√£o ser√° utilizado\nmostrar_dados_2(\"Mariana\")  # Nome: Mariana, Idade: 30\n\n# Chamando a fun√ß√£o passando todos os argumentos\nmostrar_dados_2(\"Jo√£o\", 40)  # Nome: Jo√£o, Idade: 40\n\n# O default deve ser o √∫ltimo par√¢metro a ser definido.\n\nNome: Mariana, Idade: 30\nNome: Jo√£o, Idade: 40\n\n\n\ndef calcular_quadrados(numeros):\n    for numero in numeros:\n        quadrado = numero ** 2\n        print(f\"O quadrado de {numero} √© {quadrado}\")\n\nvalores = [1, 2, 3, 4, 5]\ncalcular_quadrados(valores)\n\nO quadrado de 1 √© 1\nO quadrado de 2 √© 4\nO quadrado de 3 √© 9\nO quadrado de 4 √© 16\nO quadrado de 5 √© 25\n\n\n\n\n1.6.7 Fun√ß√µes An√¥nimas\nFun√ß√µes an√¥nimas s√£o apenas uma forma mais curta de escrever fun√ß√µes normais. Elas tamb√©m s√£o conhecidas como fun√ß√µes lambda. Ao inv√©s de usar def para definir uma fun√ß√£o, as fun√ß√µes an√¥nimas s√£o escritas em uma linha, ideal para tarefas simples. Elas s√£o muito √∫teis quando voc√™ precisa de uma pequena fun√ß√£o que ser√° usada apenas uma vez e n√£o quer se preocupar em dar um nome para ela.\nhttps://www.w3schools.com/python/python_lambda.asp\n\n#Estrutura b√°sica:\n#lambda argumentos: express√£o\n#onde:\n#lambda: A palavra-chave que indica o in√≠cio de uma fun√ß√£o lambda.\n#argumentos: Lista de argumentos separados por v√≠rgulas, semelhante aos argumentos das fun√ß√µes normais. Pode ser um √∫nico argumento, m√∫ltiplos argumentos, ou nenhum.\n#express√£o: Uma express√£o que √© executada e cujo valor √© retornado pela fun√ß√£o lambda. Diferentemente das fun√ß√µes definidas com def, uma fun√ß√£o lambda pode ter apenas uma express√£o.\n\n\n# Fun√ß√£o normal:\n\npreco = int(input('\\nDigite o pre√ßo para o calculo do imposto: '))\n\ndef calcular_imposto(preco):\n    return preco * 0.3\n\nprint(calcular_imposto(preco))\n\n\n# Fun√ß√£o Lambda:\n\npreco = int(input('\\nDigite o pre√ßo para o calculo do imposto: '))\n\ncalcular_imposto = lambda preco: preco * 0.3\n\nprint(calcular_imposto(preco))\n\n\n\n1.6.8 T√©cnicas com Fun√ß√µes\n\n1.6.8.1 Recurs√£o\nDigamos que temos uma s√©rie temporal de vendas di√°rias, e queremos calcular o total acumulado at√© um determinado dia. Uma forma que podemos fazer isso √© montar uma fun√ß√£o recurssiva. De forma simples, n√≥s definimos uma fun√ß√£o que vai se usar novamente dentro de si mesma.\n\ndef acumulado(vendas, n):\n    # Caso base: se o √≠ndice for 0, s√≥ existe um valor a ser somado\n    if n == 0:\n        return vendas[0]\n    # Caso recursivo: soma o valor atual com o acumulado at√© o ponto anterior\n    else:\n        return vendas[n] + acumulado(vendas, n - 1)\n\n# Exemplo de uso\nvendas = [100, 150, 200, 250, 300]\ntotal_acumulado = acumulado(vendas, 4)\nprint(f\"Total acumulado at√© o quinto dia: {total_acumulado}\")\n\nTotal acumulado at√© o quinto dia: 1000\n\n\n\n\n\n1.6.9 Fun√ß√£o como argumento\nJ√° vimos que podemos usar muitas coisas como argumentos para fun√ß√µes, isso incluindo at√© mesmo outras fun√ß√µes. A utilidade disso depende de sua criatividade, mas √© uma ferramenta muito √∫til!\n\ndef aplicar_opera√ß√£o(lista, opera√ß√£o):\n    return [opera√ß√£o(item) for item in lista]\n\n# Fun√ß√µes espec√≠ficas que podemos aplicar\ndef dobrar(x):\n    return x * 2\n\ndef triplicar(x):\n    return x * 3\n\n# Exemplo de uso\nnumeros = [1, 2, 3, 4, 5]\n\nresultado_dobrar = aplicar_opera√ß√£o(numeros, dobrar)\nprint(f\"Dobrando: {resultado_dobrar}\")\n\nresultado_triplicar = aplicar_opera√ß√£o(numeros, triplicar)\nprint(f\"Triplicando: {resultado_triplicar}\")\n\nDobrando: [2, 4, 6, 8, 10]\nTriplicando: [3, 6, 9, 12, 15]",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Introdu√ß√£o ao Python I</span>"
    ]
  },
  {
    "objectID": "aula1-python1.html#recapitulando",
    "href": "aula1-python1.html#recapitulando",
    "title": "1¬† Introdu√ß√£o ao Python I",
    "section": "Recapitulando",
    "text": "Recapitulando\nNesta aula, come√ßamos aprendendo a sintaxe b√°sica do Python, que define como organizar o c√≥digo de forma que o Python possa compreend√™-lo. Exploramos conceitos como vari√°veis e tipos de dados, os quais s√£o os ‚Äútijolinhos‚Äù essenciais para armazenar informa√ß√µes e construir um programa.\nEm seguida, discutimos como podemos brincar com esses tijolinhos usando os operadores aritm√©ticos e l√≥gicos. Eles nos permitem manipular esses dados, realizando c√°lculos e criando express√µes l√≥gicas. Entendemos tamb√©m a ordem de preced√™ncia entre esses operadores, que determina a sequ√™ncia em que as opera√ß√µes s√£o executadas.\nDepois, avan√ßamos para o control flow. Aprendemos a tomar decis√µes no c√≥digo usando estruturas condicionais (if, elif, else) e a repetir a√ß√µes automaticamente com os loops (for e while). Tamb√©m vimos como controlar a execu√ß√£o dos loops com break e continue.\nPor fim, abordamos o conceito de fun√ß√µes. Vimos como criar fun√ß√µes utilizando def e como utilizar fun√ß√µes an√¥nimas (lambda). Entendendo como s√£o, essencialmente, o mesmo, mas igualmente importantes.\nEsses conceitos, desde a sintaxe b√°sica at√© a cria√ß√£o de fun√ß√µes e controle de fluxo, formam a base do Python e s√£o fundamentais para que possamos prosseguir e escrever programas organizados.",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Introdu√ß√£o ao Python I</span>"
    ]
  },
  {
    "objectID": "aula1-python1.html#extras",
    "href": "aula1-python1.html#extras",
    "title": "1¬† Introdu√ß√£o ao Python I",
    "section": "1.7 Extras",
    "text": "1.7 Extras\n\n\n\n1.7.1 Erros/Exce√ß√µes\n\n1.7.1.0.1 Tipos de exce√ß√µes\nRefer√™ncia: https://docs.python.org/3/library/warnings.html, https://www.tutorialsteacher.com/python/error-types-in-python\nExistem v√°rios motivos diferentes para um script n√£o rodar, √© importante saber os mais comuns para ajudar na hora de investigar o que est√° de errado com um c√≥digo.\n\nErro de sintaxe: SyntaxError, IndentationError, TabError\nErro de falta de mem√≥ria: MemoryError, OverflowError\nErro de refer√™ncia: IndexError, KeyError, NameError\nErro de opera√ß√£o: ZeroDivisionError, TypeError\nErro de l√≥gica: o python realiza o c√≥digo, mas n√£o faz o que voc√™ queria que ele fizesse\nExce√ß√µes: ‚Äúo python sabe o que fazer com o c√≥digo mas n√£o consegue realizar a a√ß√£o quista‚Äù\nAvisos: n√£o interrompem o c√≥digo, mas indicam que algo pode estar errado\n\n\n\n1.7.1.0.2 Como lidar com exce√ß√µes?\nRefer√™ncia: https://www.w3schools.com/python/python_try_except.asp\nAvisar ao utilizador do c√≥digo que houve algum erro espec√≠fico:\n\ntry:\n    juros = int(input(\"Qual a taxa de juros desejada? \"))\n    print(\"A taxa escolhida foi {0}%.\".format(juros))\nexcept:\n    print(\"A taxa de juros deve ser um n√∫mero\")\n\nA taxa de juros deve ser um n√∫mero\n\n\nEm um loop, indicar que um dos itens n√£o funcionou, mas realizar a opera√ß√£o para o resto dos itens:\n\nimport requests\n\npaginas = []\nurlList = ['https://finance.yahoo.com/quote/PETR4.SA', 'urlquebrado.com', 'https://finance.yahoo.com/quote/VALE3.SA']\n\nfor url in urlList:\n    try:\n        request = requests.get(url)\n        result = f\"result - {url}\" #algo com os dados da p√°gina\n        paginas.append(result)\n    except:\n        paginas.append(\"NA\")\n        print(f\"A p√°gina {url} n√£o pode ser lida\")\n\npaginas\n\nA p√°gina urlquebrado.com n√£o pode ser lida\n\n\n['result - https://finance.yahoo.com/quote/PETR4.SA',\n 'NA',\n 'result - https://finance.yahoo.com/quote/VALE3.SA']",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Introdu√ß√£o ao Python I</span>"
    ]
  },
  {
    "objectID": "aula2-python2.html",
    "href": "aula2-python2.html",
    "title": "2¬† Introdu√ß√£o ao Python II",
    "section": "",
    "text": "Introdu√ß√£o\nEsta aula aborda mais alguns conceitos b√°sicos de python:",
    "crumbs": [
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Introdu√ß√£o ao Python II</span>"
    ]
  },
  {
    "objectID": "aula2-python2.html#introdu√ß√£o",
    "href": "aula2-python2.html#introdu√ß√£o",
    "title": "2¬† Introdu√ß√£o ao Python II",
    "section": "",
    "text": "OOP: O que √©? E como funciona?\nCole√ß√µes: Quais os tipos?\nVari√°veis: Como aplic√°-las?",
    "crumbs": [
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Introdu√ß√£o ao Python II</span>"
    ]
  },
  {
    "objectID": "aula2-python2.html#oop-o-que-√©-e-como-funciona",
    "href": "aula2-python2.html#oop-o-que-√©-e-como-funciona",
    "title": "2¬† Introdu√ß√£o ao Python II",
    "section": "2.1 OOP: O que √©? E como funciona?",
    "text": "2.1 OOP: O que √©? E como funciona?\n\nO Objeto como foco de estudo\n\n\n\nCome√ßamos com uma apresenta√ß√£o.\nO objetivo de criar uma fun√ß√£o era dar um nome √† uma opera√ß√£o espec√≠fica, para que n√£o seja necess√°rio escrever essa opera√ß√£o por extenso toda vez que se precise realiz√°-la. Al√©m disso, fica muito mais f√°cil fazer manuten√ß√£o no c√≥digo se existe um erro nessa opera√ß√£o.\nAs classes seguem um objetivo similar, mas servem para dar nome a uma estrutura de dados.\n\n2.1.1 Objetos, Classes e M√©todos\nQuais os elementos da OOP?\n\nObjeto (object) √© uma entidade que possui um comportamento espec√≠fico;\nClasse (class) √© uma estrutura que define as caracter√≠sticas e o comportamento dos objetos;\nAtributos ou Propriedades (Attributes ou Properties): S√£o dados ou estados caracter√≠sticos daquela classe. Por exemplo, ‚Äúpre√ßo m√©dio‚Äù, ‚Äúvolume di√°rio‚Äù e ‚Äúticker‚Äù s√£o propriedades da classe stocks (a√ß√µes);\nM√©todos: S√£o as fun√ß√µes que s√£o espec√≠ficos daquela classe, muitas vezes utilizam os pr√≥prios atributos da classe para realizar uma opera√ß√£o. Por exemplo, pode-se criar um m√©todo na classe ‚Äúa√ß√µes‚Äù que mutliplique o pre√ßo m√©dio pelo volume di√°rio para se obter o volume financeiro m√©dio.\n\n\n\n\n\n2.1.2 Sintaxe e Defini√ß√£o\nPara criar uma classe no python, usamos a palavra class, o nome da classe (com a primeira letra em ma√≠sculo, por conven√ß√£o), e ‚Äú()‚Äù, indicando uma a√ß√£o (no caso, criar um objeto da classe): ‚Äúclass algo()‚Äù\nNormalmente, a defini√ß√£o de uma classe come√ßa pelo m√©todo init. ele √© um m√©todo especial, o m√©todo construtor, e indica que todas as linhas subordinadas a ele devem ser executadas quando um objeto daquela classe √© criado. As linhas que est√£o subordinadas ao m√©todo init s√£o aquelas que estabelecem os atributos.\nAl√©m disso, a palavra self √© uma refer√™ncia a todos os atributos de um objeto. Os m√©todos levam como argumento o pr√≥prio objeto em si, ou seja, o m√©todo que tem self como argumento pode acessar e trabalhar com todos os elementos do objeto em si.\nDepois do m√©todo construtor (init), em geral, v√™m os m√©todos ordin√°rios, aqueles que executam a√ß√µes.\n\n#supondo que queremos calcular a m√©dia das notas 1 e 2 pertencentes a um aluno espec√≠fico\n#aqui criamos uma classe e deixamos em aberto os atributos que o 'aluno' deve ter\nclass aluno():\n  #criando os atributos (nome e notas) da classe aluno\n    def __init__(self, nome, nota1, nota2):\n        self.nome = nome\n        self.nota1 = nota1\n        self.nota2 = nota2\n\n  #criando m√©todos para determinar a m√©dia desse aluno\n    def media(self):\n        return (self.nota1 + self.nota2) / 2\n\n\n#damos um nome e notas para calcular a m√©dia dessa pessoa\nmichel = aluno(nome = \"Michel\", nota1 = 7, nota2 = 10)\n#pedimos para o programa exibir o resultado\nprint(michel.nome, michel.media())\n\nMichel 8.5\n\n\n\n#O que √© o `self` que v√≠amos na defini√ß√£o da classe? √â s√≥ um \"placeholder\" para o nome do objeto. Quando criamos um objeto, com um nome, dessa classe, √© como se os m√©todos virassem:\n\ndef __init__(nome, nota1, nota2):\n  michel.nome = nome\n  michel.nota1 = nota1\n  michel.nota2 = nota2\n\ndef media():\n  return (michel.nota1 + michel.nota2) / 2\n\n\n#Exemplo mais elaborado sobre a√ß√µes\n#determinando as caracter√≠sticas/atributos das a√ß√µes que vamos estudar\nclass Stocks():\n    def __init__(self, ticker_name, price_inDolars, volume_inUnits, beta_float,\n                 divDate_string, enterpriseValue_inDolars, price_inList):\n        self.ticker = ticker_name # preenchendo name com o valor referente ao argumento full_name\n        self.price_last = price_inDolars\n        self.volume_last_day = volume_inUnits\n        self.beta = beta_float\n        self.divDate = divDate_string\n        self.enterpriseValue = enterpriseValue_inDolars\n        self.price_hist = price_inList\n        self.portShare = 0# n√£o vem de argumento, sempre uma a√ß√£o come√ßa com esse valor de argumento\n\n    def eatfinVolume(self): # self entra como argumento para que o procedimento possa acessar os atributos e seus valores.\n        return self.price_last * self.volume_last_day\n\n    def addPrice(self, price):\n        self.price_hist.append(price)\n\n    def changeShare(self, newshare):\n        self.portShare = newshare\n\n#Aqui pedimos para o c√≥digo exibir a a√ß√£o e seus atributos\n\n    def printPrice(self):\n        print(\"The stock \" + self.ticker + \" has a last price of \" + str(self.price_last))\n\n    def __str__(self):\n        return \"The stock \" + str(self.ticker) + \" has a last price of \" + str(self.price_last)\n\n\n#Dando valores e nomes aos atributos\npetr = Stocks(ticker_name = \"PETR4.SA\",\n              price_inDolars = 30.13,\n              volume_inUnits = 93824145,\n              beta_float = 1.33,\n              divDate_string = \"Aug 12, 2022\",\n              enterpriseValue_inDolars = 594060000000,\n              price_inList = [29.80, 30.39, 29.44])\n\n#Exibindo os dados encontrados:\nprint(petr.ticker)\n\npetr.eatfinVolume()\n\npetr.printPrice()\n\npetr.price_last = 31.23\nprint(petr.price_last)\n\npetr.nationality = \"Brazil\"\nprint(petr.nationality)\n\nprint(petr)\n\nPETR4.SA\nThe stock PETR4.SA has a last price of 30.13\n31.23\nBrazil\nThe stock PETR4.SA has a last price of 31.23",
    "crumbs": [
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Introdu√ß√£o ao Python II</span>"
    ]
  },
  {
    "objectID": "aula2-python2.html#cole√ß√µes-quais-os-tipos",
    "href": "aula2-python2.html#cole√ß√µes-quais-os-tipos",
    "title": "2¬† Introdu√ß√£o ao Python II",
    "section": "2.2 Cole√ß√µes: Quais os tipos?",
    "text": "2.2 Cole√ß√µes: Quais os tipos?\n\nTransformando v√°rios itens em uma vari√°vel \n\n\n\nQuais os tipos de cole√ß√µes?\n\nListas\nTuplas\nSets\nDicion√°rios\n\nO nome cole√ß√µes vem de ‚Äúconjunto‚Äù de dados, e existem quatro tipos diferentes, que servem para objetivos diferentes, baseados em suas caracter√≠sticas:\n\n\n\n\nOrdenado\nMut√°vel\nDuplicatas\n\n\n\n\nListas\nsim\nsim\nsim\n\n\nTuples\nsim\nn√£o\nsim\n\n\nSets\nn√£o\nn√£o\nn√£o\n\n\nDicion√°rios\nsim\nsim\nn√£o\n\n\n\nEm termos mais simples listas s√£o as mais flex√≠veis e menos espec√≠ficas, tuples s√£o listas imut√°veis, e dicion√°rios s√£o listas nomeadas. Sets, os mais restritivos, funcionam como o conceito de ‚Äúconjunto‚Äù da matem√°tica.\nCada cole√ß√£o tem seus pr√≥prios m√©todos, d√™em uma olhada neles nos tutoriais abaixo:\n\nW3Schools: https://www.w3schools.com/python/python_lists.asp (mais simples e sucinto);\nDocumenta√ß√£o do Python: https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences (mais t√©cnico, mais informa√ß√µes).\n\n\n2.2.1 Listas\nS√£o estruturas de dados que servem para transformar um grupo de itens em uma s√≥ vari√°vel.\n\n2.2.1.1 Sintaxe e Defini√ß√£o\n\nPodemos criar uma lista de duas formas: definindo-a diretamente por meio de ‚Äúnome_qualquer_da_lista = [item1, item2, ‚Ä¶, itemx]‚Äù, s√≥ colocando os itens dentro dos colchetes; ou tamb√©m podemos transformar outros iter√°veis (como bibliotecas e tuplas, que veremos mais tarde) em listas com ‚Äúnome_qualquer_da_nova_lista = list(nome_do_iter√°vel)‚Äù. Simplificando: list = [ ] ou list( )\nPara saber qual o tipo/ classe de algum objeto no c√≥digo, utilizamos ‚Äútype(nome_do_objeto)‚Äù. Por exemplo, ao escrever ‚Äúprint(type(objeto))‚Äù, sendo objeto uma lista, devemos ter como retorno: ‚Äú&lt;class ‚Äòlist‚Äô&gt;‚Äù\n\n\n\n2.2.1.2 Acessar e Alterar\n\nT√©cnicas de indexing [] e [:]\n\n\nPodemos acessar itens espec√≠ficos das listas atribuindo-lhes n√∫meros, de acordo com a ordem que aparecem na lista usando [n√∫mero]. Por exemplo, em lista = [Jo√£o, Pedro, Carlos] podemos selecionar o objeto Jo√£o e exib√≠-lo com print(lista[0]). Seguindo essa l√≥gica, Pedro representa o elemento 1 e Carlos o elemento 2.\nTamb√©m podemos acessar intervalos dentro das listas com [n√∫mero1:n√∫mero2]. Exemplo: em lista = [a,b,c,d,e], podemos acessar e exibir as letras de ‚Äúa‚Äù a ‚Äúd‚Äù com print(lista[0:3])\n\n\nNested lists\n\n\n√â quando temos listas com outras sublistas dentro delas como objetos. lista = [[a,b,c], [1,2,3], [x,y,z]]\nAcessamos as sublistas assim como fazemos para objetos numa lista normal, mas para acessar objetos de dentro das sublistas utilizamos outro m√©todo. Ex: para exibir a letra ‚Äúb‚Äù da primeira sublista no exemplo anterior, temos print(lista[0][1]). Em resumo, apenas adicionamos o n√∫mero referente ao elemento que queremos acessar da sublista ao lado do n√∫mero que representa a sublista.\n\n\n\n2.2.1.3 Adicionar, Unir, e Remover\n\nPara adicionar elementos a uma lista ou unir v√°rias listas, temos diferentes m√©todos:\n\n\nm√©todo APPEND: escrevemos ‚Äúlista.append(item)‚Äù para adicionar um item ao final da lista. ex: lista = [1,2] ‚Äì&gt; lista.append(3) ‚Äì&gt; lista = [1,2,3]\nm√©todo INSERT: escrevemos ‚Äúlista.insert(posi√ß√£o, item)‚Äù para adicionar um item em uma posi√ß√£o espec√≠fica. ex: lista = [a,b,c] ‚Äì&gt; lista.insert(1, x) ‚Äì&gt; lista = [a,x,b,c] elemento x adicionado na posi√ß√£o 1.\nm√©todo EXTEND: escrevemos ‚Äúlista1.extend(lista2)‚Äù para adicionar os elementos da lista2 na lista1. ex: lista1 = [1,2] e lista2 = [3,4] ‚Äì&gt; lista1.extend(lista2) ‚Äì&gt; lista1 = [1,2,3,4]\nm√©todo ‚Äú+‚Äù: escrevemos ‚Äúlista3 = lista1 + lista2‚Äù para criar uma nova lista com os elementos de outras listas. ex: lista1 = [1,2] e lista2 = [3,4] ‚Äì&gt; lista3 = lista1 + lista2 ‚Äì&gt; lista3 = [1,2,3,4]\n\n\nPara remover itens das listas:\n\n\nm√©todo CLEAR: escrevemos list.clear() pra remover todos os elementos da lista, deixando-a vazia.\nm√©todo POP: escrevemos list.pop(n√∫mero_do_item) para remover um item da lista chamando-o pelo seu n√∫mero ou index dentro da lista.\nm√©todo REMOVE: escrevemos list.remove(item) para remover um item da lista chamando-o pelo nome.\nm√©todo DEL: escrevemos del list[n√∫mero_do_item] para remover um item da lista pelo seu index, assim como em pop, por√©m podemos tamb√©m remover um itervalo utilizando del list[index1:index2].\n\n\n\n2.2.1.4 Tamanho, Ordem, e Posi√ß√£o\n\nfun√ß√£o LENGTH: utilizamos len(lista) para saber quantos itens h√° dentro de uma lista. ex: print(len(lista)) ‚Äì&gt; retorno: n√∫mero de itens da lista\nfun√ß√£o SORT: utilizamos lista.sort() para reorganizar uma lista com n√∫meros em ordem crescente\nfun√ß√£o REVERSE: utilizamos lista.reverse() com o mesmo objetivo de sort, mas em ordem decrescente\nfun√ß√£o INDEX: utilizamos lista.index(item) para descobrir o index/ n√∫mero na lista do item\nfun√ß√£o COUNT: utilizamos lista.count(item) para descobrir quantas vezes o mesmo item aparece dentro de uma lista.\nOBSERVA√á√ÉO: lembre-se que para exigir um retorno/ uma resposta do programa √© necess√°rio escrever print, assim como no exemplo dado na fun√ß√£o length, se n√£o o c√≥digo vai apenas fazer altera√ß√µes sem exibir nada!\n\n\n\n2.2.1.5 Comparadores\n\nOPERADOR ‚Äú==‚Äù e ‚Äú!=‚Äù: ‚Äú==‚Äù verifica se duas listas s√£o iguais, tem elementos e quantidades similares. ‚Äú!=‚Äù √© o contr√°rio, verifica se listas s√£o diferentes. Ex: lista1 = [1,2] e lista2 = [1,2] e lista3 = [3,4] ‚Äì&gt; print(lista1 == lista2) e print(lista2 == lista3) ‚Äì&gt; retornos: True e False\nOPERADOR ‚Äú&gt;‚Äù, ‚Äú&gt;=‚Äù, ‚Äú&lt;‚Äù e ‚Äú&lt;=‚Äù: verificam se as listas com n√∫meros s√£o menores, maiores ou iguais. Elas comparam elemento por elemento na ordem que aparecem e n√£o o total, se uma delas tiver mais elementos e tiver elementos iguais a outra, a com mais elementos ser√° considerada a maior. Ex: lista1 = [1,2,4], lista2 = [1,3,2] e lista3 = [1,2,4,5] ‚Äì&gt; print(lista1 &gt; lista2) e print(lista1 &lt; lista3) ‚Äì&gt; retornos: False e True\nOPERADOR ‚ÄúIS‚Äù e ‚ÄúIS NOT‚Äù: verificam se as listas se referem ao mesmo objeto na mem√≥ria ou n√£o. √â complicado e n√£o √© a mesma coisa que ‚Äú==‚Äù e ‚Äú!=‚Äù. Listas com os mesmos elementos n√£o s√£o necessariamente a mesma coisa. EX: lista1 = [1,2] e lista2 = lista1 e lista3 = [1,2] ‚Äì&gt; print(lista1 is lista2) e print(lista1 is lista3) ‚Äì&gt; retornos: True e False\nOPERADOR ‚ÄúIN‚Äù e ‚ÄúNOT IN‚Äù: verificam se um item est√° ou n√£o em uma lista. N√£o √© poss√≠vel comparar listas com elementos de dentro de outra listas, a menos que a lista seja literalmente uma objeto ou sublista de dentro da outra lista. (meio confuso, mas vc vai entender, confia) ex: lista1 = [1,2] e lista2 = [1] ‚Äì&gt; print(1 in lista1) e print(lista2 in lista1) ‚Äì&gt; retornos: True e False\n\n\n\n2.2.1.6 Loops e Comprehension\n\nLoops: fun√ß√µes que criam uma repeti√ß√£o de outros c√≥digos\n\n\nFOR: utilizamos ‚Äúfor‚Äù para iterar (gerar uma repeti√ß√£o) sobre elementos de uma lista. ex: lista = [1, 2, 3, 4] ‚Äì&gt; for item in minha_lista: print(item) ‚Äì&gt; retorno: 1, 2, 3, 4. Neste exemplo, o for vai fazer o c√≥digo repetir o print para cada uma dos itens de dentro da lista.\nWHILE: utilizamos ‚Äúwhile‚Äù para repetir o c√≥digo enquanto uma condi√ß√£o espec√≠fica for verdadeira. ex: contador = 0 ‚Äì&gt; while contador &lt; 5: print(contador) contador += 1 ‚Äì&gt; retorno: 0, 1, 2, 3, 4\nBREAK: utilizamos ‚Äúbreak‚Äù para quebrar um loop\nCONTINUE: utilizamos ‚Äúcontinue‚Äù para pular para outra itera√ß√£o do c√≥digo\n\n\nComprehension: Cria√ß√£o de listas a partir de fun√ß√µes curtas, geralmente com uso de for\n\n\nFOR: (de novo ele?) utilizamos o for para que uma fun√ß√£o se repita e forme os elementos de uma nova lista\nIF: utilizamos if para estabelecer uma condi√ß√£o que deve ser atendida para que o c√≥digo rode\n\n\n\n2.2.1.7 Alguns exemplos:\n\n#Exemplo: Criado listas a partir de []\nlista = [1, 2, 5] # definindo a lista com os itens \"1\", \"2\" e \"5\"\nprint(lista) #Exibindo a lista\nprint(type(lista)) #Exibindo o tipo/ a classe do objeto criado, no caso uma lista\n\n[1, 2, 5]\n&lt;class 'list'&gt;\n\n\n\n#Exemplo: Criando listas a partir de list()\ntext = 'Python' #Texto como objeto que servir√° de exemplo\ntext_list = list(text) #Transformando o texto em uma lista\nprint(text_list) #Exibindo a nova lista criada\nprint(type(text_list)) #Exbindo o tipo/ a classe do objeto criado, no caso uma lista\n\n['P', 'y', 't', 'h', 'o', 'n']\n&lt;class 'list'&gt;\n\n\n\n#Exemplo: Uso de BREAK e CONTINUE\nfor i in range(5): # Gera n√∫meros at√© ou menores que 5\n    if i == 3:\n        break  # Sai do loop quando i for igual a 3\n    print(i)\n# Output: 0 1 2\n\nfor i in range(5):\n    if i == 2:\n        continue  # Pula o valor 2 e continua\n    print(i)\n# Output: 0 1 3 4\n\n0\n1\n2\n0\n1\n3\n4\n\n\n\n#Exemplo de Comprehension List bem simples\nquadrados = [] # Criando lista vazia\nfor x in range(1, 6): # Elementos ser√£o os n√∫meros entre 1 at√© 6\n    quadrados.append(x**2) # Elevamos os itens dentro da lista ao quadrado\nprint(quadrados) # Exibindo o resultado\n\n[1, 4, 9, 16, 25]\n\n\n\n\n\n2.2.2 Tuples\nSemelhantes √†s listas, por√©m s√£o imut√°veis: n√£o √© poss√≠vel alterar seus itens umas vez criadas.\n\n2.2.2.1 Sintaxe e Defini√ß√£o\n\nPara criar uma tupla, escrevemos ‚Äúnome_da_tupla = (itens)‚Äù, igual √†s listas, mas substituindo as chaves por par√™nteses.\nPodemos usar ‚Äútype()‚Äù para identificar uma tupla no c√≥digo, que vai retornar ‚Äú&lt;class ‚Äòtuple‚Äô&gt;‚Äù #### Similaridades com Listas\nComo tuplas s√£o imut√°veis, n√£o √© poss√≠vel utilizar as mesmas fun√ß√µes que utilizamos para modificar a ordem ou os itens das listas. Contudo, n√≥s podemos gerar uma tupla atrav√©s de uma lista, ou transformar uma tupla em lista para criar outra tupla modificada em cima disso.\nN√£o existe Tuple Comprehension direta como no caso das listas. Para criar fazer uma comprehension usamos a sintaxe ‚Äútupla = tuple(insert_formulinhas_m√°gicas_here)‚Äù\n\n\n\n2.2.2.2 Unpacking\n\n√â uma t√©cnica na qual atribu√≠mos uma vari√°vel a cada item de dentro da tupla, como se fossem coordenadas. Para fazer isso, basta chamar a lista criada e dar nomes √†s vari√°veis. ex: tupla = (1,2,3) ‚Äì&gt; tupla = a, b, c ‚Äì&gt; a= 1; b=2; c = 3.\n\n\n# Exemplo de modifica√ß√£o de tuplas\n# Tupla original\nminha_tupla = (1, 2, 3, 4)\n\n# Convertendo a tupla para uma lista\nminha_lista = list(minha_tupla)\n\n# Modificando a lista\nminha_lista.append(5)\n\n# Transformando em Tupla novamente\nminha_tupla2 = tuple(minha_lista)\n\n# Mostrando o resultado\nprint(minha_tupla2)\n\n(1, 2, 3, 4, 5)\n\n\n\n# Exemplo unpacking\n# Tupla com tr√™s elementos\nminha_tupla = (10, 20, 30)\n\n# Unpacking: cada elemento da tupla √© atribu√≠do a uma vari√°vel\np√£o, de, batata = minha_tupla\n\n# Exibindo os valores atribu√≠dos\nprint(p√£o)\nprint(de)\nprint(batata)\n\n10\n20\n30\n\n\n\n\n\n2.2.3 Dicts\nDicion√°rios s√£o estruturas de dados que tamb√©m armazenam itens dentro de si, mas que s√£o acess√°veis por chaves.\n\n2.2.3.1 Sintaxe e Defini√ß√£o\n\nPara criar uma biblioteca usamos ‚Äúdicion√°rio = {chaves:itens}‚Äù ou ‚Äúdicion√°rio = dict(chaves:itens)‚Äù. H√° tamb√©m a sintaxe ‚Äú.fromkeys‚Äù, que associa uma sequ√™ncia de chaves a um valor dado.\nNeste caso, ‚Äútype()‚Äù retornar√° ‚Äú&lt;class ‚Äòdict‚Äô&gt;‚Äù\n\n\n\n2.2.3.2 Similaridades com Listas\nAlgumas operacoes que sao validas tanto para listas quanto para bibliotecas: * Para remover itens de dicts, podemos usar os metodos .pop, del e clear(), extamente como nas listas, mas utilizando as chaves para se referir aos elementos. * Tambem e possivel fazer dicts comprehension. Escrevemos: dicionario = {expressao_que_gera_valores_para_as_chaves}\n\n\n2.2.3.3 Acessar e Alterar\n\nTecnicas de indexing:\n\n\n.KEYS: podemos escrever nome_biblioteca.keys() para acessar todas as suas chaves.\n.VALUES: de forma contr√°ria, se quisermos acessar os valores aos quais as chaves se referem, escrevemos nome_biblioteca.values()\n.ITENS: retorna todos os pares de valores e chaves: nome_biblioteca.itens()\n.GET: retorna o valor de uma chave espec√≠fica e retorna ‚Äúnone‚Äù se a chave n√£o existir: nome_biblioteca.get(chave)\n\n\nAlterando os valores das bibliotecas:\n\n\n.UPDATE: adiciona chaves e atualiza valores de chaves que j√° existiam, como se fosse uma sobreposi√ß√£o de bibliotecas. biblioteca_original.update(biblioteca_nova)\n.POP: assim como nas listas, escrevemos nome_biblioteca.pop(chave) para retirar um dos elementos da biblioteca e retornar o seu valor.\n.POPITEM: retira o √∫ltimo par chave-valor na ordem da lista e retorna esse mesmo par. Sua sintaxe √© nome_biblioteca.popitem()\n.SETDEFAULT: podemos escrever nome_biblioteca.setdefault(chave, valor) para adicionar uma nova chave e valor √† biblioteca. Se a chave j√° existir, retorna apenas o valor original associado √† ela, independente do valor que foi escrito no setdefaut.\n\n\n#Exemplo de dicts comprehension:\nquadrados = {x: x**2 for x in range(5)}\nprint(quadrados)\nprint(quadrados.keys())\n\n{0: 0, 1: 1, 2: 4, 3: 9, 4: 16}\ndict_keys([0, 1, 2, 3, 4])\n\n\n\n\n\n2.2.4 Sets\n√â uma estrutura que carrega dados √∫nicos (n√£o se repetem) e desordenados (n√£o podem ser acessados por √≠ndice como nas listas). √â poss√≠vel modific√°-la e √© √∫til quando precisamos de itens n√£o repetentes e a ordem desses elementos √© irrelevante. Sua sintaxe √© ‚Äúnome_set = {itens}‚Äù.\n\n2.2.4.1 Sintaxe e Defini√ß√£o\n\nPara criar um set, podemos transformar outras cole√ß√µes ou estruturas (como strings (textos), tuplas, listas, etc) para criar um novo set por meio de novo_set = set(nome_da_lista/string/tupla).\ntype() retornar√° &lt;class ‚Äòset‚Äô&gt;\n\n\n\n2.2.4.2 Similaridades com Listas\n\nAssim como nas listas, podemos usar comprehension, unir, ver interse√ß√µes e diferen√ßas entre os sets.\nA sintaxe para criar sets a partir de fun√ß√µes (comprehension) √©: set = {express√£o for item in iter√°vel}\n\n\n\n2.2.4.3 Acessar e Alterar\n\n.ADD: escrevemos nome_set.add(item) para adicionar um item ao set.\n.DISCARD: escrevemos nome_set.discard(item) para remover um item do set\n\n\n\n2.2.4.4 Set Operations\n\n.UNION ou (|): h√° dois modos de unir dois sets em um novo set, podemos escrever ‚Äúset3 = set1.union(set2)‚Äù ou ‚Äúset3 = set1 | set2‚Äù\n.INTERSECCTION ou (&): para retornar um set com os elementos comuns entre dois outros sets, escrevemos ‚Äúset1.intersection(set2)‚Äù ou ‚Äúset1 & set2‚Äù\n.UPDATE ou (|=): adiciona os elementos de um set a outro, modificando o set original. ‚Äúset1.update(set2)‚Äù ou set1 |= set2\n.ISSUBSET ou (&lt;) ou (&lt;=): verifica (retorna True ou False) se todos elementos est√£o contidos em outro subset. ‚Äúset1.issubset(set2)‚Äù ou ‚Äúset1 &lt;= set2‚Äù, se retorno for True, ent√£o set1 √© subconjunto de set2.\n.ISSUPERSET ou (&gt;) ou (&gt;=): faz o contr√°rio do issubset, verifica se todos os elementos de outro set est√£o contidos no set analizado. ‚Äúset1.issuperset(set2)‚Äù ou ‚Äúset1 &gt;= set2‚Äù, se retorno for True, ent√£o set1 √© superconjunto de set2.\n.ISDISJOINT: verifica se dois sets n√£o t√™m elementos comuns. ‚Äúset1 = {1, 2, 3}‚Äù, ‚Äúset2 = {4, 5, 6}‚Äù ‚Äì&gt; ‚Äúprint(set1.isdisjoint(set2))‚Äù ‚Äì&gt; retorno: ‚ÄúTrue‚Äù (n√£o t√™m elementos em comum)\n.DIFFERENCE ou (-): retorna um novo set dos elementos que est√£o em um set mas n√£o na outro. ‚Äúset1.difference(set2)‚Äù ou ‚Äúset1 - set2‚Äù\n.SYMMETRIC_DIFFERENCE ou (^): retorna um novo set contendo os elementos que est√£o em apenas uma dos sets ‚Äúset1.symmetric_difference(set2)‚Äù ou ‚Äúset1 ^ set2‚Äù\n\n\n\n\n\n\nüòé\n\n\n\n\n\n\n2.2.5 Fun√ß√µes Sobre Iter√°veis\n\n\n\nmy_list = ['S√£o Paulo', 'Flamengo']\n\nenumerate(my_list), list(enumerate(my_list))\n#type(enumerate(my_list))\n\n(&lt;enumerate at 0x7e7ff6f7fec0&gt;, [(0, 'S√£o Paulo'), (1, 'Flamengo')])\n\n\n\n#sem enumerate:\nindex = 0\nfor i in my_list:\n    print('Parab√©ns ' + i + '! Voc√™ ficou em ' + str(index + 1) + '¬∫ lugar!')\n    index += 1\n\nParab√©ns S√£o Paulo! Voc√™ ficou em 1¬∫ lugar!\nParab√©ns Flamengo! Voc√™ ficou em 2¬∫ lugar!\n\n\n\n#com enumerate:\nfor index, i in enumerate(my_list):\n    print('Parab√©ns ' + i + '! Voc√™ ficou em ' + str(index + 1) + '¬∫ lugar!')\n\nprint(\"cof cof Copa do Brasil cof cof\")\n\nParab√©ns S√£o Paulo! Voc√™ ficou em 1¬∫ lugar!\nParab√©ns Flamengo! Voc√™ ficou em 2¬∫ lugar!\ncof cof Copa do Brasil cof cof\n\n\n\ndef maior_que_dois(x):\n    return x &gt; 2\n#Ou utilizar uma fun√ß√£o an√¥nima \"lambda\": lambda x: x &gt; 2\n\nmy_list = [1,2,3,4]\nprint(list(filter(maior_que_dois, my_list)))\nprint(list(filter(lambda x: x&gt;2, my_list)))\n\n[3, 4]\n[3, 4]\n\n\n\nmy_map = list(map(maior_que_dois, my_list)) # map: aplicar uma fun√ß√£o para todos os itens\nmy_map\n\n[False, False, True, True]\n\n\n\nprint(my_list)\nprint(my_map)\n[my_list, my_map]\n\n[(my_list[i], my_map[i]) for i in range(4)]\nlist(zip(my_list, my_map))\n# zip(): une tuplas, mas √© um objeto pr√≥prio\n# ‚Üí precisa fazer tuple(zip()) para ver a tupla mesmo\n\n[1, 2, 3, 4]\n[False, False, True, True]\n\n\n[(1, False), (2, False), (3, True), (4, True)]",
    "crumbs": [
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Introdu√ß√£o ao Python II</span>"
    ]
  },
  {
    "objectID": "aula2-python2.html#vari√°veis-como-aplic√°-las",
    "href": "aula2-python2.html#vari√°veis-como-aplic√°-las",
    "title": "2¬† Introdu√ß√£o ao Python II",
    "section": "2.3 Vari√°veis: Como aplic√°-las?",
    "text": "2.3 Vari√°veis: Como aplic√°-las?\n\n\n\nFalamos sobre como vari√°veis s√£o um conjunto nome-valor. Vamos explorar um pouco mais essa ideia.\nRefer√™ncia: https://nedbatchelder.com/text/names.html (fonte dos diagramas).\nObs: a discuss√£o aqui introduz um conceito te√≥rico, do mundo da Ci√™ncia da Computa√ß√£o. Al√©m de ser algo interessante, que vai ajudar voc√™ a entenderem como linguagens de programa√ß√£o funcionam, vai ajudar na pr√°tica a evitar um tipo espec√≠fico de erro.\nConsidere o c√≥digo x = 23, n√≥s temos o nome ‚Äúx‚Äù fazendo refer√™ncia ao valor (na mem√≥ria do computador) ‚Äú23‚Äù:\n\n\nx refers to 23\n\nx23\n\nSe fizermos y = x, n√£o criamos um novo objeto, mas temos agora um novo nome apontando para o mesmo valor:\n\n\nx and y both refer to 23\n\nxy23\n\nNote que poderia ser o contr√°rio, na cria√ß√£o de y, criava-se um novo valor (local na mem√≥ria) para ele, como abaixo, mas n√£o √©.\n\n\nx and y aren‚Äôt magically linked\n\nxy2323\n\nE se alterarmos a vari√°vel y, o que pode acontecer?\n\nO valor (o √∫nico que existe) √© alterado, e os dois nomes agora fazem refer√™ncia a esse valor atualizado.\nCria-se um novo valor para y, e agora cada nome se refere a um valor diferente.\n\nNo Python, neste caso, o que acontece √© a segunda op√ß√£o.\nSe rodarmos y = 12, o que n√£o acontece √©:\n\n\nx and y both refer to 23\n\nxy12\n\nE sim:\n\n\nx and y aren‚Äôt magically linked\n\nxy1223\n\nIsso √©, o valor foi primeiro copiado (para um novo local da mem√≥ria), e depois alterado. Esse comportamento tem o nome de ‚Äúcopy-on-modify‚Äù.\nEm oposi√ß√£o:\n\nPoder√≠amos chamar o comportamento em vermelho de ‚Äúcopy-on-creation‚Äù.\nO comportamento da ‚Äúop√ß√£o 2.‚Äù √© chamado de ‚Äúmodify in place‚Äù.\n\nMas esse comportamento depende do tipo do objeto. No exemplo acima, o valor foi copiado, porque era imut√°vel. Alguns tipos de valores s√£o mut√°veis e s√£o ‚Äúmodified-in-place‚Äù.\nVoc√™s viram que listas s√£o mut√°veis, vamos ver um exemplo com elas.\nO c√≥digo:\nnums = [1, 2, 3]\ntri = nums\nGera:\n\n\nnums and tri both refer to the same list\n\nnumstri123\n\nE se rodarmos nums.append(4)? Listas s√£o mut√°veis, ent√£o n√£o criaremos uma c√≥pia/um novo valor para nums, e sim, modificaremos o valor a quem nums se refere, in-place:\n\n\nchanging the list means both names see the change\n\nnumstri1234\n\nEssa diferen√ßa de comportamento, a depender do tipo do objeto, gera muita confus√£o. Para usu√°rios de R, notem que no R, todos (menos um) os tipos de objetos s√£o imut√°veis, e s√£o copied-when-modified, no Python, isso n√£o √© verdade.\nDo artigo do Ned Batchelder:\n\nThis Mutable Presto-Chango is the biggest issue people have with Python‚Äôs names and values. A value is shared by more than one name, and is modified, and all names see the change.\n\n\nKeep in mind, this is not a bug in Python, however much you might wish that it worked differently. Many values have more than one name at certain points in your program, and it‚Äôs perfectly fine to mutate values and have all the names see the change. The alternative would be for assignment to copy values, and that would make your programs unbearably slow.\n\nAgora, voc√™s sabem o mecanismo por tr√°s desse comportamento, e podem evitar cometer erros em rela√ß√£o √† isso.\nQuando voc√™s v√£o criar um objeto mut√°vel com base em outro, deve-se perguntar: ‚Äúeu quero que esse nome tenha a sua pr√≥pria c√≥pia independente dos dados, ou quero que ambos os nomes fa√ßam refer√™ncia ao mesmo dado?‚Äù.\n\nSe a sua inten√ß√£o √© a segunda, fa√ßa y = x.\nSe √© a segunda, os objetos mut√°veis tem um m√©todo .copy() exatamente para isso, faca y = x.copy()",
    "crumbs": [
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Introdu√ß√£o ao Python II</span>"
    ]
  },
  {
    "objectID": "aula2-python2.html#recapitulando",
    "href": "aula2-python2.html#recapitulando",
    "title": "2¬† Introdu√ß√£o ao Python II",
    "section": "2.4 Recapitulando!",
    "text": "2.4 Recapitulando!\n\nConceitos importantes de OOP\n\n\nClasse: Estrutura dos objetos\nObjeto: A base de tudo\nEncapsulamento: Os dados e opera√ß√µes s√£o protegidos, √© necess√°rio conhecimento pr√©vio para interagir com uma classe\nHeran√ßa: Uma classe (subclasse) pode reutilizar c√≥digos de outras classes (superclasses)\nPoliformismo: Classes podem adotar m√©todos com o mesmo nome, mas que geram comportamentos diferentes\nAbstra√ß√£o: Os dados e opera√ß√µes s√£o parcialmente ocultos, para simplificar o uso\n\n\nTipos de cole√ß√µes (estruturas de dados)\n\n\nListas: ordenada, mut√°vel, ‚Äú[]‚Äù\nTuplas: ordenada, imut√°vel,‚Äú()‚Äù\nDicts: ordenada, mut√°vel, acesso dos itens por meio de chaves, ‚Äú{}‚Äù\nSets: desordenada, mut√°vel, ‚Äú{}‚Äù\n\n\nVari√°veis\n\n\nVari√°vel = nome associado a um valor, pense nisso como numa equa√ß√£o matem√°tica ‚Äúf(x)‚Äù em que podemos atribuir valores quaisquer a x, que seria o nome da vari√°vel, a fim de encontrar um resultado y.\nN√≥s podemos mudar os valores das vari√°veis ap√≥s a defini√ß√£o de uma vari√°vel, no nosso exemplo, podemos no mesmo c√≥digo escrever que x vale 1 e depois mudar para x = 2, por exemplo.\nEm python, vari√°veis s√£o mut√°veis!",
    "crumbs": [
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Introdu√ß√£o ao Python II</span>"
    ]
  },
  {
    "objectID": "aula2-python2.html#extras",
    "href": "aula2-python2.html#extras",
    "title": "2¬† Introdu√ß√£o ao Python II",
    "section": "2.5 Extras",
    "text": "2.5 Extras\n\n\n\n2.5.1 f-strings\n√â uma forma simples de estruturar uma string (texto) dentro do python. Isso permite personalizar mensagens de forma r√°pida.\n\n#Exemplo de f-string\n\nnome = 'Maria'\nidade = 30\n\n# Usando f-string para formar a mensagem\nmensagem = f'{nome} tem {idade} anos.'\nprint(mensagem)\n\n\n\n2.5.2 Fun√ß√µes √öteis\n\nDaqui em diante, a aula √© 100% expositiva. Vamos explicar as fun√ß√µes mais essenciais, e o resto fica aqui de consulta para voc√™s.\nRefer√™ncia: https://docs.python.org/3/library/functions.html\n\n2.5.2.1 Fun√ß√µes relacionadas √† tipos de vari√°veis\n\n# O que √©: bool √© a classe \"bin√°ria\", ou seja, fala se o valor, no output, √© \"certo\" ou \"errado\". Se o argumento (o que est√° escrito entre par√™nteses) conter um zero, nenhum n√∫mero, ou n√£o √© o que estamos procurando, este processo retornar√° com um \"false\". Caso contr√°rio, o output ser√° \"true\".\n\n# Para que serve: essa classe √© na verdade uma subclasse da classe \"int\" (classe apresentada na se√ß√£o \"Fun√ß√µes relacionadas √† tipos de vari√°veis\"). Ela √© usada para decobrirmos se um argumento √© verdadeiro/falso.\n\nbool(0), bool(1), bool(1811275162543)\n\n(False, True, True)\n\n\n\n# O que √©: float() √© a classe que transforma um n√∫mero escrito sem ponto ou como uma mistura de letras e n√∫meros em um n√∫mero com n√∫mero decimais.\n\n# Para que serve: essa classe √© na verdade uma subclasse da classe \"int\" (classe apresentada na se√ß√£o \"Fun√ß√µes relacionadas √† tipos de vari√°veis\"). Ela √© usada para conseguirmos trabalhar com n√∫meros mais precisos e menores, sem zeros demais, por exemplo.\n\nfloat(10), float(3.5), float('3.5')\n\n(10.0, 3.5, 3.5)\n\n\n\n# O que √©: int() √© a classe que transforma um n√∫mero escrito com n√∫mero decimais ou como uma mistura de letras e n√∫meros em um n√∫mero sem n√∫mero decimais e arrendodado. Quando n√£o colocamos n√∫mero, o output √© zero.\n\n# Para que serve: essa classe √© usada para podermos trabalhar com n√∫meros sem decimais, e tamb√©m para ajudar a evitar bugs ao rodar o c√≥digo com n√∫meros com muitas casas decimais.\n\nint('8'), int(10.7)\n\n'8'\n\n\n\n# O que √©: str() √© a classe que transforma em string o que est√° em par√™nteses, independente do que seja.\n\n# Para que serve: essa classe √© usada para os bytes, como tudo est√° escrito nos par√™nteses, por padr√£o, serem convertidos em string. Esse m√©todo funciona sem que os argumentos sejam codificados ou seja, os eventuais erros de codifica√ß√£o n√£o s√£o apresentados.\n\nstr(8)\n\n'8'\n\n\n\n# O que √©: type() √© a classe que identifica o que est√° escrito entre par√™nteses.\n\n# Para que serve: essa classe √© usada para identificar qualquer tipo de m√≥dulo padr√£o, que s√£o os tipos incorporados por padr√£o (s√£o todos os m√≥dulos vistos at√© aqui at√© o final da se√ß√£o \"Outras fun√ß√µes\").\n\ntype([1, 2])\n\nlist\n\n\n\n\n2.5.2.2 Fun√ß√µes sobre cria√ß√£o de vari√°veis\n\n# O que √©: dict() √© a classe que cria um \"dicion√°rio\" entre palavras e n√∫meros (sejam eles com decimais, ou n√£o).\n\n# Para que serve:\na = dict(one=1, two=2, three=3.2)\nb = {'one': 1, 'two': 2, 'three': 3.2}\nc = dict(zip(['one', 'two', 'three'], [1, 2, 3.2]))\na == b == c\n\n{1: False, 2: False, 3: True, 4: True}\n\n\n\nlist()\n\n[]\n\n\n\nset([1,2,2,3,4])\n\n{1, 2, 3, 4}\n\n\n\ntuple(my_list)\n\n(1, 2, 3, 4)\n\n\n\ntype((1, 2))\n\ntuple\n\n\n\n\n2.5.2.3 Outras fun√ß√µes\n\nmy_list, repr(my_list), eval(repr(my_list)), eval('1+2')\n# eval(): avalia um string para ver se tem como fazer contas l√° dentro ‚Üí se der, devolve quanto que d√°\n\n([1, 2, 3, 4], '[1, 2, 3, 4]', [1, 2, 3, 4], 3)\n\n\n\ninput(\"A aula t√° legal? \") #recebe algum valor do terminal\n\n''\n\n\n\n\n2.5.2.4 Fun√ß√µes matem√°ticas e l√≥gicas\n\nabs() #m√≥dulo\ndivmod() #n√∫mero, divisor. resultado: (parte inteira, resto)\nmax()\nmin()\npow() #base, expoente\nround() #n√∫mero, d√≠gitos\nsum()\nall([True, True, False]) # True se todos os argumentos s√£o true\nany([True, True, False]) # True se pelo menos um argumento √© verdadeiro\n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n&lt;ipython-input-1-e41fc4f9105a&gt; in &lt;cell line: 1&gt;()\n----&gt; 1 abs() #m√≥dulo\n      2 divmod() #n√∫mero, divisor. resultado: (parte inteira, resto)\n      3 max()\n      4 min()\n      5 pow() #base, expoente\n\nTypeError: abs() takes exactly one argument (0 given)\n\n\n\n\nabs(-3), abs(3)\n\n(3, 3)\n\n\n\ndivmod(7, 5)\n\n(1, 2)\n\n\n\nround(3.1263817241864518742612, 4)\n\n3.1264\n\n\n\n\n2.5.2.5 Fun√ß√µes relacionadas √† tipos de vari√°veis\n\nbin(10)\nhex(445125215) # n√∫meros hexadecimais\nint('1000', 2) # \"1000 base 2\"\nord('a'), chr(97) # o item numero 97 no 'dicion√°rio' UNICODE\nchr(ord('a'))\nord(chr(98))\n\n\n\n2.5.2.6 Fun√ß√µes sobre armazenamento de vari√°veis\n\na = 10 #lembre deste 10!\nrepr(dir())\n# repr: retorna um string do objeto\n# dir: todas os nomes no diret√≥rio atual\n\n\nrepr(dir([1,3]))\n\n\nlist(globals().items())[1:5]\n\n\ndict(list(globals().items()))\ndict(list(globals().items()))['__name__']\n\n\n\n2.5.2.7 Outras fun√ß√µes\n\nopen(file_path, mode) #abre um arquivo\n#Mode: 'r', 'w', 'x', 'a'; '+'; 'b' ou 't'\n# 'r' = read\n# 'w' = write\n# 'x' = Create\n# 'a' = Append\n# 'b' = Binary\n# 't' = Text\n\n\nhelp() #abre o prompt de ajuda no terminal\n\n\n\n\n2.5.3 Bibliotecas\n\n\n\n2.5.3.1 Como Instalar Bibliotecas\nRefer√™ncia: https://packaging.python.org/en/latest/tutorials/installing-packages/\nChecar instala√ß√£o do python (digitar no terminal): &gt; py ‚Äìversion\nChecar instala√ß√£o do pip, o instalador de pacotes: &gt; py -m pip ‚Äìversion\nInstalar o pacote pelo nome: &gt; py -m pip install nome_do_pacote\n\n\n2.5.3.2 M√≥dulo math\nRefer√™ncia: https://docs.python.org/3/library/math.html\n\nimport math\n\n\nround(math.pi, 3)\n\n\nmath.ceil()\nmath.floor()\nmath.trunc()\nmath.modf(5.256) #(0.2560000000000002, 5.0)\n\n\nmath.comb(k_items, n_op√ß√µes) #n! / (k! * (n - k)!) ) (sem ordem, sem repeti√ß√£o)\nmath.perm(k_items, n_op√ß√µes) #n! / (n - k)! (com ordem, sem repeti√ß√£o)\nmath.factorial(n)\n\n\nmath.gcd() #mdc\nmath.lcm() #mmc\n\n\n# abs(a-b) &lt;= max(rel_tol * max(abs(a), abs(b)), abs_tol)\n# rel_tol = toler√¢ncia relativa\n# abs_tol = toler√¢ncia absoluta\nprint(math.isclose(5, 10, rel_tol=0.49, abs_tol=0))\nprint(math.isclose(5, 10, rel_tol=0, abs_tol=5))\n\n\nmath.isfinite()\nmath.isinf()\n\n\n\n2**(0.5), math.sqrt(2)\n\n\nprint(math.dist((0,0), [1,1])) # dist√¢ncia euclidiana\nprint(math.hypot(1,1,1,1,1)) # norma euclidiana ‚Üí dist√¢ncia da origem at√© o ponto\n\n\nmath.cos(), math.sin(), math.tan() #etc.\nmath.degrees(), math.radians() #convers√£o de um pro outro\n\n\nmath.e, math.pi, math.inf\n\n\n\n2.5.3.3 M√≥dulo statistics\nRefer√™ncia: https://docs.python.org/3/library/statistics.html\n\nimport statistics as stat\n\n\nstat.mean()\nstat.geometric_mean()\nstat.harmonic_mean()\nstat.median()\nstat.mode('aaabbb'), stat.multimode('aaabbbc') #('a', ['a', 'b'])\n\n\nstat.quantiles(iterable, n_quantis, method) #m√©todo 'inclusive' se a amostra tiver os maiores valores da popula√ß√£o, e 'exclusive' (default) c.c.\n\n\nstat.stdev(), stat.pstdev()\nstat.variance(), stat.pvariance()\n#vers√µes amostrais e populacionais, respectivamente\n\n\nstat.covariance()\nstat.correlation()\n\n\n\n2.5.3.4 M√≥dulo random\nRefer√™ncia: https://docs.python.org/3/library/random.html\n\nimport random as rd\n\n\nrd.seed(seed)\n\n\nrd.randint(1, 10), rd.random()\n\n\nrd.choices(my_list, weights=[0, 10, 80, 10], cum_weights=None, k=10)\n#rd.choices(my_list, weights=None, cum_weights=[0,m, 10, 90, 100], k=10)\n\n\nprint(my_list)\nrd.shuffle(my_list) #nenhum output\nmy_list #alterou a lista\n\n\nprint(rd.sample(my_list, len(my_list), counts=None)) #nova lista\nprint(my_list) #n√£o alterou a lista\nprint(rd.sample(my_list, 7, counts=[1, 2, 5, 2]))\n#a lista usada foi [3, 2, 2, 4, 4, 4, 4, 4, 1, 1]\n\n\nrd.uniform(2, 8)\nrd.gauss(mu, sigma)\n\n\n\n2.5.3.5 M√≥dulo os\nRefer√™ncias: https://docs.python.org/3/library/os.html, https://www.youtube.com/watch?v=tJxcKyFMTGo, https://www.programiz.com/python-programming/methods/built-in/repr\n\nimport os\n\n\n# \"repr()\"\n\n# O que √©: esta fun√ß√£o significa representation (representa√ß√£o). Ela retorna uma representa√ß√£o em string de um objeto que, idealmente, pode ser usada para recriar o objeto, facilitando a depura√ß√£o.\n\n# Para que serve: esta fun√ß√£o serve para inspecionarmos objetos, fornecendo uma representa√ß√£o de tudos os objetos. Tal inspecionamento √© conhecido como depura√ß√£o.\n\n# Ex.:\nnumbers = [1, 2, 3, 4, 5]\n# Output da lista printada\nprintable_numbers = repr(numbers)\nprint(printable_numbers)\n\n[1, 2, 3, 4, 5]\n\n\n\n# \"os.getcwd()\"\n\n# O que √©: esta fun√ß√£o significa \"get current working directory\" (obter o diret√≥rio de trabalho atual).\n  # √â uma fun√ß√£o da biblioteca os (sistema operacional) que retorna o caminho do diret√≥rio de trabalho atual, ou seja, o diret√≥rio em que o programa est√° sendo executado da pr√≥pria biblioteca os.\n\n# Para que serve: esta fun√ß√£o serve para descobrirmos/relembramos onde est√° o script no sistema de arquivos (arquivo de c√≥digo que usamos para programar em Python).\n\n# Ex. de comandos para executar essa fun√ß√£o:\n#diretorio_atual = os.getcwd() # 1) Comando para obtermos o diret√≥rio de trabalho atual\n\n#print(\"Diret√≥rio de Trabalho Atual:\", diretorio_atual) # # 2) Comando para imprimirmos o diret√≥rio de trabalho atual.\n                                                            # Nesse exemplo n√£o h√° diret√≥rio especificado, mas o seu nome apareceria antes de \"/content\" e depois dos dois pontos (\":\").\n\n\n# \"os.listdir()\"\n\n# O que √©: esta fun√ß√£o √© conhecida como \"listdir\" (list + diretory/ lista + diret√≥rio). √â uma fun√ß√£o da biblioteca os (sistema operacional).\n  # Ela retorna a lista com os nomes dos arquivos regulares e diret√≥rios contidos em um diret√≥rio especificado\n\n# Para que serve: esta fun√ß√£o serve para listarmos o conte√∫do de pastas no sistema de arquivos. Se nenhum diret√≥rio for especificado, ela usa o diret√≥rio de trabalho atual\n\n# Ex. de comandos para executar essa fun√ß√£o:\n#import os #1) Importamos a biblioteca necess√°ria para executar esta fun√ß√£o.\n\n#diretorio = '.' # 2) Comando para especificarmos o diret√≥rio (use '.' para o diret√≥rio atual).\n\n#conteudo = os.listdir(diretorio) # 3) Comando para obtermos a lista de arquivos regulares e diret√≥rios.\n\n#print(\"Conte√∫do do diret√≥rio:\", conteudo) # 4) Comando para imprimir a lista.\n\n\n# \"os.rmdir()\"\n\n# O que √©: a fun√ß√£o \"rmdir\" √© a abreviatura de \"remove\" + \"diretory\" (remover diret√≥rio). √â uma fun√ß√£o da biblioteca os (sistema operacional). Ela remove um diret√≥rio vazio.\n\n# Para que serve: esta fun√ß√£o serve para limpar diret√≥rios que n√£o cont√™m mais arquivos ou subdiret√≥rios. Se algum diret√≥rio n√£o estiver vazio, a fun√ß√£o apontar√° que n√£o foi poss√≠vel delet√°-lo.\n\n# Ex. de comandos para executar essa fun√ß√£o:\n\n#import os #1) Importamos a biblioteca necess√°ria para executar esta fun√ß√£o.\n\n#diretorio = 'diretorio_vazio' # 2) Especificamos o caminho do diret√≥rio que desejamos remover.\n\n#try: # 3) Op√ß√µes dos comandos para os poss√≠veis resultados:\n    #os.rmdir(diretorio)\n    #print(f\"O diret√≥rio '{diretorio}' foi removido com sucesso.\") # 3a) Comando para imprimir que tal diret√≥rio foi encontrado e removido.\n#except FileNotFoundError:\n    #print(f\"O diret√≥rio '{diretorio}' n√£o foi encontrado.\") # 3b) Comando para imprimir que tal diret√≥rio n√£o foi encontrado e por isso n√£o foi removido.\n#except OSError:\n    #print(f\"O diret√≥rio '{diretorio}' n√£o est√° vazio ou n√£o pode ser removido.\") # 3c) Comando para imprimir que tal diret√≥rio n√£o est√° vazio e por isso n√£o foi removido.\n\n\n# \"os.removedirs()\"\n\n# O que √©: a fun√ß√£o \"rmdir\" √© a abreviatura de \"remove\" + \"diretories\" (remover diret√≥rios).\n  # √â uma fun√ß√£o da biblioteca os (sistema operacional). Ela remove um diret√≥rio e todos os seus diret√≥rios \"pais\" (origin√°rios), se estiverem vazios\n\n# Para que serve: est√° fun√ß√£o serve para excluir uma estrutura de diret√≥rios de uma vez, desde o mais aparente (interno) at√© o externo, garantindo que todos os diret√≥rios vazios sejam removidos.\n  # Se algum diret√≥rio n√£o estiver vazio, a fun√ß√£o apontar√° que n√£o foi poss√≠vel delet√°-lo.\n\n# Ex. de comandos para executar essa fun√ß√£o:\n\n#import os #1) Importamos a biblioteca necess√°ria para executar esta fun√ß√£o.\n\n#os.makedirs('pasta/pasta_interna', exist_ok=True) # Criamos uma estrutura de diret√≥rios para executarmos o comando.\n\n#try: # 3) Op√ß√µes dos comandos para os poss√≠veis resultados:\n    #os.removedirs('pasta/pasta_interna')\n    #print(\"Diret√≥rios removidos com sucesso.\") # 3a) Comando para imprimir que tal parte da estrutura de diret√≥rios foi encontrada e removida.\n#except FileNotFoundError:\n  #print(\"Um ou mais diret√≥rios n√£o foram encontrados.\") # 3b) Comando para imprimir que tal parte da estrutura de diret√≥rio n√£o foi encontrada e por isso n√£o foi removida.\n#except OSError:\n    #print(\"Um ou mais diret√≥rios n√£o est√£o vazios ou n√£o podem ser removidos.\") # 3c) Comando para imprimir que tal parte da estrutura de diret√≥rio n√£o est√° vazia e por isso n√£o foi removida.\n\n\n# \"os.rename\"\n\n# O que √©: esta fun√ß√£o se chama \"rename\" (renomear). √â a fun√ß√£o da biblioteca os (sistema operacional) que renomeia arquivos ou diret√≥rios e os substitui pelo de mesmo nome.\n\n# Para que serve: ela pode ser usada para renomear um item (arquivo ou diret√≥rio), especificando o caminho atual e o novo nome desejado, e tamb√©m para susbtituir arquivos.\n  # Sua principal utilidade √© organizacional: dos arquivos e dos diret√≥rios no sistema de arquivos.\n\n# 1. Ex.: comandos para renomear itens:\n\n#import os #1) Importamos a biblioteca necess√°ria para executar esta fun√ß√£o.\n\n# item_antigo = 'item_original.txt' # 2a) Especificamos o nome antigo que desejamos renomear.\n# item_novo = 'item_renomeado.txt' # 2b) Especificamos o nome novo que desejamos renomear.\n\n# try: # 3) Op√ß√µes dos comandos para os poss√≠veis resultados:\n    #os.rename(item_antigo, item_novo)\n    #print(f\"O arquivo foi renomeado para '{item_novo}'.\") # 3a) Comando para imprimir que tal item n√£o foi encontrado\n#except FileNotFoundError:\n    #print(f\"O item '{item_antigo}' n√£o foi encontrado.\") # 3b) Comando para imprimir que tal item n√£o foi encontrado e por isso n√£o foi renomeado.\n#except OSError:\n    #print(f\"O item '{item_antigo}' n√£o est√° vazio ou n√£o pode ser removido.\") # 3c) Comando para imprimir que tal item n√£o existe e por isso n√£o foi renomeado.\n\n# 2. Ex.: comandos para substituir itens:\n\n#import os #1) Importamos a biblioteca necess√°ria para executar esta fun√ß√£o.\n\n# item_antigo = 'item_original.txt' # 2a) Especificamos o nome antigo que desejamos substiruir. Lembre que √© necess√°rio especificar o tipo de item para a entendermos melhor o que o comando ir√° fazer.\n# item_novo = 'item_substituto.txt' # 2b) Especificamos o nome novo que desejamos substiruir. Lembre que √© necess√°rio especificar o tipo de item para a entendermos melhor o que o comando ir√° fazer.\n\n# try: # 4) Op√ß√µes dos comandos para os poss√≠veis resultados:\n    #os.rename(item_antigo, item_novo)\n    #print(f\"O arquivo foi substitu√≠do para '{item_novo}'.\") # 4a) Comando para imprimir que tal item foi encontrado e substitu√≠do.\n#except FileNotFoundError:\n    #print(f\"O item '{item_antigo}' n√£o foi encontrado.\") # 4b) Comando para imprimir que tal item n√£o foi encontrado e por isso n√£o foi substitu√≠do.\n#except OSError:\n    #print(f\"O item '{item_antigo}' n√£o est√° vazio ou n√£o pode ser removido.\") # 3c) Comando para imprimir que tal item n√£o existe e por isso n√£o foi substitu√≠do.\n\n\n# \"os.stat\"\n\n# O que √©: esta fun√ß√£o √© um m√©todo do objeto de caminho da biblioteca os ou da biblioteca pathlib que retorna informa√ß√µes sobre um arquivo regular ou diret√≥rio, como tamanho, permiss√µes, data de modifica√ß√£o, etc.\n  #  Essa fun√ß√£o fornece um objeto que cont√©m v√°rios atributos, permitindo acessar detalhes espec√≠ficos sobre o arquivo regular ou diret√≥rio em quest√£o.\n\n# Para que serve: esta fun√ß√£o serve para obtermos metadados (dados de dados) sem precisar abrir o arquivo. Tais metadados s√£o importantes para entendemos melhor atributos de um dado e n√£o seu conte√∫do.\n\n# Ex. de comandos para executar essa fun√ß√£o:\n\n#import os\n#import time #1) Importamos as bibliotecas necess√°rias para executarmos esta fun√ß√£o.\n\n#arquivo = 'exemplo.txt' # 2) Especificamos o nome do arquivo para o qual desejamos obter informa√ß√µes.\n\n#info = os.stat(arquivo) 3) Comando para sinalizarmos que queremos obter informa√ß√µes sobre o arquivo (metadados do arquivo).\n\n#print(\"Tamanho do arquivo:\", info.st_size, \"bytes\") # 4) Comando para imprimirmos o tamanho do arquivo.\n#print(f\"Data da √∫ltima modifica√ß√£o: {time.ctime(info.st_mtime)}\") # 5) Comando para imprimirmos data e hora da √∫ltima modifica√ß√£o.\n#print(f\"Permiss√µes do arquivo: {oct(info.st_mode)}\") # 6) Comando para imprimirmos as permiss√µes do arquivo.\n# 7) Comando para verificarmos qual o tipo de arquivo:\n#if stat.S_ISDIR(info.st_mode):\n    #print(f\"{info} √© um diret√≥rio.\") # 7a) Comando para descobrimos se √© um diret√≥rio.\n#elif stat.S_ISREG(info.st_mode):\n    #print(f\"{info} √© um arquivo.\") # 7b) Comando para descobrirmos se √© um arquivo regular.\n#else:\n    #print(f\"{info} √© de um tipo desconhecido.\") # 7c) Comando para o c√≥digo n√£o travar se n√£o for arquivo regular ou diret√≥rio o arquivo que est√° sendo analisado.\n\n\n\n2.5.3.6 M√≥dulo ScyPy\nRefer√™ncias: https://docs.scipy.org/doc/scipy/tutorial/index.html#user-guide\n\nEstat√≠stica: https://scipy.github.io/devdocs/reference/stats.html\nOtimiza√ß√£o: https://scipy.github.io/devdocs/reference/optimize.html\n√Ålgebra linear: https://scipy.github.io/devdocs/reference/linalg.html\nInterpola√ß√£o: https://scipy.github.io/devdocs/reference/generated/scipy.interpolate.interp1d.html#scipy.interpolate.interp1d\n\n\nimport scipy.stats # √© um m√≥dulo da biblioteca SciPy em Python que fornece uma ampla gama de fun√ß√µes e classes para trabalhar com estat√≠sticas e distribui√ß√µes de probabilidade.\n\n\n# O que √©: esta fun√ß√£o do m√≥dulo scipy.stats que realiza uma regress√£o linear entre duas vari√°veis\n\n# Para que serve: esta fun√ß√£o retorna v√°rias informa√ß√µes √∫teis sobre a rela√ß√£o linear entre os dados.\n\n# Ex. de comandos para executarmos essa fun√ß√£o\n   # n√£o precisamos conversar agora a fundo sobre essas analises, pois veremos na segunda parte do trainee.\n\n#import numpy as np # 0) biblioteca que veremos na pr√≥xima aula.\n#from scipy import stats # 1) Importamos as bibliotecas necess√°rias para executarmos esta fun√ß√£o.\n\n#x = np.array([1, 2, 3, 4, 5])\n#y = np.array([2, 3, 5, 7, 11]) # 2) Definimos os n√∫meros naturais em cada eixo de uma plano bidimensional.\n\n#print(\"Resultados da Regress√£o Linear:\") # 3) Comando para imprimirmos t√≠tulo das an√°lises.\n#print(f\"Inclina√ß√£o (slope): {slope}\") # 3a) Comando para imprimir an√°lise em slope.\n#print(f\"Intercepto (intercept): {intercept}\") # 3b) Comando para imprimimos an√°lise de intercep√ß√£o.\n#print(f\"Coeficiente de Correla√ß√£o (r-value): {r_value}\") # 3c) Comando para imprimirmos an√°lise de coeficiente de correla√ß√£o.\n#print(f\"Valor de p (p-value): {p_value}\") # 3d) Comando para imprimirmos an√°lise de valor de p.\n#print(f\"Erro Padr√£o (std_err): {std_err}\") # 3e) Comando para c√≥digo n√£o n√£o travar se tiver algum erro.\n\nAqui, as fun√ß√µes menos essenciais, de consulta para voc√™s.\nRefer√™ncia: https://docs.python.org/3/library/functions.html",
    "crumbs": [
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Introdu√ß√£o ao Python II</span>"
    ]
  },
  {
    "objectID": "aula3-python3.html",
    "href": "aula3-python3.html",
    "title": "3¬† Introdu√ß√£o ao Python III",
    "section": "",
    "text": "3.1 Introdu√ß√£o\nAt√© agora vimos sobre como estruturar c√≥digos e escrever de forma que o computador entenda (aula 1) e os princ√≠pios b√°sicos de como a linguagem Pyhton foi pensada (aula 2). Aqui nessa aula nos concentraremos nas bibliotecas NumPy e Pandas. Elas oferecem ferramentas poderosas para manipula√ß√£o e an√°lise de dados, respectivamente.\nA partir da biblioteca NumPy aprenderemos como manipular dados de forma que c√°lculos sejam mais f√°ceis de serem resolvidos - tudo por meio de arrays multidimensionais e fun√ß√µes otimizadas. J√° a partir da biblioteca Pandas analisaremos dados de tabelas e planilhas - veremos as fun√ß√µes para manipular, filtrar, agrupar e resumir esses tipos de dados.\nA forma como veremos esses tipos de dados s√£o duas. Os vetores e os dataframes (e como utiliz√°-los) √© a primeira forma, e essas fun√ß√µes separadas pelos ‚Äútipos de opera√ß√µes‚Äù, a segunda.\nEntendendo a l√≥gica por tr√°s do ferramental que estamos vendo at√© aqui nas aulas, vai ficar mais f√°cil pegar o big picture de tudo do trainee e os pr√≥ximos conte√∫dos que voc√™s aprender√£o ap√≥s essa introud√ß√£o ao Python.",
    "crumbs": [
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Introdu√ß√£o ao Python III</span>"
    ]
  },
  {
    "objectID": "aula3-python3.html#vetores-e-dataframes",
    "href": "aula3-python3.html#vetores-e-dataframes",
    "title": "3¬† Introdu√ß√£o ao Python III",
    "section": "3.2 Vetores e Dataframes",
    "text": "3.2 Vetores e Dataframes\n\nComo fazemos uma sucess√£o de adi√ß√£o (multiplica√ß√£o) ou subtra√ß√£o (divis√£o) em Pyhton?\nQual poderia ser a forma de multiplica√ß√£o (ex. de peda√ßos de pizza):\np = [2/8, 3/8, 5/8] # 1) Fazemos uma lista (de peda√ßos de pizza) e colocamos que ela √© igual a p. Colocamos esse ‚Äúigual‚Äù com o intuito de nomearmos um conjunto, no caso uma lista, para escrevermos mais facilmente os pr√≥ximos comandos envolvendo a lista. print(p * 2) # 2a) Esse print ir√° multiplicar os n√∫meros da lista, mas n√£o entre si.\nQual √© de fato uma forma poss√≠vel para uma quantidade pequena de termos:\np = [2/8, 3/8, 5/8] # 1) Fazemos uma lista e colocamos que ela √© igual a l1. Colocamos esse ‚Äúigual‚Äù com o intuito de nomearmos um conjunto, no caso uma lista, para escrevermos mais facilmente os pr√≥ximos comandos da lista.\nprint([i * 2 for i in p]) # 2b) Com esse print iremos multiplicar cada termo da lista por dois, pois colocamos um loop para transformarmos a nossa cole√ß√£o. (A transforma√ß√£o √© multiplicar cada n√∫mero da lista/cole√ß√£o por dois.)\nQual poderia ser a forma de divis√£o (ex. de convers√£o de alturas de cent√≠metros em metros):\na1 = [170, 185, 200] # 1) Fazemos uma lista (alturas fict√≠cias) e colocamos que ela √© igual a ‚Äúa‚Äù. Colocamos esse ‚Äúigual‚Äù com o intuito de nomearmos um conjunto, no caso uma lista, para escrevermos mais facilmente os pr√≥ximos comandos envolvendo a lista.\nprint(a1 / 100) # 2a) Esse print deveria multiplicar os n√∫meros da lista, mas n√£o entre si. Mas n√£o √© poss√≠vel fazer assim em Pyhton.\nQual √© de fato uma forma poss√≠vel para uma quantidade pequena de termos:\na1 = [170, 185, 200] # 1) Fazemos uma lista e colocamos que ela √© igual a l1. Colocamos esse ‚Äúigual‚Äù com o intuito de nomearmos um conjunto, no caso uma lista, para escrevermos mais facilmente os pr√≥ximos comandos da lista. print([i / 100 for i in a1]) # 2b) Com esse print iremos dividir cada termo da lista por dois, pois colocamos um loop para transformarmos a nossa cole√ß√£o. (A transforma√ß√£o √© dividir cada n√∫mero da lista/cole√ß√£o por 100.)\nA lista n√£o √© multiplicada ‚Äútermo-a-termo‚Äù (como poder√≠amos querer no primeiro print), que chato‚Ä¶ Por que?\nEm Pyhton, as listas s√≥ s√£o multiplicadas de forma mais complexa do que simplesmente colocando a opera√ß√£o de multiplica√ß√£o e os n√∫meros que queremos multiplicar.\n\n3.2.1 Vetores\nVamos ter que considerar um novo tipo de cole√ß√£o, os vetores!\nA palavra vetor tem v√°rias defini√ß√µes diferentes, nesta aula, em termos simplistas (!!), pensem em um vetor como uma cole√ß√£o homog√™nea de dados.\nNote que, para ser homog√™nea, todos os elementos devem ser do mesmo tipo. Tendo essa restri√ß√£o, conseguimos aplicar opera√ß√µes vetorizadas, termo-a-termo, muito mais r√°pidas que usando um loop/comprehension.\nOu seja, podemos usar, como melhor m√©todo o loop/list comprehension apenas em arays como esses: `[1, ‚Äúa‚Äù, 3, (1, 2)]. Assim, √© poss√≠vel uma opera√ß√£o termo-a-termo sem ser homog√™nea, mas com o preju√≠zo de que essa opera√ß√£o ser√° computada mais devagar do que se as opera√ß√µes fossem feitas em duas partes, separandos os termos para que cada parte fosse homog√™nea.\nNote que vetores n√£o podem conter vetores (pois estes tem o tipo ‚Äúarray‚Äù). Ainda assim, vetores podem ser multi-dimensionais. Pense que s√£o cole√ß√µes meramente organizadas em linhas/colunas.\nVamos conversar mais sobre vetores em breve.\n\n3.2.1.1 Exemplos\nVeja exemplos abaixo, e se poder√£o ou n√£o ser entendidos como arrays:\n\n[1] poder√°.\n[1, 2] poder√°.\n[1, \"a\"] n√£o poder√°, tem elementos de tipos diferentes.\n[1, [1, 2]] n√£o poder√°, tem elementos de tipos diferentes (inteiro e uma cole√ß√£o).\n\nAlguns exemplos mais complexos:\n\n[[1, 2], [3, 4]] poder√°! Arrays podem ‚Äúconter si mesmos‚Äù, mas, especialmente, entenda isso como arrays podem ser ‚Äúorganizados em m√∫ltiplas dimens√µes‚Äù. No caso, seria um array bidimensional, uma matriz com linhas e colunas.\n[[1, 2], [3, 4, 5]] n√£o poder√°! Essa √© outra novidade, os arrays devem ser ‚Äúretangulares‚Äù, dentro de cada dimens√£o, todos os elementos devem ter o mesmo tamanho. Isso ficar√° mais claro a diante.\nE [[1, 2], [3, \"a\"]]? N√£o poder√°. Tudo dentro de um array tem que ter o mesmo tipo. Tamb√©m podemos pensar que, dentro de uma dimens√£o, tudo deve poder ser entendido como um array.\n\nOk, ent√£o, um array √© um caso espec√≠fico de uma lista, √© uma lista com duas restri√ß√µes:\n\nTodos os elementos devem ter o mesmo ‚Äútipo‚Äù.\nDeve ser retangulares.\n\n\n\n3.2.1.2 Utilidade dos Vetores\nPor que isso √© √∫til? O que ganhamos com essa perda de generaliza√ß√£o?\nNa vida real, muitas vezes nos deparamos com esse tipo de dado. Em bases de dado, normalmente cada coluna √© uma vari√°vel, uma cole√ß√£o de valores de um mesmo tipo. Al√©m disso, s√£o incont√°veis os lugares onde matrizes aparecem, e n√£o apenas as bidimensionais.\nCriar um framework que seja especializado nesses casos gera tr√™s benef√≠cios principais:\n\nO cl√°ssico trade-off especializa√ß√£o-qualifica√ß√£o, o numpy √© muito eficiente em realizar opera√ß√µes com esse tipo de dado. E o essa √© uma das maiores propagandas que o numpy faz.\n\nInclusive, por tr√°s dos panos, a n√≠vel t√©cnico, arrays s√£o objetos bem diferentes de listas.\n\nA cria√ß√£o de ferramentas especialmente intuitivas e √∫teis para o contexto.\nFacilita√ß√£o do escopo, fica muito mais simples e intuitivo elencar as ferramentas que queremos ter para trabalhar.\n\nPense em como buscar as ferramentas relevantes para limpar uma base de dados, na documenta√ß√£o dos m√©todos de listas e bibliotecas math, stat, etc. Versus buscar as ferramentas na documenta√ß√£o do numpy.\n\n\n\n\n\n3.2.2 Dataframes\nCom o conhecimento de o que s√£o vetores, fica f√°cil de pensar que √© muito comum que o nosso dado de interesse seja um conjunto de vetores.\nA palavra dataframe tem v√°rias defini√ß√µes diferentes, nesta aula, em termos simplistas (!!), ela significa uma cole√ß√£o de vetores (todos do mesmo tamanho).\nTamb√©m podemos pensar em dataframe como uma estrutura de dados de linhas e colunas, tipo uma planilha do Excel. Ambos t√™m um dicion√°rio de listas, em que cada lista possui seus pr√≥prios nome para identificarmos.\nVamos adquirir o conhecimento aplicado sobre dataframes em breve.\nRefer√™ncias e aprodundamentos iniciais de vetores e dataframes\nhttps://www.w3schools.com/ai/ai_vectors.asp,\nhttps://medium.com/analytics-vidhya/what-is-a-vector-5c86fc2b57c1#:~:text=A%20vector%2C%20in%20programming%2C%20is,are%20used%20for%20storing%20data, https://computersciencewiki.org/index.php/Vector\nhttps://www.databricks.com/glossary/what-are-dataframes, https://medium.com/(jscvcds/a-beginners-guide-to-dataframes-with-examples-9aa6bf53fc06?), https://discovery.cs.illinois.edu/learn/Basics-of-Data-Science-with-Python/Python-for-Data-Science-Introduction-to-DataFrames/",
    "crumbs": [
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Introdu√ß√£o ao Python III</span>"
    ]
  },
  {
    "objectID": "aula3-python3.html#numpy",
    "href": "aula3-python3.html#numpy",
    "title": "3¬† Introdu√ß√£o ao Python III",
    "section": "3.3 Numpy",
    "text": "3.3 Numpy\n\n\n\nO que √© Numpy? De acordo com o site oficial:\n\nNumPy √© o pacote fundamental para computa√ß√£o cient√≠fica em Python. √â uma biblioteca Python que fornece um objeto array multidimensional, v√°rios objetos derivados (como arrays mascarados e matrizes) e uma variedade de rotinas para opera√ß√µes r√°pidas em arrays, incluindo matem√°tica, l√≥gica, manipula√ß√£o de forma, classifica√ß√£o, sele√ß√£o, E/S. , transformadas discretas de Fourier, √°lgebra linear b√°sica, opera√ß√µes estat√≠sticas b√°sicas, simula√ß√£o aleat√≥ria e muito mais.\n\n\nComo curiosidade, h√° outras bibliotecas desse tipo, chamadas de vetores de curiosidade. Essas bibliotecas facilitam a manipula√ß√£o e c√°lculo de vetores (arrays) e, por isso, s√£o muito usados na √°rea de ci√™ncia de dados. Um outro exemplo de biblioteca semelhante ao NumPy √© o Jax, desenvolvido pelo Google.\n\nAntes de tudo, vamos instalar e carregar a biblioteca:\n\nimport numpy as np\n\nObs: exemplo de efici√™ncia de opera√ß√µes vetorizadas no Numpy:\n\nn = 1000000\na1 = np.arange(n) #cria√ß√£o de lista usando a biblioteca NumPy\nl1 = list(range(n)) #cria√ß√£o de outra lista usando m√©todo padr√£o de python\n%timeit a1 * 2 #tempo para ele executar a opera√ß√£o (a1*2) usando a biblioteca\n%timeit [x * 2 for x in l1] #tempo de execu√ß√£o sem a biblioteca\n#Observe a diferen√ßa entre os tempos de execu√ß√£o para realizar a mesma tarefa!\n\n3.9 ms ¬± 1.08 ms per loop (mean ¬± std. dev. of 7 runs, 100 loops each)\n279 ms ¬± 73.8 ms per loop (mean ¬± std. dev. of 7 runs, 1 loop each)\n\n\n\n3.3.1 Cria√ß√£o e Caracter√≠sticas\n\nVamos come√ßar vendo a ‚Äúcara‚Äù dos arrays (vetores):\n\n# Criando alguns arrays\n# Obs: j√° fizemos a importa√ß√£o na aba de c√≥digo anterior.\n# Mas na d√∫vida, escreva a importa√ß√£o.\na1 = np.array([1, 1, 1])\na2 = np.array([[1, 0, 1], [3, 4, 1]])\na3 = np.array([[[1, 7, 9], [5, 9, 3]], [[3,2,1], [4,5,6]]])\nfor a in [a1, a2, a3]: print(a, \"\\n\")\n# Aqui fazemos uma lista com todos os vetores.\n# O texto \"\\n\" √© uma sintaxe especial que gera uma linha em branco/vazia\n\n[1 1 1] \n\n[[1 0 1]\n [3 4 1]] \n\n[[[1 7 9]\n  [5 9 3]]\n\n [[3 2 1]\n  [4 5 6]]] \n\n\n\n\n\nNote que come√ßamos a ‚Äúcontar‚Äù pelo vetor, depois pelas linhas, depois pelas matrizes, etc.\nExistem v√°rias maneiras de criar vetores. List√°-los seria muita decoreba, ent√£o veja-as em Extras.\n\n3.3.1.1 Caracter√≠sticas\n\nTYPE(): Quando aplicada a um array (vetor), retornar√°: &lt;class 'numpy.ndarray'&gt;\nDTYPE: escrita como vetor.dtype, retorna o tipo dos elementos dos vetores, como int, para n√∫meros inteiros ou float, para n√∫meros flutuantes.\nSHAPE: escrita como vetor.shape, retorna o n√∫mero de linhas seguido do n√∫mero de colunas. Resultado: (n linhas, n colunas)\nRANGE ou ARANGE: s√£o m√©todos para criar arrays dentro de um alcance. O range ir√° criar uma lista que depois deve ser convertida em um array. J√° arange, √© um m√©todo direto da biblioteca NumPy para criar um array com esse alcance.\n\n\n# Exemplo de array criado com range\nimport numpy as np\n\n# Usando range para criar uma lista de n√∫meros de 0 a 9\nlista = list(range(10))\n\n# Convertendo a lista em um array NumPy\nvetor = np.array(lista)\n\nprint(vetor)\n\n\n# Exemplo de array criado com arrange\n# Usando arange para criar um vetor de n√∫meros de 0 a 9\nvetor = np.arange(10)\n\nprint(vetor)\n\n\nFormatos dos Vetores\n\n\nVetores Linha: s√£o vetores de formato (1, n). Escritos por: vetor = [[1, 2, 3]]\nVetores Coluna: s√£o vetores de formato (n, 1). Escritos por: vetor = [[1], [2], [3]]\n\n\nCOPY: podemos escrever vetor_c√≥pia = vetor.copy() para criar uma c√≥pia com os mesmos elementos que podemos editar sem alterar os dados do vetor original.\nTOLIST(): escrevemos lista = vetor.tolist() para transformar o vetor em uma lista com os mesmos elementos.\n\n\n\n\n3.3.2 Tipos de arrays\nMais cedo, falamos que todos os elementos de um arrays tem sempre o mesmo ‚Äútipo‚Äù. Em termos simplificados, o nome normalmente associado √† ‚Äútipo‚Äù √© dtype.\nUm elemento (um ‚Äúescalar‚Äù) pode ter v√°rios tipos, mas os mais comuns s√£o:\n\nint_: n√∫meros inteiros (integer).\nfloat_: n√∫meros de ponto flutuante (floating-point). O tipo padr√£o.\nbool_: valores booleanos (True ou False).\nstr_: strings de texto.\nE outros menos utilizados: complex_: n√∫meros complexos, object_: objetos Python gen√©ricos, datetime64: datas e hor√°rios, timedelta64: diferen√ßas entre datas e hor√°rios, category: categorias ou r√≥tulos.\n\nVeja alguns coment√°rios t√©cnicos na se√ß√£o Mais Sobre Tipos.\n\n3.3.2.1 Coer√ß√£o de Tipos\nMas e se eu tentar criar o array [1, \"a\"]? O numpy usa coer√ß√£o, ele converte todos os elementos a um mesmo tipo, de acordo com uma lista de prioridade. De maneira simples, int ‚Üí float ‚Üí string. Voc√™ tamb√©m pode converter um array para outro tipo usando o m√©todo x.astype(). Veja exemplos abaixo.\n\nprint(np.array([[1,2], [3.0, 4]]), \"\\n\")\nprint(np.array([[1,2], [3.0, \"4.0\"]]), \"\\n\")\nprint(np.array([[1,2], [3, 4]], dtype = np.complex_), \"\\n\")\nprint(np.array([[1,2], [3, 4]]).astype(str), \"\\n\")\n\n\n\n3.3.2.2 Mais Informa√ß√µes\nPara mais informa√ß√µes sobre arrays, como funcionam, como s√£o salvos na mem√≥ria, veja API Ref. ‚Üí Array objects. Cuidado, muitos temas t√©cnicos e desnecess√°rios (para o momento).\nEspecialmente, foram ignorados dois t√≥picos de arrays:\n\nOs masked arrays, arrays com valores faltantes, API Ref. ‚Üí Array objects ‚Üí Masked arrays.\nE os datetime arrays, arrays de datas, API Ref. ‚Üí Array objects ‚Üí Datetimes and Timedeltas.\n\n\n\n\n3.3.3 Opera√ß√µes Vetorizadas\nLembre-se que o ponto mais importante √© a vetoriza√ß√£o. O numpy define ‚Äúfun√ß√µes universais‚Äù, fun√ß√µes que podem ser aplicadas de forma vetorizadas.\nListar as fun√ß√µes seria muita decoreba, veja-as em Extras. Abaixo, explicamos algumas das mais √∫teis.\n\nnp.subtract(a1, a2) subtrai os n√∫emros de index iguais dos vetores a1 e a2\nnp.divide(a1, a2) divide os n√∫meros de a1 pelos seus pares de a2\nnp.exp(a1) eleva o n√∫mero de Euler (2,718) aos n√∫meros do vetor\nnp.log(a1) retorna o logaritmo natural (log e) de cada elemento da tabela\n\n\n\n3.3.4 Subset\nA refer√™ncia b√°sica est√° em User guide ‚Üí Indexing on ndarrays.\nA indexa√ß√£o de arrays √© feita de forma similar √† listas, com a1[algo]. A maioria das t√©cnicas dispon√≠veis para listas est√° dispon√≠vel aqui tamb√©m.\nEssa parte √© bem √∫til, porque l√≥gicas similares de indexa√ß√£o podem ser utilizadas no pandas e em listas.\n\n3.3.4.1 Subseting B√°sico\nCom uma dimens√£o, √© simples. Conseguimos utilizar a t√©cnica de indexes negativos.\n\n# Usando indexing em Arrays\nimport numpy as np\n# Definindo o array\na1 = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])\n# Printando o array e uma linha vazia\nprint(a1, \"\\n\")\n# Printando os elementos de index 0 e -1\nprint(a1[0])\nprint(a1[-1])\n\n[1 2 3 4 5 6 7 8 9] \n\n1\n9\n\n\nE com duas dimens√µes? Agora, temos que informar o que queremos pegar de cada dimens√£o, a2[algo1, algo2]:\n\n# Indexing em matrizes\n# Criando uma matriz 3x3\na2 = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n# Printando a matriz e uma linha vazia\nprint(a2, \"\\n\")\n#Print do elemento com os index da sua linha e desse elemento dentro da linha\nprint(a2[0, 1])\n\n[[1 2 3]\n [4 5 6]\n [7 8 9]] \n\n2\n\n\nE se eu quiser selecionar mais do que um elemento? Aqui, tamb√©m √© poss√≠vel utilizar a t√©cnica de slicing :.\n\n# Uso de intervalos de index em vetores\n# Elementos entre 1 a 3\nprint(a1[1:3])\n# Elementos a partir do 1\nprint(a1[1:])\n# Elementos at√© o 2\nprint(a1[:2])\n# Elementos do in√≠cio ao fim\nprint(a1[:])\n\n[2 3]\n[2 3 4 5 6 7 8 9]\n[1 2]\n[1 2 3 4 5 6 7 8 9]\n\n\nCom duas dimens√µes √© a mesma ideia, lembrando que precisamos falar o que queremos pegar de ambas as dimens√µes, as possibilidades aumentam.\n\n\n# Intervalos em Matrizes\n# Linha 0, elementos de 0 at√© 2\nprint(a2[0, 0:2])\n# Linhas entre 0 at√© 2, elementos 1\nprint(a2[0:2, 1])\n# Linhas a partir de 1, elementos do in√≠cio ao fim\nprint(a2[1:, :])\n\n[1 2]\n[2 5]\n[[4 5 6]\n [7 8 9]]\n\n\nCom n dimens√µes √© a mesma ideia, com uma entrada em [] para cada dimens√£o.\nSe tiver curiosidade, veja dois truques usando ... e None nos √≠ndices aqui.\n\n# Exemplo de indexing com n dimens√µes\nimport numpy as np\n# Criando um vetor de alcance 27 (3 ^ 3), e dividindo o em 3 matrizes 3 x 3.\na3 = np.arange(3**3).reshape(3, 3, 3)\n# Exibindo o elemento 0, da linha 2 da matriz 2\nprint(a3[2, 2, 0])\n# Exibindo todos os elementos de todas as linhas da matriz 0\nprint(a3[0, :, :])\n\n24\n[[0 1 2]\n [3 4 5]\n [6 7 8]]\n\n\nQuando voc√™ ficar pica, vai descobrir que d√° para omitir dimens√µes, como abaixo. Mas por enquanto, n√£o inventa, coloque um ‚Äúalgo‚Äù para cada dimens√£o, nem que o ‚Äúalgo‚Äù seja ‚Äúselecione tudo‚Äù (:).\n\nprint(a3[0:])\n\n[[[ 0  1  2]\n  [ 3  4  5]\n  [ 6  7  8]]\n\n [[ 9 10 11]\n  [12 13 14]\n  [15 16 17]]\n\n [[18 19 20]\n  [21 22 23]\n  [24 25 26]]]\n\n\nNote que essa no√ß√£o do subset deixa claro qual √© a ‚Äúordem‚Äù dos componentes de um array multidimensional. Isto √©, quando pedimos for i in a3, o que ser√° passado para i? Cada elemento? Cada coluna, cada linha? cada matriz?\n\n# Aqui estamos usando loops para cada sub elementos das etapas\n# Aqui \"mat\" se refere as matrizes de a3\nfor mat in a3:\n  # Aqui \"row\" seriam as linhas das matrizes\n    for row in mat:\n      # E aqui os elementos dessas linhas\n        for item in row: print(item, end = \" \")\n        # Pedimos pra printar os elementos, que chamamos de \"item\"\n\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 \n\n\nVemos que, do array tridimensional a3, mat s√£o as sub-matrizes, row s√£o as linhas de uma sub-matriz, e item os elementos de cada linha. Isto √©, a ordem √© da maior/√∫ltima/mais alta dimens√£o para a menor/mais baixa.\n\n\n3.3.4.2 Filter\nE se os √≠ndices que voc√™ quer obter est√£o em uma cole√ß√£o? Podemos utilizar cole√ß√µes de inteiros ou booleanos para acessar √≠ndices tamb√©m!\n\nprint(a1[np.array([1, 2])]) #a1[[1, 2]]\nprint(a1[np.array([True,False,False,True,False,False,False,True,False])])\n# False para aqueles que n√£o queremos e True para aqueles desejados\n\n[2 3]\n[1 4 8]\n\n\nNote que para booleanos, o √≠ndice-cole√ß√£o precisa ser do mesmo tamanho da dimens√£o relevante.\nO legal √© que d√° para utilizar isso para criar filtros:\n\nprint(a1[a1 + 1 &gt; 2])\n\n[2 3 4 5 6 7 8 9]\n\n\nExistem muitas outras t√©cnicas utilizando essas ferramentas. Veja mais aqui.\nFalamos apenas sobre um tipo de opera√ß√£o, ‚Äúsubset‚Äù. Exitem v√°rios outros que valem a pena saber, veja mais em Extras.\n\n\n\n3.3.5 Repeated Operations\n\nNP.WHERE: Permite atribuir opera√ß√µes quando certos requisitos s√£o atendidos. Sintaxe: numpy.where(condi√ß√£o, valor_se_verdadeiro, valor_se_falso)\n\n\n# Exemplo de WHERE\nimport numpy as np\n\n# Criando um array de exemplo\narr = np.array([1, -2, 3, -4, 5])\n\n# Usando np.where() para substituir valores negativos por 0\nresultado = np.where(arr &gt; 0, arr, 0)\n\nprint(resultado)\n\n[1 0 3 0 5]\n\n\n\nFOR: M√©todo padr√£o para iterar sobre elementos de listas ou arrays. √â em geral mais lento do que np.where. Sintaxe: For x in array opera√ß√£o\n\n\n# Exemplo de FOR, com a mesma fun√ß√£o do exemplo anterior\nimport numpy as np\n\n# Criando um array de exemplo\narr = np.array([1, -2, 3, -4, 5])\n\n# Criando uma c√≥pia do array para modificar dentro do loop\nresultado = arr.copy()\n\n# Usando um loop for para substituir valores negativos por 0\nfor i in range(len(resultado)):\n    if resultado[i] &lt; 0:\n        resultado[i] = 0\n\nprint(resultado)\n\nFim!\nPronto! Voc√™s aprenderam os primeiros conte√∫dos de NumPy! Agora, podemos aplicar esse novo jeito de pensar para bases de dados, e conhecer a biblioteca especializada nisso, o Pandas. A partir de agora, pensa sempre sobre os dados vetorizados. Esse conceito √© essencial para entender Pandas, uma vez que s√≥ assim as fun√ß√µes de manipular, filtrar, agrupar e resumir esses tipos de dados fazem sentido e s√£o programadas.\n\n\n\nScreenshot.png",
    "crumbs": [
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Introdu√ß√£o ao Python III</span>"
    ]
  },
  {
    "objectID": "aula3-python3.html#pandas",
    "href": "aula3-python3.html#pandas",
    "title": "3¬† Introdu√ß√£o ao Python III",
    "section": "3.4 Pandas",
    "text": "3.4 Pandas\n\n\n\n\nimport pandas as pd\n\n\n3.4.1 Cria√ß√£o e Caracter√≠sticas\nimport pandas as pd # 1) Esse √© sempre o primeiro passo: o de importarmos a biblioteca necess√°ria.\ndf = pd.read_csv(‚Äòdata.csv‚Äô) #* 2) Esse √© outro passo essencial: o de identificarmos qual √© a planilha dos dados que vamos usar. Usaremos esse comando bastante daqui para frente. Mas ele s√≥ serve para quando temos aquivos externos.\nprint(df.to_string()) 3) Aqui n√≥s fazemos a opera√ß√£o inicial mais importante: pedimos para que seja exibido o objeto DataFrame (df) convertido em em uma representa√ß√£o de string, formatada como uma tabela.*\nAntes de continuarmos a falar sobre dataframes, temos que ressaltar que o Pandas tem seu pr√≥prio objeto de vetor chamado pd.Series, mas que funciona de forma bem parecida do np.arrayde com uma dimens√£o.\nprint(pd.Series([4, 7, -5, 3])) # 1) Nesse exemplo n√≥s pedimos para os termos 4, 7, -5 e 3 serem exibidos.\nprint(pd.Series([4, 7, -5, 3], index=[‚Äúd‚Äù, ‚Äúb‚Äù, ‚Äúa‚Äù, ‚Äúc‚Äù])) # 2) Nesse exemplo n√≥s definimos que queremos que os mesmos termos do exemplo de cima sejam exibidos com os √≠ndices ‚Äúd‚Äù, ‚Äúb‚Äù, ‚Äúa‚Äù e ‚Äúc‚Äù, nessa ordem.\nA seguir veremos os m√©todos shape, types, info, head, tail e dtypes (j√° vimos eles com NumPy, agora veremos com Pandas, ou seja, manipulando n√£o mais c√°lculos para serem resolvidos e sim para analisaremos dados de tabelas e planilhas). (J√° podemos nos dar um tapinha nas contas e nos sentirmos orgulhosos de quanto vamos aprender at√© o final dessa aula, sem falar no final das pr√≥ximas‚Ä¶)\nEstamos falando de m√©todo mas n√£o custa refor√ßar o que √©: eles s√£o usados para realizar opera√ß√µes em objetos ou acessar suas propriedades. Cada m√©todo √© uma fun√ß√£o que ‚Äúpertence‚Äù a um objeto. Eles s√£o escritos de forma padronizada: com o nome da nome do m√©todo + ponto final (.) + identifica√ß√£o da vari√°vel. (Desconsidere os sinais de adi√ß√£o quando for escrever o m√©todo.)\nAdiantando um pouco sobre uso de cada m√©todo. Cada um √© √∫til dependendo do contexto. Dados j√° estruturados em formato de dicion√°rio ou listas (os exemplos iniciais que estamos usando aqui para apresentar Pandas), os m√©todos diretos s√£o melhores, pois s√£o mais r√°pidos e identificam poucas coisas por vez.\nJ√° para lermos arquivos que cont√™m conjuntos de dados maiores e mais complexos, como csv (dados tabulares no geral), √© necess√°rio que utilizemos em primeiro lugar um m√©todo espec√≠fico para l√™-los, e depois fazermos as devidas personaliza√ß√µes (que veremos nas pr√≥ximas aulas).\nA princ√≠pio de tudo vamos fazer tr√™s colunas simples: nome, idade e cidade de tr√™s pessoas diferentes. Nosso objetivo aqui √© conhecer o que √© necess√°rio para cri√°-la.\n\nimport pandas as pd\n\n# Criando um dicion√°rio com dados\ndata = {\n    'Nome': ['S√©rgio', 'Michelle', 'Catarina'],\n    'Idade': [20, 35, 45],\n    'Cidade': ['S√£o Paulo', 'Rio de Janeiro', 'Belo Horizonte']\n}\n# Criando o DataFrame\ndf = pd.DataFrame(data)\n\n# Exibindo o DataFrame\nprint(df)\n\n       Nome  Idade          Cidade\n0    S√©rgio     20       S√£o Paulo\n1     Lu√≠sa     35  Rio de Janeiro\n2  Catarina     45  Belo Horizonte\n\n\n\n\n3.4.2 Subset\nAqui falaremos sobre como trabalhar com parte ou sele√ß√£o de um conjunto maior de dados. Primeiro vamos ver os principais comandos para manipular as colunas de uma tabela e depois veremos como fazer o mesmo com linhas. Por √∫ltimo veremos sobre como manipular colunas e linhas juntas.  \n\n3.4.2.1 De Colunas\ncolumns\ncolunas = df.columns # 1) Aqui n√≥s estamos criando uma var√≠avel que chamamos de colunas e usando o m√©todo .columns acessamos as colunas do nosso DataFrame.\nprint(colunas) # 2) Aqui pedimos para ser as colunas serem impressas.\nkey\nnomes = df[‚ÄòNome da coluna‚Äô]\nprint(‚Äònome da coluna‚Äô)\nAqui n√≥s criamos uma vari√°vel chamada nomes e n√£o especificamos qual √© a coluna que queremos acessar. Indicando uma coluna existente, ela aparecer√° de output.\n.key\nAcessa uma coluna (se o nome da coluna n√£o tiver espa√ßos ou caracteres especiais) como um atributo.\nA forma de printarmos esta coluna √© df.key e print, igual o m√©todo key.\nA diferen√ßa √© que este m√©todo n√£o pode ser a coluna tiver espa√ßos, caracteres especiais ou come√ßar com um n√∫mero, por exemplo\nkey1, key2\nsubset = df[[‚Äònome de uma coluna‚Äô, ‚Äònome de outra coluna‚Äô]]\nprint(subset)\nEste m√≥dulo nos ajuda a selecionar mais de uma coluna por vez, retornando um novo DataFrame.\n\n\n3.4.2.2 De Linhas\nAgora vamos come√ßar a brincar um pouco com nossas colunas (iei!). Nosso objetivo aqui √© entender como exibir apenas parte de nosso dados.\nshape\ndf.shape()\nprint()\nCom o m√©todo shape n√≥s n√£o precisamos contar o n√∫mero de linhas e colunas de nossa tabela.Ela conta primeiro as linhas e depois as colunas.\ndtype\nprint(‚Äúde Dados de Cada Coluna (dtypes):‚Äù, df.dtypes)\nCom o m√©todo dtype n√≥s descobrimos quais partes de nossa tabela √© integer (int) e object.\ninfo\nprint(‚Äúsobre o DataFrame (info):‚Äù)\ndf.info()\nCom o m√©todo info n√≥s sabemos de forma estrtura o n√∫mero total de entradas, o tipo de dados de cada coluna e o uso de mem√≥ria. Ou seja, um resumo do DataFrame.\nhead\nprint(‚Äúlinhas (head):‚Äù, df.head(2))\nCom o m√©todo head n√≥s podemos escolher a quantidade de linhas que aparecem. Importante ressaltar que n√£o escolhemos de qual linha que come√ßa - √© sempre da primeira.\nsampel\nprint(‚Äúaleat√≥ria (sample):‚Äù,\ndf.sample(2))\nCom o m√©todo sample √© escolhido aleatoriamente escolher linha(s) dependendo da quantidade que colocamos.\ntail\nprint(‚Äúlinhas (tail):‚Äù,\ndf.tail(2))\nCom o m√©todo tail n√≥s podemos escolher a quantidade de linhas que aparecem. Importante ressaltar que n√£o escolhemos de qual linha que come√ßa - √© sempre da √∫ltima e em ordem decrescente. (Quando n√£o especificamos uma quantidade de linhas, por padr√£o s√£o 5.)\nfilter\nprint(‚ÄúColunas filtradas com ‚ÄòNome‚Äô:‚Äù, filtro_nomes)\nprint(‚Äúfiltradas com regex ‚ÄòIdade‚Äô:‚Äù, filtro_salario)\nAqui n√≥s estamos usando dois Dataframes: o primeiro filtra colunas com base em uma express√£o, e o segundo filtra colunas com base em uma express√£o comum.\nAplicando essa defini√ß√£o temos que: filtro_nomes √© um DataFrame resultante de uma opera√ß√£o que filtra nossa coluna chamada ‚ÄúNome‚Äù. J√° filtro_salario √© um DataFrame que filtra colunas com base em uma express√£o regular que, neste caso, busca colunas que correspondem √† palavra ‚ÄúIdade‚Äù ou um padr√£o relacionado. Neste caso, s√≥ h√° uma coluna chamada assim.\n.query\nfiltro_idade = df.query(‚ÄòIdade &gt; 30‚Äô)\nEste m√©todo filtra os dados de maneira expressiva e leg√≠vel. Ele suporta operadores como &gt;, &lt;, ==, !=, & (e), | (ou), e ~ (n√£o).\n(Ele tamb√©m suporta expr, inplace e kwargs. As duas primeiras significam a express√£o filtrada passa como uma string e se True, modifica o DataFrame original, repsectivamente. J√° kwargs vimos nos extras da aula 2. Mas para retomar e simplificando muito [!!!, olhem na aula 2 a explica√ß√£o completa]: s√£o argumentos adicionais para avaliar a express√£o.)\nPara finalizar: no nosso exemplo, queremos o filtro de todas as idades maiores do que 30.\n\n\n3.4.2.3 Ambos Juntos\n\n\nloc\nprint(‚Äú e 3 com Nome e Idade:‚Äù, resultado_multi)\nEste m√©todo nos ajuda a acessar e manipular dados de linhas e colunas: apenas uma delas ou ambas.\nNo nosso exemplo, o resultado s√£o as linhas e colunas que foram selecionadas, ou seja, da 1 a 3.\niloc\nresultado_fatiamento = df.iloc[:, 0:2]\nprint(‚Äúas linhas e as colunas Nome e Idade:‚Äù, resultado_fatiamento)\nEste m√©todo nos permite selecionar dados usando os r√≥tulos das linhas e colunas, em vez de suas posi√ß√µes inteiras. Ou seja, manipulamos os √≠ndices baseados em zero da nossa tabela.\nNo nosso exemplo, o que fizemos foi selecionar todas as linhas de um DataFrame e apenas as duas primeiras colunas.\n\n\n\n3.4.3 Operate/Create\n\n\n\n\n\n\n3.4.4 De Colunas\nCriar\ndf[‚ÄòSalario‚Äô] = [50000, 60000, 70000]\nprint(‚ÄúDataFrame ap√≥s adicionar a coluna ‚ÄòSalario‚Äô:‚Äù, df)\nCom esse comando inserimos dados novos. Nesse caso, uma coluna de sal√°rio.\nDeletar\ndf = df.drop(columns=[‚ÄòSalario‚Äô])\nprint(‚Äúap√≥s deletar a coluna ‚ÄòSalario‚Äô:‚Äù, df)\nCom esse comando tiramos alguma coluna. Neste caso, a pr√≥pria coluna criada anteriomente.\nAlterar\ndf[‚ÄòIdade‚Äô] = df[‚ÄòIdade‚Äô] + 5\nprint(‚Äúap√≥s alterar a coluna ‚ÄòIdade‚Äô:‚Äù, df)\nEste comando s√≥ √© possivel, pois o Pandas consegue ser usado para calcular opera√ß√µes aritm√©ticas em colunas inteiras. Assim, podemos somar ou subtrair os n√∫meros de uma coluna de nossa tabela de uma vez.\n\n3.4.4.1 De Linhas\nCriar\nnova_linha = pd.DataFrame({‚ÄòNome‚Äô: [‚ÄòSofia‚Äô], ‚ÄòIdade‚Äô: [35]})\ndf = pd.concat([df, nova_linha], ignore_index=True)\nprint(‚ÄúDataFrame ap√≥s adicionar a linha de Sofia:‚Äù, df)\nEste m√©todo nos ajuda a concatenar dois ou mais DataFrames. No caso, estamos concatenando o DataFrame original da Sofia com o novo. Mais espeficifamente, estamos criando um novo (primeira linha de c√≥digo) e desconsiderando a linhas antiga que tamb√©m se refere a Sofia (segunda linha de c√≥digo). A nossa altera√ß√£o espec√≠fica √© em sua idade, podendo ser outro, n√£o espcificamente de n√∫mero.\nDeletar\ndf = df.drop(index=1)\nprint(‚Äúap√≥s deletar a linha de Michelle:‚Äù, df)\nO argumento index=1 indica que voc√™ deseja deletar a linha que possui o √≠ndice 1. Os √≠ndices em pandas s√£o baseados em zero, ent√£o index=1 se refere √† segunda linha do DataFrame.\nAlterar\ndf.loc[0, ‚ÄòIdade‚Äô] = 26\nprint(‚Äúap√≥s alterar a idade de S√©rgio:‚Äù, df)\nO primeiro elemento, 0, refere-se ao r√≥tulo da linha que voc√™ deseja acessar. Neste caso, isso indica que voc√™ est√° se referindo √† linha com o √≠ndice 0. O segundo elemento, ‚ÄòIdade‚Äô, refere-se ao nome da coluna que voc√™ deseja alterar. Aqui, voc√™ est√° acessando a coluna chamada ‚ÄòIdade‚Äô. = 26: esta parte do c√≥digo atribui o valor 26 √† c√©lula que corresponde √† linha 0 (a primeira linha) na coluna ‚ÄòIdade‚Äô. Assim, voc√™ est√° alterando o valor atual dessa c√©lula para 26.\n\n\n\n3.4.5 Reorder\n\nLinhas:\ndf1.sort_values(by='cases', ascending=False)\nascending=False: Este argumento determina a ordem da classifica√ß√£o. Ao definir ascending=False, indicamos que deseja uma ordem decrescente. Isso significa que os valores mais altos na coluna ‚Äòcases‚Äô aparecer√£o primeiro.\ndf1.reindex(columns=['year', 'cases', 'population', 'country'])\ndf1: Este √© o DataFrame que voc√™ est√° manipulando. Ele cont√©m dados estruturados em linhas e colunas.\n.sort_values(‚Ä¶): Este √© um m√©todo do pandas que permite ordenar um DataFrame com base nos valores de uma ou mais colunas.\nby=‚Äòcases‚Äô: Este argumento especifica a coluna pela qual voc√™ deseja ordenar o DataFrame. Neste caso, a coluna √© chamada ‚Äòcases‚Äô. Isso significa que o DataFrame ser√° ordenado com base nos valores presentes nessa coluna.\nascending=False: Este argumento determina a ordem da classifica√ß√£o. Ao definir ascending=False, voc√™ est√° indicando que deseja uma ordem decrescente. Isso significa que os valores mais altos na coluna ‚Äòcases‚Äô aparecer√£o primeiro.\n\n\n3.4.6 Rename\n\nLinhas:\ndf1.rename({0: 'Row1', 1: 'Row2', 2: 'Row3', 3: 'Row4', 4: 'Row5', 5: 'Row6'})\nColunas:\ndf1.rename(columns={'cases': 'new_cases', 'population': 'new_population'}, inplace=False)\ndf1: Este √© o DataFrame que voc√™ est√° manipulando. Ele cont√©m linhas e colunas com dados.\n.rename(‚Ä¶): Este √© um m√©todo do pandas que permite renomear as linhas ou colunas de um DataFrame. O m√©todo retorna uma nova vers√£o do DataFrame com as altera√ß√µes especificadas.\n{0: ‚ÄòRow1‚Äô, 1: ‚ÄòRow2‚Äô, ‚Ä¶}: Este dicion√°rio especifica as mudan√ßas de nome:\nAs chaves (0, 1, 2, ‚Ä¶) representam os √≠ndices originais das linhas do DataFrame. Os valores (‚ÄòRow1‚Äô, ‚ÄòRow2‚Äô, ‚Ä¶) s√£o os novos nomes que voc√™ deseja atribuir a essas linhas.\nAssim como na parte de Numpy, alguns tipos de opera√ß√µes mais avan√ßados n√£o foram tratados aqui. Veja-os em Extras. Parte deles ser√£o tratados nas pr√≥ximas aulas.\n\n\n3.4.7 Repeated Operations\n\nimport pandas as pd",
    "crumbs": [
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Introdu√ß√£o ao Python III</span>"
    ]
  },
  {
    "objectID": "aula3-python3.html#extras",
    "href": "aula3-python3.html#extras",
    "title": "3¬† Introdu√ß√£o ao Python III",
    "section": "6.1 Extras",
    "text": "6.1 Extras\n\n\n6.1.1 NumPy: Cria√ß√£o de Vetores\n\n6.1.1.1 Vetores Placeholder\nTamb√©m podemos criar arrays com valores comuns, temos v√°rias fun√ß√µes, como:\n\nnumpy.empty: cria um array vazio com a forma especificada.\nnumpy.ones: cria um array preenchido com uns.\nnumpy.zeros: cria um array preenchido com zeros.\nnumpy.full: cria um array preenchido com um valor constante.\nnumpy.eye: cria uma matriz identidade.\nnumpy.linspace: cria um array com valores espa√ßados uniformemente dentro de um intervalo.\nnumpy.arange: cria um array com valores espa√ßados uniformemente dentro de um intervalo especificado.\n\n\nprint(\"Empty: \\n\", np.empty((2, 3)), \"\\n\")\nprint(\"Ones: \\n\", np.ones((2, 3)), \"\\n\")\nprint(\"Zeros: \\n\", np.zeros((2, 3)), \"\\n\")\nprint(\"Full: \\n\", np.full((2, 3), 5), \"\\n\")\nprint(\"Eye: \\n\", np.eye(3), \"\\n\")\nprint(\"Linspace: \\n\", np.linspace(0, 10, num=5), \"\\n\")\nprint(\"Arange: \\n\", np.arange(0, 10, 2), \"\\n\")\n\nEmpty: \n [[1.48539705e-313 1.06099790e-313 6.36598738e-314]\n [4.24399158e-314 8.48798316e-314 1.27319747e-313]] \n\nOnes: \n [[1. 1. 1.]\n [1. 1. 1.]] \n\nZeros: \n [[0. 0. 0.]\n [0. 0. 0.]] \n\nFull: \n [[5 5 5]\n [5 5 5]] \n\nEye: \n [[1. 0. 0.]\n [0. 1. 0.]\n [0. 0. 1.]] \n\nLinspace: \n [ 0.   2.5  5.   7.5 10. ] \n\nArange: \n [0 2 4 6 8] \n\n\n\n\n\n6.1.1.2 Vetores Aleat√≥rios\nO numpy tem uma parte da biblioteca focada na gera√ß√£o de n√∫meros aleat√≥rios, numpy.random. Se tiver curiosidade, leia mais sobre como computadores geram n√∫meros pseudo-aleat√≥rios.\nTodas as distribui√ß√µes que voc√™ pensar podem ser geradas pelo numpy:\n\nUniforme: numpy.random.uniform.\n\nUniforme 0-1: numpy.random.random.\nUniforme discreta A-B: numpy.random.integers.\n\nBinomial: numpy.random.binomial.\nNormal: numpy.random.normal.\nPoisson: numpy.random.poisson.\nSamplear um array: numpy.random.choice.\n\n\n\n6.1.1.3 Vetores Importados\nPodemos salvar arrays em arquivos, usando fun√ß√µes como:\n\nnumpy.save: salva como um ‚Äúarquivo array‚Äù ‚Äú.npy‚Äù.\nnumpy.savetxt: salva como um arquivo CSV, adequado apenas para arrays 1D e 2D.\nA biblioteca pickle: uma bilbioteca que consegue ‚Äúconservar‚Äù qualquer objeto do python, mas pode ser demorado.\n\nSimilarmente, podemos importar arquivos, com fun√ß√µes numpy.load e numpy.loadtxt.\nPor fim, √© comum converter outros objetos em arrays. Veja as fun√ß√µes numpy.asarray e pandas.Series.to_numpy.\n\nPara mais informa√ß√£o sobre cria√ß√£o de arrays, veja API Ref. ‚Üí Routines ‚Üí Array creation:\n\nCriando por forma e valor.\nCriando por dados, e API Ref. ‚Üí Routines ‚Üí I/O.\nCriando por ranges.\nCriando matrizes.\n\n\n\n\n6.1.2 Numpy: Mais Sobre Tipos\nComo iniciado na parte de dtype() de Pandas, na realidade, embora exista o conceito de ‚Äún√∫mero inteiro‚Äù, e o Python s√≥ defina um tipo de dado integer, existem muitas maneiras de representar um n√∫mero na mem√≥ria do computador. O numpy se importa com isso, e existem v√°rios tipos para cada um dos conceitos acima.\n\nPor conta disso, o dtype pode aparecer com nomes diferentes como int64.\nSe voc√™ for muito nerd, talvez isso importe para o seu projeto. Para escolher um tipo espec√≠fico use a fun√ß√£o np.array com o argumento dtype = .... Leia mais sobre isso aqui.\nO tipo de um array x pode ser descoberto com x.dtype e x.dtype.name.\n\n\n\n6.1.3 Numpy: Opera√ß√µes Vetorizadas\n\n6.1.3.1 Opera√ß√µes Aritm√©ticas\n\nVeja mais em API Ref. ‚Üí Routines ‚Üí Mathematical functions.\n\na1, a2 = np.array([1,2,3]), np.array([4,5,6])\n\nprint(np.subtract(a1, a2), \"\\n\") #a1 + a2\nprint(np.divide(a1, a2), \"\\n\") #a1 * a2\nprint(np.exp(a1), \"\\n\")\nprint(np.sqrt(a1), \"\\n\")\nprint(np.sin(a1), \"\\n\")\nprint(np.log(a1), \"\\n\")\n\n[-3 -3 -3] \n\n[0.25 0.4  0.5 ] \n\n[ 2.71828183  7.3890561  20.08553692] \n\n[1.         1.41421356 1.73205081] \n\n[0.84147098 0.90929743 0.14112001] \n\n[0.         0.69314718 1.09861229] \n\n\n\nTamb√©m considere as constantes abaixo. Mais informa√ß√µes em API Ref. ‚Üí Constants.\n\nnp.pi, np.e, np.nan, np.inf\n\n(3.141592653589793, 2.718281828459045, nan, inf)\n\n\n\n\n6.1.3.2 Opera√ß√µes Matriciais\nVeja mais em API Ref. ‚Üí Routines ‚Üí Linear algebra.\n\na1, a2 = np.array([(1,2), (-1,-3)]), np.array([(4,5), (-4,-6)]) # Note o uso, indiferenci√°vel, de tuplas\n\nprint(a1 * a2, \"\\n\")\nprint(np.dot(a1, a2), \"\\n\") #a1 @ a2 (produto escalar)\nprint(np.linalg.matrix_power(a1, 3), \"\\n\") #(pot√™ncia de matriz)\nprint(np.linalg.det(a1), \"\\n\") #(determinante)\nprint(np.linalg.inv(a1), \"\\n\") #(matriz inversa)\nprint(np.linalg.norm(a1), \"\\n\") #(norma)\nprint(np.linalg.eig(a1), \"\\n\") #(autovalores e autovertores)\n\n[[ 4 10]\n [ 4 18]] \n\n[[-4 -7]\n [ 8 13]] \n\n[[  3  10]\n [ -5 -17]] \n\n-1.0 \n\n[[ 3.  2.]\n [-1. -1.]] \n\n3.872983346207417 \n\nEigResult(eigenvalues=array([ 0.41421356, -2.41421356]), eigenvectors=array([[ 0.95968298, -0.50544947],\n       [-0.28108464,  0.86285621]])) \n\n\n\n\n\n6.1.3.3 Opera√ß√µes com Strings\nVeja mais em API Ref. ‚Üí Routines ‚Üí String operations.\n\na1, a2 = np.array(['ol√°', 'oi', 'oopa']), np.array([', tudo bem?', ', bem?', ', b√£o?'])\n\nprint(np.char.add(a1, a2), \"\\n\")\nprint(np.char.multiply(a1, [3, 1, 2]), \"\\n\")\nprint(np.char.capitalize(a1), \"\\n\")\nprint(np.char.count(a1, 'o'), \"\\n\")\nprint(np.char.find(a1, 'o'), \"\\n\")\n\n['ol√°, tudo bem?' 'oi, bem?' 'oopa, b√£o?'] \n\n['ol√°ol√°ol√°' 'oi' 'oopaoopa'] \n\n['Ol√°' 'Oi' 'Oopa'] \n\n[1 1 2] \n\n[0 0 0] \n\n\n\n\n\n6.1.3.4 Opera√ß√µes L√≥gicas/de Compara√ß√£o\nVeja mais em API Ref. ‚Üí Routines ‚Üí Logic functions. Tamb√©m veja opera√ß√µes de sets em API Ref. ‚Üí Routines ‚Üí Set functions.\n\na1, a2 = np.array([(1,2), (-1,-3)]), np.array([(4,5), (-4,-6)])\n\nprint(np.greater(a1, a2), \"\\n\") #a1 &gt; a2\nprint((a1 == a2).any(), \"\\n\") #note the usage of ()\nprint(np.logical_or(a1 &gt; 1, a2 &lt; 0), \"\\n\") #a1 &gt; 1 or a2 &lt; 0\n\n[[False False]\n [ True  True]] \n\nFalse \n\n[[False  True]\n [ True  True]] \n\n\n\n\n\n6.1.3.5 Opera√ß√µes Estat√≠sticas\nVeja mais em API Ref. ‚Üí Routines ‚Üí Statistics.\n\na1 = np.random.normal(0, 1, 100000)\na2 = a1 + np.random.normal(0, 0.5, 100000)\n\nprint(np.mean(a1), \"\\n\")\nprint(np.median(a1), \"\\n\")\nprint(np.std(a1), \"\\n\")\nprint(np.quantile(a1, 0.25), \"\\n\")\nprint(np.corrcoef(a1, a2), \"\\n\")\n\n0.0014274762281511 \n\n0.0025126008047063083 \n\n0.9979381079716622 \n\n-0.6661109489960002 \n\n[[1.         0.89446592]\n [0.89446592 1.        ]] \n\n\n\n\n\n\n6.1.4 Numpy: Outros Tipos de Opera√ß√µes\n\n6.1.4.1 Operate/Create\nVeja os fun√ß√µes:\n\nappend(), insert(), e delete().\n\n\n\n\n6.1.4.2 Reorder\n\n\n\n6.1.4.3 Reshape\nVeja as fun√ß√µes/m√©todos:\n\n.resize() e reshape(): para alterar a forma de um array, passando a nova forma como uma tupla.\ntranspose(): transpor arrays.\n.flatten() e .ravel(): achatar arrays.\n\n\n\n6.1.4.4 Combine, Separate e Unite\nVeja as fun√ß√µes:\n\nconcatenate().\nvstack(), e hstack().\n\nEm oposi√ß√£o, podemos dividir arrays:\n\n.hsplit() e .vsplit().\n\n\n\n\n6.1.5 Numpy: Fun√ß√µes Universais\nExiste um √∫ltimo t√≥pico interessante, mas mais avan√ßado. As fun√ß√µes do numpy s√£o bem poderosas e flex√≠veis. √â poss√≠vel:\n\nAplic√°-las para cada dimens√£o separadamente ‚Äì usando o argumento axis=.\nFiltrar dimens√µes para n√£o aplicar ‚Äì usando o argumento where=\nAplicar de modo a ‚Äúacumular‚Äù ou ‚Äúreduzir‚Äù o resultado ‚Äì usando os m√©todos .accumulate() e .reduce().\n\nAprendam sobre esses t√≥picos em Api Ref. ‚≠¢ Universal functions. Adicionalmente, Tamb√©m vejam algumas t√°ticas avan√ßadas em Api Ref. ‚≠¢ Routines ‚≠¢ Functional programming.\nAbaixo apresento alguns exemplos sem contexto nenhum.\n\na1 = np.array([1,2,3])\n\nnp.add.accumulate(a1)\nnp.add.reduce(a1)\n\n6\n\n\n\na2 = np.array([[1,2], [4,5]])\n\nprint(np.add.accumulate(a2, axis = 0))\nprint(np.add.reduce(a2, axis = 0))\n\n[[1 2]\n [5 7]]\n[5 7]\n\n\n\nwhere1 = [True, True, False]\nwhere2 = [[True, False], [False, True]]\n\nprint(np.add.reduce(a1, 0, where = where1), \"\\n\")\nprint(np.add.reduce(a2, 0, where = where2), \"\\n\")\n\n3 \n\n[1 5] \n\n\n\n\n\n6.1.6 Pandas: Outros Tipos de Opera√ß√µes\n\n# Alguns exemplos:\n\ntables_links = {\n    'df1': 'https://raw.githubusercontent.com/tidyverse/tidyr/c6c126a61f67a10b5ab9ce6bb1d9dbbb7a380bbd/data-raw/table1.csv',\n    'df2': 'https://raw.githubusercontent.com/tidyverse/tidyr/c6c126a61f67a10b5ab9ce6bb1d9dbbb7a380bbd/data-raw/table2.csv',\n    'df3': 'https://raw.githubusercontent.com/tidyverse/tidyr/c6c126a61f67a10b5ab9ce6bb1d9dbbb7a380bbd/data-raw/table3.csv',\n    'df4a': 'https://raw.githubusercontent.com/tidyverse/tidyr/c6c126a61f67a10b5ab9ce6bb1d9dbbb7a380bbd/data-raw/table4a.csv',\n    'df4b': 'https://raw.githubusercontent.com/tidyverse/tidyr/c6c126a61f67a10b5ab9ce6bb1d9dbbb7a380bbd/data-raw/table4b.csv',\n    'df5': 'https://raw.githubusercontent.com/tidyverse/tidyr/c6c126a61f67a10b5ab9ce6bb1d9dbbb7a380bbd/data-raw/table6.csv'\n}\n\nfor i in tables_links.keys():\n    globals()[i] = pd.read_csv(tables_links[i])\n\n\n6.1.6.1 Reshape\n\nWide to long (melt):\n\nprint(df4a)\npd.melt(df4a, id_vars = [\"country\"], var_name = \"year\", value_name = \"cases\")\n\n       country    1999    2000\n0  Afghanistan     745    2666\n1       Brazil   37737   80488\n2        China  212258  213766\n\n\n\n\n\n\n\n\n\ncountry\nyear\ncases\n\n\n\n\n0\nAfghanistan\n1999\n745\n\n\n1\nBrazil\n1999\n37737\n\n\n2\nChina\n1999\n212258\n\n\n3\nAfghanistan\n2000\n2666\n\n\n4\nBrazil\n2000\n80488\n\n\n5\nChina\n2000\n213766\n\n\n\n\n\n\n\nLong to wide (pivot)\n\nprint(df2)\npd.pivot(df2, index = [\"country\", \"year\"], columns = \"type\", values = \"count\")\n\n        country  year        type       count\n0   Afghanistan  1999       cases         745\n1   Afghanistan  1999  population    19987071\n2   Afghanistan  2000       cases        2666\n3   Afghanistan  2000  population    20595360\n4        Brazil  1999       cases       37737\n5        Brazil  1999  population   172006362\n6        Brazil  2000       cases       80488\n7        Brazil  2000  population   174504898\n8         China  1999       cases      212258\n9         China  1999  population  1272915272\n10        China  2000       cases      213766\n11        China  2000  population  1280428583\n\n\n\n\n\n\n\n\n\ntype\ncases\npopulation\n\n\ncountry\nyear\n\n\n\n\n\n\nAfghanistan\n1999\n745\n19987071\n\n\n2000\n2666\n20595360\n\n\nBrazil\n1999\n37737\n172006362\n\n\n2000\n80488\n174504898\n\n\nChina\n1999\n212258\n1272915272\n\n\n2000\n213766\n1280428583\n\n\n\n\n\n\n\n\n\n6.1.6.2 Separate e Unite\nSeparar:\n\nprint(df3, \"\\n\")\n\ndf3[[\"cases\", \"population\"]] = df3[\"rate\"].str.split(\"/\", expand = True)\ndf3 = df3.drop(\"rate\", axis = 1)\nprint(df3)\n\n       country  year               rate\n0  Afghanistan  1999       745/19987071\n1  Afghanistan  2000      2666/20595360\n2       Brazil  1999    37737/172006362\n3       Brazil  2000    80488/174504898\n4        China  1999  212258/1272915272\n5        China  2000  213766/1280428583 \n\n       country  year   cases  population\n0  Afghanistan  1999     745    19987071\n1  Afghanistan  2000    2666    20595360\n2       Brazil  1999   37737   172006362\n3       Brazil  2000   80488   174504898\n4        China  1999  212258  1272915272\n5        China  2000  213766  1280428583\n\n\nUnir:\n\nprint(df5, \"\\n\")\n\ndf5[\"year\"] = df5[\"century\"] + df5[\"year\"]\ndf5 = df5.drop(\"century\", axis = 1)\nprint(df5)\n\n       country  century  year               rate\n0  Afghanistan       19    99       745/19987071\n1  Afghanistan       20     0      2666/20595360\n2       Brazil       19    99    37737/172006362\n3       Brazil       20     0    80488/174504898\n4        China       19    99  212258/1272915272\n5        China       20     0  213766/1280428583 \n\n       country  year               rate\n0  Afghanistan   118       745/19987071\n1  Afghanistan    20      2666/20595360\n2       Brazil   118    37737/172006362\n3       Brazil    20    80488/174504898\n4        China   118  212258/1272915272\n5        China    20  213766/1280428583",
    "crumbs": [
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Introdu√ß√£o ao Python III</span>"
    ]
  },
  {
    "objectID": "aula5-cd-visualizacao.html",
    "href": "aula5-cd-visualizacao.html",
    "title": "4¬† CD: Visualiza√ß√£o",
    "section": "",
    "text": "5 Introdu√ß√£o\nComo apresentado na √∫ltima aula, estamos agora aprendendo a realizar um ‚Äúprojeto de Ci√™ncia de Dados‚Äù. Nesta aula, veremos o processo de vizualiza√ß√£o de um dados.",
    "crumbs": [
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>CD: Visualiza√ß√£o</span>"
    ]
  },
  {
    "objectID": "aula5-cd-visualizacao.html#visualiza√ß√£o-de-dados",
    "href": "aula5-cd-visualizacao.html#visualiza√ß√£o-de-dados",
    "title": "4¬† CD: Visualiza√ß√£o",
    "section": "5.1 Visualiza√ß√£o de Dados",
    "text": "5.1 Visualiza√ß√£o de Dados\n\n\nAqui, serei pregui√ßoso, o texto do Hadley Wickham √© muito bom:\n\nVisualisation is a fundamentally human activity. A good visualisation will show you things that you did not expect, or raise new questions about the data. A good visualisation might also hint that you‚Äôre asking the wrong question, or you need to collect different data. Visualisations can surprise you, but don‚Äôt scale particularly well because they require a human to interpret them.\n\nBasicamento nosso objetivo aqui √© olhar para um data frame e entender quais informa√ß√µes queremos tirar dele e como fazer isso, para depois podermos modelar esses dados.\nO caminho √© o seguinte:\n\nNa aula 4, aprendemos as etapas de tidy e transform.\nNesta aula, aprenderemos a etapa visualize.\nNa aula 6, aprenderemos a etapa model.\nPor fim, na aula 7, juntaremos tudo, aprendendo como fazer um projeto completo. Adicionalmente, aprenderemos como organizar um script para tal.\n\n\n5.1.1 √çndice\n\nVizualiza√ß√£o de estat√≠sticas descritivas de diferentes dados\nElementos de um gr√°fico\nComo fazer gr√°ficos com matplotlib\nRecapitulando\nExtras\nOutros",
    "crumbs": [
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>CD: Visualiza√ß√£o</span>"
    ]
  },
  {
    "objectID": "aula5-cd-visualizacao.html#sumariza√ß√£o-com-pandas",
    "href": "aula5-cd-visualizacao.html#sumariza√ß√£o-com-pandas",
    "title": "4¬† CD: Visualiza√ß√£o",
    "section": "5.2 Sumariza√ß√£o com Pandas",
    "text": "5.2 Sumariza√ß√£o com Pandas\nUma maneira de visualizar dados √© criar resumos, calcular estat√≠sticas descritivas que contem informa√ß√µes chave sobre os dados, de maneira concisa.\nEstes links tem alguns tutoriais interessantes:\n\nhttps://pandas.pydata.org/docs/getting_started/intro_tutorials/06_calculate_statistics.html\nhttps://www.geeksforgeeks.org/pandas-groupby-summarising-aggregating-and-grouping-data-in-python/\n\nVamos come√ßar carregando dados:\n\nimport pandas as pd\n\n\n\ndf = pd.read_csv(\"https://drive.google.com/uc?id=1u2MEH_DTBMyG3clVKA4Q5FEpntLZNKeE\")\ndf = df.drop(df.columns[0], axis=1)\ndf['Engine'] = pd.to_numeric(df['Engine'].str.replace(' CC', ''), errors='coerce')\ndf['Power'] = pd.to_numeric(df['Power'].str.replace(' bhp', ''), errors='coerce')\ndf = df.drop(df[\"Kilometers_Driven\"].idxmax())\ndf\n\n\n\n\n\n\n\n\nName\nLocation\nYear\nKilometers_Driven\nFuel_Type\nTransmission\nOwner_Type\nMileage\nEngine\nPower\nSeats\nNew_Price\nPrice\n\n\n\n\n0\nMaruti Wagon R LXI CNG\nMumbai\n2010\n72000\nCNG\nManual\nFirst\n26.6 km/kg\n998.0\n58.16\n5.0\nNaN\n1.75\n\n\n1\nHyundai Creta 1.6 CRDi SX Option\nPune\n2015\n41000\nDiesel\nManual\nFirst\n19.67 kmpl\n1582.0\n126.20\n5.0\nNaN\n12.50\n\n\n2\nHonda Jazz V\nChennai\n2011\n46000\nPetrol\nManual\nFirst\n18.2 kmpl\n1199.0\n88.70\n5.0\n8.61 Lakh\n4.50\n\n\n3\nMaruti Ertiga VDI\nChennai\n2012\n87000\nDiesel\nManual\nFirst\n20.77 kmpl\n1248.0\n88.76\n7.0\nNaN\n6.00\n\n\n4\nAudi A4 New 2.0 TDI Multitronic\nCoimbatore\n2013\n40670\nDiesel\nAutomatic\nSecond\n15.2 kmpl\n1968.0\n140.80\n5.0\nNaN\n17.74\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n6014\nMaruti Swift VDI\nDelhi\n2014\n27365\nDiesel\nManual\nFirst\n28.4 kmpl\n1248.0\n74.00\n5.0\n7.88 Lakh\n4.75\n\n\n6015\nHyundai Xcent 1.1 CRDi S\nJaipur\n2015\n100000\nDiesel\nManual\nFirst\n24.4 kmpl\n1120.0\n71.00\n5.0\nNaN\n4.00\n\n\n6016\nMahindra Xylo D4 BSIV\nJaipur\n2012\n55000\nDiesel\nManual\nSecond\n14.0 kmpl\n2498.0\n112.00\n8.0\nNaN\n2.90\n\n\n6017\nMaruti Wagon R VXI\nKolkata\n2013\n46000\nPetrol\nManual\nFirst\n18.9 kmpl\n998.0\n67.10\n5.0\nNaN\n2.65\n\n\n6018\nChevrolet Beat Diesel\nHyderabad\n2011\n47000\nDiesel\nManual\nFirst\n25.44 kmpl\n936.0\n57.60\n5.0\nNaN\n2.50\n\n\n\n\n6018 rows √ó 13 columns\n\n\n\n\n5.2.1 Sumarisando o dataframe como um todo\n\n\n\nExistem algumas fun√ß√µes que combinam v√°rias informa√ß√µes sobre todas as vari√°veis ao mesmo tempo.\n\ndf.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 6019 entries, 0 to 6018\nData columns (total 13 columns):\n #   Column             Non-Null Count  Dtype  \n---  ------             --------------  -----  \n 0   Name               6019 non-null   object \n 1   Location           6019 non-null   object \n 2   Year               6019 non-null   int64  \n 3   Kilometers_Driven  6019 non-null   int64  \n 4   Fuel_Type          6019 non-null   object \n 5   Transmission       6019 non-null   object \n 6   Owner_Type         6019 non-null   object \n 7   Mileage            6017 non-null   object \n 8   Engine             5983 non-null   float64\n 9   Power              5876 non-null   float64\n 10  Seats              5977 non-null   float64\n 11  New_Price          824 non-null    object \n 12  Price              6019 non-null   float64\ndtypes: float64(4), int64(2), object(7)\nmemory usage: 611.4+ KB\n\n\n\ndf.describe().round(3)\n\n\n\n\n\n\n\n\nYear\nKilometers_Driven\nEngine\nPower\nSeats\nPrice\n\n\n\n\ncount\n6019.000\n6019.000\n5983.000\n5876.000\n5977.000\n6019.000\n\n\nmean\n2013.358\n58738.380\n1621.276\n113.253\n5.279\n9.479\n\n\nstd\n3.270\n91268.843\n601.355\n53.875\n0.809\n11.188\n\n\nmin\n1998.000\n171.000\n72.000\n34.200\n0.000\n0.440\n\n\n25%\n2011.000\n34000.000\n1198.000\n75.000\n5.000\n3.500\n\n\n50%\n2014.000\n53000.000\n1493.000\n97.700\n5.000\n5.640\n\n\n75%\n2016.000\n73000.000\n1984.000\n138.100\n5.000\n9.950\n\n\nmax\n2019.000\n6500000.000\n5998.000\n560.000\n10.000\n160.000\n\n\n\n\n\n\n\n\n\n5.2.2 Sumarisando vari√°veis categ√≥ricas\nPara vari√°veis categ√≥ricas sem uma ordem intr√≠nseca, podemos ver a frequ√™ncia absoluta e relativa de cada categoria.\nExemplo: g√™nero, estado civil e tipo de produto.\n\n#Frequ√™ncia abusoluta\ncounts1 = df['Fuel_Type'].value_counts()\n\nprint(counts1)\ncounts1.plot(kind = \"bar\")\n\nFuel_Type\nDiesel      3205\nPetrol      2746\nCNG           56\nLPG           10\nElectric       2\nName: count, dtype: int64\n\n\n\n\n\n\n\n\n\n\n#Frequ√™ncia relativa\ncounts2 = df['Owner_Type'].value_counts(normalize = True)\n\nprint(counts2)\ncounts2.plot(kind = \"bar\")\n\nOwner_Type\nFirst             0.818877\nSecond            0.160851\nThird             0.018777\nFourth & Above    0.001496\nName: proportion, dtype: float64\n\n\n\n\n\n\n\n\n\n\n\n5.2.3 Sumarisando vari√°veis cont√≠nuas\nPara vari√°veis que podem assumir qualquer valor dentro da reta real, podemos olhar para a m√©dia, mediana, SD.\nExemplo: renda, pre√ßo e peso.\n\n\nprint(df['Price'].mean()) # Tamb√©m existe .sum(), .min(), etc.\n\ndf['Price'].describe()\n\n9.47946835022429\n\n\ncount    6019.000000\nmean        9.479468\nstd        11.187917\nmin         0.440000\n25%         3.500000\n50%         5.640000\n75%         9.950000\nmax       160.000000\nName: Price, dtype: float64\n\n\nDe modo mais geral, mas menos mensur√°vel, podemos olhar para a distribui√ß√£o da vari√°vel como um todo com um histograma, e uma visualiza√ß√£o simplificada com boxplots.\nHistograma: Gr√°fico que representa a distribui√ß√£o de uma vari√°vel cont√≠nua, dividindo os dados em intervalos (ou ‚Äúbins‚Äù) e exibindo a frequ√™ncia de valores em cada intervalo. √â √∫til para visualizar a forma, dispers√£o e tend√™ncias dos dados, como assimetria e presen√ßa de picos.\n\n\n\nax = df['Engine'].plot.hist(density=True, bins=10, alpha=0.6, label='Histograma')\ndf['Engine'].plot.density(ax=ax, label='Densidade')\n\n\n\n\n\n\n\n\nBoxplot: Gr√°fico que resume a distribui√ß√£o de uma vari√°vel atrav√©s de cinco valores-chave: m√≠nimo, primeiro quartil, mediana, terceiro quartil e m√°ximo. Ele √© eficaz para identificar outliers, a dispers√£o dos dados e diferen√ßas entre distribui√ß√µes de grupos.\n\ndf['Price'].plot.box()\n\n\n\n\n\n\n\n\n\n\n5.2.4 Sumarisando vari√°veis discretas\nPara vari√°veis que podem assumir valores inteiros espec√≠ficos, olhamos para a m√©dia, moda e frequ√™ncia\nExemplos: n√∫mero de filhos, n√∫mero de produtos vendidos, √≠ndice de satisfa√ß√£o de 1 a 5\n\ncounts = df['Year'].value_counts().sort_index()\n\ncounts.plot(kind='bar')\n\n\n\n\n\n\n\n\n\nprint(df['Year'].mean())\nprint(df['Year'].mode())\n\n2013.3575938850117\n0    2014\nName: Year, dtype: int64\n\n\n\nprint(df['Seats'].mean())\nprint(df['Seats'].mode())\n\n5.278735151413753\n0    5.0\nName: Seats, dtype: float64\n\n\n\n\n\n5.2.5 Analisando grupos nos dados\n\n\n\n\nPodemos estar interessado em fazer esses resumos mas utilizando grupos nos dados. Veja este tutorial para mais informa√ß√µes.\n\n#Saber a o pre√ßo m√©dio de cada tipo\ndf.groupby('Transmission')['Price'].mean()\n\nTransmission\nAutomatic    19.817702\nManual        5.332703\nName: Price, dtype: float64\n\n\n\n#Saber o total de cada tipo\ndf.groupby('Fuel_Type')['Price'].sum()\n\nFuel_Type\nCNG           196.94\nDiesel      41154.14\nElectric       25.75\nLPG            24.87\nPetrol      15655.22\nName: Price, dtype: float64\n\n\n\ndf.plot.box(column = 'Price', by = 'Fuel_Type')\n\nPrice    Axes(0.125,0.11;0.775x0.77)\ndtype: object\n\n\n\n\n\n\n\n\n\n\ndf.groupby('Fuel_Type').agg({'Price': ['sum', 'mean']})\n\n\n\n\n\n\n\n\nPrice\n\n\n\nsum\nmean\n\n\nFuel_Type\n\n\n\n\n\n\nCNG\n196.94\n3.516786\n\n\nDiesel\n41154.14\n12.840605\n\n\nElectric\n25.75\n12.875000\n\n\nLPG\n24.87\n2.487000\n\n\nPetrol\n15655.22\n5.701100\n\n\n\n\n\n\n\n\ndf.groupby('Location').agg({'Price': ['sum', 'mean']})\n\n\n\n\n\n\n\n\nPrice\n\n\n\nsum\nmean\n\n\nLocation\n\n\n\n\n\n\nAhmedabad\n1894.44\n8.457321\n\n\nBangalore\n4771.65\n13.328631\n\n\nChennai\n3830.29\n7.753623\n\n\nCoimbatore\n9589.75\n15.078223\n\n\nDelhi\n5378.08\n9.707726\n\n\nHyderabad\n7254.20\n9.776550\n\n\nJaipur\n2399.21\n5.809225\n\n\nKochi\n7277.65\n11.179186\n\n\nKolkata\n3028.75\n5.661215\n\n\nMumbai\n7449.17\n9.429329\n\n\nPune\n4183.73\n6.726254",
    "crumbs": [
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>CD: Visualiza√ß√£o</span>"
    ]
  },
  {
    "objectID": "aula5-cd-visualizacao.html#banheiro",
    "href": "aula5-cd-visualizacao.html#banheiro",
    "title": "4¬† CD: Visualiza√ß√£o",
    "section": "5.3 BANHEIRO",
    "text": "5.3 BANHEIRO",
    "crumbs": [
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>CD: Visualiza√ß√£o</span>"
    ]
  },
  {
    "objectID": "aula5-cd-visualizacao.html#gr√°ficos-com-o-matplotlib",
    "href": "aula5-cd-visualizacao.html#gr√°ficos-com-o-matplotlib",
    "title": "4¬† CD: Visualiza√ß√£o",
    "section": "5.4 Gr√°ficos com o Matplotlib",
    "text": "5.4 Gr√°ficos com o Matplotlib\n\n\n5.4.1 Anatomia e Estilo de Programa√ß√£o\n\n\nO Matplotlib exibe seus dados em Figuras (por exemplo, janelas, widgets Jupyter, etc.), cada uma das quais pode conter um ou mais Eixos, uma √°rea onde pontos podem ser especificados em termos de coordenadas x-y (ou theta-r em um gr√°fico polar, x-y-z em um gr√°fico 3D, etc.). A maneira mais simples de criar uma Figura com um Eixo √© usando pyplot.subplots.\nAlguns links √∫teis:\n\nhttps://matplotlib.org/stable/users/explain/quick_start.html.\nhttps://matplotlib.org/3.8.3/users/index.html.\nhttps://matplotlib.org/cheatsheets/_images/cheatsheets-1.png.\nhttps://matplotlib.org/3.8.3/index.html.\nhttps://matplotlib.org/3.8.3/api/index.html.\n\n\n\n\n5.4.2 Anatomia de uma figura\n\n\n\n\n5.4.3 Plots\n\n\nConte√∫do principal do gr√°fico, ou seja, os dados que queremos visualizar\nA escolha de gr√°fico para plotar vai depender do tipo de dado que temos e do que queremos comunicar\n\nTipos de gr√°ficos: - Bar Plot: comparar categorias diferentes, principalmente com dados categ√≥ricos ou discretos. Funciona para mostrar a frequ√™ncia e contagem dos valores - Scatter Plot: mostrar rela√ß√£o entre duas vari√°veis cont√≠nuas, principalmente para observar padr√µes, tend√™ncias e correla√ß√µes entre duas vari√°veis - Line Plot: observar mudan√ßas ao longo do tempo de s√©ries de temporais, principalmente para an√°lises de tend√™ncia e sazonalidades - Histograma: visualizar a distribui√ß√£o de uma vari√°vel cont√≠nua agrupando dados em intervalos e mostra quantos dados caem em cada intervalo - Boxplot: resumir a distribui√ß√£o de uma vari√°vel e destacar valores at√≠pico, principalmente para comparar a distribui√ß√£o entre v√°rias categorias - Pie Plot: mostrar propor√ß√µes ou porcentagem entre categorias - Heatmap: visualizar vari√°veis categ√≥ricas ou cont√≠nuas em formato de matriz, usando cores para mostrar intensidade ou frequ√™nciacia\n\n\n5.4.4 Est√©ticas\n\n\n\n\nelementos visuais diretamente ligados aos dados\najudam a distinguir e interpretar diferentes partes do gr√°fico\nprop√≥sito de destacar os dados de forma intuitiva\ncor dos pontos ou barras, formato e tamanho dos marcadores e espessura das linhas\n\n\n\n5.4.5 Tema\n\n\n\napresenta√ß√£o geral do gr√°fico,\ntudo que n√£o est√° diretamente relacionado aos dados, mas que torna o gr√°fico mais leg√≠vel e organizado\nt√≠tulo, r√≥tulos dos eixos, fundo, grid, legenda\n\n\n\n5.4.6 O estilo da programa√ß√£o\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(0, 2, 100)  # Sample data.\n\n# Note that even in the OO-style, we use `.pyplot.figure` to create the Figure.\nfig, ax = plt.subplots(figsize=(5, 2.7))\nax.plot(x, x, label='linear')  # Plot some data on the axes.\nax.plot(x, x**2, label='quadratic')  # Plot more data on the axes...\nax.plot(x, x**3, label='cubic')  # ... and some more.\nax.set_xlabel('x label')  # Add an x-label to the axes.\nax.set_ylabel('y label')  # Add a y-label to the axes.\nax.set_title(\"Simple Plot\")  # Add a title to the axes.\nax.legend()  # Add a legend.\n\n\n\n\n\n\n\n\n\n\n5.4.7 Plots Combinados\n\n\n# Gerando dados fict√≠cios para os gr√°ficos\nx = np.linspace(0, 10, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\ny3 = np.tan(x)\ny4 = np.exp(x / 10)\n\n# Criando uma matriz de 2x2 subgr√°ficos\nfig, axes = plt.subplots(2, 2, figsize=(10, 8))\n\n# Primeiro gr√°fico\naxes[0, 0].plot(x, y1, 'r')\naxes[0, 0].set_title('Seno')\n\n# Segundo gr√°fico\naxes[0, 1].plot(x, y2, 'b')\naxes[0, 1].set_title('Cosseno')\n\n# Terceiro gr√°fico\naxes[1, 0].plot(x, y3, 'g')\naxes[1, 0].set_ylim(-10, 10)  # Limitando o eixo y para evitar valores muito grandes\naxes[1, 0].set_title('Tangente')\n\n# Quarto gr√°fico\naxes[1, 1].plot(x, y4, 'm')\naxes[1, 1].set_title('Exponencial')\n\n# Ajustar o layout para evitar sobreposi√ß√£o\nplt.tight_layout()\n\n# Exibir o gr√°fico\nplt.show()\n\n\n\n\n\n\n\n\n\nfig, axs = plt.subplots(2, 2, figsize=(12, 8))\n\n# Histograma da quilometragem\naxs[0, 0].hist(df['Kilometers_Driven'], bins=10, color='lightcoral', edgecolor='darkred', alpha=0.7)\naxs[0, 0].set_title('Histograma da Quilometragem', fontsize=14, fontweight='bold')\naxs[0, 0].set_xlabel('Quilometragem', fontsize=12, color='darkred')\naxs[0, 0].set_ylabel('Frequ√™ncia', fontsize=12, color='darkred')\naxs[0, 0].tick_params(axis='both', colors='darkred')\naxs[0, 0].grid(color='grey', linestyle='--', linewidth=0.5, alpha=1)\n\n# Gr√°fico de linhas com soma de vendas\naxs[0, 1].plot(\n    df.groupby(\"Year\")[\"Price\"].sum().index,\n    df.groupby(\"Year\")[\"Price\"].sum().values,\n    marker='*', linestyle=':', color='navy', markersize=6, label='Total de Vendas'\n)\naxs[0, 1].set_title('Soma das Vendas por Ano', fontsize=14, fontweight='bold', fontstyle='italic')\naxs[0, 1].set_xlabel('Ano', fontsize=12, color='navy')\naxs[0, 1].set_ylabel('Valores', fontsize=12, color='navy')\naxs[0, 1].legend(loc='upper left', frameon=False)\naxs[0, 1].tick_params(axis='x', colors='darkred', rotation=45)\naxs[0, 1].tick_params(axis='y', colors='teal')\naxs[0, 1].grid(color='grey', linestyle=':', linewidth=1, alpha=1)\n\n# Scatter plot de Ano vs. Quilometragem\naxs[1, 0].scatter(df['Year'], df['Kilometers_Driven'], color='purple', edgecolor='black', s=70, alpha=0.6, marker='v')\naxs[1, 0].set_title('Ano vs. Quilometragem', fontsize=14)\naxs[1, 0].set_xlabel('Ano', fontsize=12, color='darkgreen')\naxs[1, 0].set_ylabel('Quilometragem', fontsize=12, color='purple')\naxs[1, 0].tick_params(axis='x', colors='purple', rotation=45)\naxs[1, 0].tick_params(axis='y', colors='purple')\naxs[1, 0].grid(color='lavender', linestyle=':', linewidth=0.1, alpha=0.5)\n\n# Gr√°fico de barras da quantidade de tipo de motor\naxs[1, 1].bar(df['Fuel_Type'].value_counts().index, df['Fuel_Type'].value_counts().values, color='dodgerblue', edgecolor='black', hatch='/')\naxs[1, 1].set_title('Tipo de Motor', fontsize=14, fontweight='bold')\naxs[1, 1].set_xlabel('Tipo do motor', fontsize=12, color='dodgerblue')\naxs[1, 1].set_ylabel('Quantidade', fontsize=12)\n\n# Ajuste do layout\nplt.tight_layout()\nplt.show()",
    "crumbs": [
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>CD: Visualiza√ß√£o</span>"
    ]
  },
  {
    "objectID": "aula5-cd-visualizacao.html#extras",
    "href": "aula5-cd-visualizacao.html#extras",
    "title": "4¬† CD: Visualiza√ß√£o",
    "section": "5.5 Extras",
    "text": "5.5 Extras\n\nPrincipais param√™tros:\n\ncolor: cor\nlinewidth: espessura da linha\nwidth: largura da barra\nlinestyle: tipo de linha\nmarker: s√≠mbolo nos pontos\nmarkersize: tamanho do s√≠mbolo\nlabel: legenda da s√©rie\ns: tamanho de cada ponto\nalpha: controle de transpar√™ncia\nedgecolor: cor da borda\nhatch: preencimento da barra\nbins: n√∫mero de intervalos para os dados\nautopct: formato para exibir os valores percentuais\nstrangle: √¢ngulo de roca√ß√£o inicial do gr√°fcio\nexplode: destaca fatias espec√≠ficas\ncmap: mapa de cores\n\n\nTipos de Linhas (linestyle)\n\n\n‚Äò-‚Äô: Linha cont√≠nua (padr√£o).\n‚Äò‚Äì‚Äô: Linha tracejada.\n‚Äò-.‚Äô: Linha tra√ßo-ponto.\n‚Äò:‚Äô: Linha pontilhada.\n‚Äô‚Äô ou ‚ÄòNone‚Äô: Sem linha (exibe apenas os marcadores).\n\n\nCores (color)\n\n\nNomes de cores: ‚Äòblue‚Äô, ‚Äòred‚Äô, ‚Äògreen‚Äô, ‚Äòpurple‚Äô, ‚Äòorange‚Äô, etc.\nC√≥digos Hexadecimais: ‚Äò#1f77b4‚Äô, ‚Äò#ff7f0e‚Äô, etc.\nMapas de Cores (Colormaps): Paletas usadas para gradientes, como ‚Äòviridis‚Äô, ‚Äòplasma‚Äô, ‚Äòcoolwarm‚Äô, etc.\n\n\nMarcadores (marker)\n\n\n‚Äòo‚Äô: C√≠rculo\n‚Äòs‚Äô: Quadrado\n‚Äò^‚Äô: Tri√¢ngulo para cima\n‚Äòv‚Äô: Tri√¢ngulo para baixo\n‚ÄòD‚Äô: Losango\n‚Äô*‚Äô: Estrela\n‚Äò+‚Äô: Cruz\n‚Äòx‚Äô: X\n\n\n5.5.1 Outros\nBiblioteca seaborn para criar gr√°ficos mais complexos de maneira mais f√°cil: https://seaborn.pydata.org/\nBiblioteca plotline para criar gr√°fico din√¢mica e interativos: https://plotnine.org/\n\n\n\n#Gr√°fico 1\n# Criar uma figura com uma grade de 2 linhas e 3 colunas\nfig, axs = plt.subplots(2, 3, figsize=(15, 8))  # figsize ajusta o tamanho total da figura\n\n# 1. Gr√°fico de Barras\ncategorias = ['A', 'B', 'C', 'D']\nvendas = [50, 30, 20, 40]\naxs[0, 0].bar(categorias, vendas, color='skyblue', edgecolor='black')\n\n# 2. Gr√°fico de Dispers√£o\nidades1 = [20, 25, 30, 35, 40]\npesos1 = [65, 70, 75, 80, 85]\nidades2 = [22, 27, 32, 37, 42]\npesos2 = [68, 73, 78, 83, 88]\naxs[0, 1].scatter(idades1, pesos1, color='purple', edgecolor='black', marker='o', label=\"Grupo 1\")\naxs[0, 1].scatter(idades2, pesos2, color='purple', edgecolor='black', marker='o', label=\"Grupo 2\")\n\n# 3. Gr√°fico de Linhas\ndias = ['A', 'B', 'C', 'D', 'E', 'F', 'G']\ntemperaturas1 = [18, 20, 22, 21, 19, 17, 18]\ntemperaturas2 = [19, 21, 23, 22, 20, 18, 19]\naxs[0, 2].plot(dias, temperaturas1, marker='o', color='orange', linestyle='-', label=\"S√©rie 1\")\naxs[0, 2].plot(dias, temperaturas2, marker='o', color='orange', linestyle='-', label=\"S√©rie 2\")\n\n# 4. Histograma\nidades_hist = [22, 22, 23, 24, 25, 25, 26, 27, 28, 28, 29, 30, 30, 31, 32, 32, 33, 34]\naxs[1, 0].hist(idades_hist, bins=5, color='lightgreen', edgecolor='black')\n\n# 5. Gr√°fico de Pizza\nregioes = ['A', 'B', 'C', 'D']\nvendas_pizza = [300, 500, 200, 400]\naxs[1, 1].pie(vendas_pizza, labels=regioes, autopct='%1.1f%%', startangle=140,\n              colors=['#ff9999','#ff9999','#ff9999','#ff9999'])\n\n# 6. Heatmap (Matriz de Correla√ß√£o)\ndados = np.array([[1, 0.8, 0.3],\n                  [0.8, 1, 0.5],\n                  [0.3, 0.5, 1]])\nim = axs[1, 2].imshow(dados, cmap='viridis', aspect='auto')\n\n# Ajuste de layout\nplt.tight_layout()\n\n# Salvar a figura sem mostrar na tela\n#plt.savefig(\"grafico1.png\", dpi=300)\nplt.show()\n#plt.close()\n\n\n#Gr√°fico 2\n# Criar uma figura com uma grade de 2 linhas e 3 colunas\nfig, axs = plt.subplots(2, 3, figsize=(15, 8))\n\n# 1. Gr√°fico de Barras com cores diferentes para cada barra\ncategorias = ['A', 'B', 'C', 'D']\nvendas = [50, 30, 20, 40]\ncores = ['skyblue', 'salmon', 'lightgreen', 'gold']\naxs[0, 0].bar(categorias, vendas, color=cores, edgecolor='black')\n\n# 2. Gr√°fico de Dispers√£o com dois grupos de dados, cores e formatos diferentes\nidades1 = [20, 25, 30, 35, 40]\npesos1 = [65, 70, 75, 80, 85]\nidades2 = [22, 27, 32, 37, 42]\npesos2 = [68, 73, 78, 83, 88]\naxs[0, 1].scatter(idades1, pesos1, color='purple', edgecolor='black', marker='o', label=\"Grupo 1\")\naxs[0, 1].scatter(idades2, pesos2, color='blue', edgecolor='black', marker='s', label=\"Grupo 2\")\n\n# 3. Gr√°fico de Linhas com duas s√©ries temporais e estilos de linha diferentes\ndias = ['A', 'B', 'C', 'D', 'E', 'F', 'G']\ntemperaturas1 = [18, 20, 22, 21, 19, 17, 18]\ntemperaturas2 = [19, 21, 23, 22, 20, 18, 19]\naxs[0, 2].plot(dias, temperaturas1, marker='o', color='orange', linestyle='-', label=\"S√©rie 1\")\naxs[0, 2].plot(dias, temperaturas2, marker='s', color='green', linestyle='--', label=\"S√©rie 2\")\n\n\n# 4. Histograma com diferentes estilos de borda\nidades_hist = [22, 22, 23, 24, 25, 25, 26, 27, 28, 28, 29, 30, 30, 31, 32, 32, 33, 34]\naxs[1, 0].hist(idades_hist, bins=5, color='lightgreen', edgecolor='darkgreen', hatch='//')\n\n\n# 5. Gr√°fico de Pizza com diferentes √¢ngulos de in√≠cio e explos√£o de fatia\nregioes = ['A', 'B', 'C', 'D']\nvendas_pizza = [300, 500, 200, 400]\nexplode = (0, 0.1, 0, 0)  # Explodindo a segunda fatia\naxs[1, 1].pie(vendas_pizza, labels=regioes, autopct='%1.1f%%', startangle=140, explode=explode,\n              colors=['#ff9999','#66b3ff','#99ff99','#ffcc99'])\n\n\n# 6. Heatmap (Matriz de Correla√ß√£o) com r√≥tulos e barra de cor ajustada\ndados = np.array([[1, 0.8, 0.3],\n                  [0.8, 1, 0.5],\n                  [0.3, 0.5, 1]])\nim = axs[1, 2].imshow(dados, cmap='coolwarm', aspect='auto')\nfig.colorbar(im, ax=axs[1, 2], fraction=0.046, pad=0.04)\n\n# Ajuste de layout\n# Salvar a figura sem mostrar na tela\n#plt.savefig(\"grafico2.png\", dpi=300)\nplt.show()\n#plt.close()\n\n\n#Gr√°fico 3\n# Criar uma figura com uma grade de 2 linhas e 3 colunas\nfig, axs = plt.subplots(2, 3, figsize=(15, 10))\n\n# 1. Gr√°fico de Barras com cores diferentes para cada barra\ncategorias = ['A', 'B', 'C', 'D']\nvendas = [50, 30, 20, 40]\ncores = ['skyblue', 'salmon', 'lightgreen', 'gold']\naxs[0, 0].bar(categorias, vendas, color=cores, edgecolor='black')\naxs[0, 0].set_title(\"Vendas por Categoria\")\naxs[0, 0].set_xlabel(\"Categorias\")\naxs[0, 0].set_ylabel(\"Vendas\")\n\n# 2. Gr√°fico de Dispers√£o com dois grupos de dados, cores e formatos diferentes\nidades1 = [20, 25, 30, 35, 40]\npesos1 = [65, 70, 75, 80, 85]\nidades2 = [22, 27, 32, 37, 42]\npesos2 = [68, 73, 78, 83, 88]\naxs[0, 1].scatter(idades1, pesos1, color='purple', edgecolor='black', marker='o', label=\"Homens\")\naxs[0, 1].scatter(idades2, pesos2, color='blue', edgecolor='black', marker='s', label=\"Mulheres\")\naxs[0, 1].set_title(\"Idade vs Peso\")\naxs[0, 1].set_xlabel(\"Idade\")\naxs[0, 1].set_ylabel(\"Peso (kg)\")\naxs[0, 1].legend()\n\n# 3. Gr√°fico de Linhas com duas s√©ries temporais e estilos de linha diferentes\ndias = ['A', 'B', 'C', 'D', 'E', 'F', 'G']\ntemperaturas1 = [18, 20, 22, 21, 19, 17, 18]\ntemperaturas2 = [19, 21, 23, 22, 20, 18, 19]\naxs[0, 2].plot(dias, temperaturas1, marker='o', color='orange', linestyle='-', label=\"S√©rie 1\")\naxs[0, 2].plot(dias, temperaturas2, marker='s', color='green', linestyle='--', label=\"S√©rie 2\")\naxs[0, 2].set_title(\"Temperatura Semanal\")\naxs[0, 2].set_xlabel(\"Dias\")\naxs[0, 2].set_ylabel(\"Temperatura (¬∞C)\")\naxs[0, 2].legend()\n\n# 4. Histograma com diferentes estilos de borda\nidades_hist = [22, 22, 23, 24, 25, 25, 26, 27, 28, 28, 29, 30, 30, 31, 32, 32, 33, 34]\naxs[1, 0].hist(idades_hist, bins=5, color='lightgreen', edgecolor='darkgreen', hatch='//')\naxs[1, 0].set_title(\"Distribui√ß√£o de Idades\")\naxs[1, 0].set_xlabel(\"Idade\")\naxs[1, 0].set_ylabel(\"Frequ√™ncia\")\n\n# 5. Gr√°fico de Pizza com diferentes √¢ngulos de in√≠cio e explos√£o de fatia\nregioes = ['A', 'B', 'C', 'D']\nvendas_pizza = [300, 500, 200, 400]\nexplode = (0, 0.1, 0, 0)  # Explodindo a segunda fatia\naxs[1, 1].pie(vendas_pizza, labels=regioes, autopct='%1.1f%%', startangle=140, explode=explode,\n              colors=['#ff9999','#66b3ff','#99ff99','#ffcc99'])\naxs[1, 1].set_title(\"Vendas por Regi√£o\")\n\n# 6. Heatmap (Matriz de Correla√ß√£o) com r√≥tulos e barra de cor ajustada\ndados = np.array([[1, 0.8, 0.3],\n                  [0.8, 1, 0.5],\n                  [0.3, 0.5, 1]])\nim = axs[1, 2].imshow(dados, cmap='coolwarm', aspect='auto')\naxs[1, 2].set_title(\"Heatmap de Correla√ß√£o\")\naxs[1, 2].set_xticks(range(3))\naxs[1, 2].set_yticks(range(3))\naxs[1, 2].set_xticklabels(['Var1', 'Var2', 'Var3'])\naxs[1, 2].set_yticklabels(['Var1', 'Var2', 'Var3'])\nfig.colorbar(im, ax=axs[1, 2], fraction=0.046, pad=0.04)\n\n# Ajuste de layout\n# Salvar a figura sem mostrar na tela\n#plt.savefig(\"grafico3.png\", dpi=300)\nplt.show()\n#plt.close()",
    "crumbs": [
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>CD: Visualiza√ß√£o</span>"
    ]
  },
  {
    "objectID": "aula6-cd-modelagem.html",
    "href": "aula6-cd-modelagem.html",
    "title": "5¬† CD: Modelagem",
    "section": "",
    "text": "Esta aula √© 100% te√≥rica, sobre estat√≠stica e aprendizado de m√°quina.\nSeu material √© somente esta apresenta√ß√£o.",
    "crumbs": [
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>CD: Modelagem</span>"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "GVCode Trainee",
    "section": "",
    "text": "Bem Vindos!\nEste √© o material do curso de Trainee da GVCode. Cada cap√≠tulo est√° associado a uma aula presencial.\nEsse material foi 100% escrito pelos veteranos da entidade, e est√° sendo otimizado desde 2020! Ao final, temos algumas das bibliografias utilizadas em sua confec√ß√£o.",
    "crumbs": [
      "Bem Vindos!"
    ]
  },
  {
    "objectID": "index.html#aulas",
    "href": "index.html#aulas",
    "title": "GVCode Trainee",
    "section": "Aulas",
    "text": "Aulas\nIntrodu√ß√£o ao Python I\n\nO que √© um script; sintaxe; vari√°veis; tipos de dados.\nOperadores; control flow; fun√ß√µes.\nExtra: f-strings; condi√ß√µes (try except).\n\nIntrodu√ß√£o ao Python II\n\nPrograma√ß√£o orientada ao objeto.\nCole√ß√µes (list, dict, tuple, set); subsetting e m√©todos.\nIter√°veis loops, comprehension, e enumerate, filter, zip, e map.\nExtra: *args; fun√ß√µes √∫teis.\n\nIntrodu√ß√£o ao Python III\n\nNumpy: arrays e vetoriza√ß√£o; opera√ß√µes e subsetting.\nPandas: dataframes; opera√ß√µes.\nExtra: t√≥picos avan√ßados em Numpy e Pandas.\n\nCi√™ncia de Dados: Manipula√ß√£o\n\nIntrodu√ß√£o √† ci√™ncia de dados; o que √© processamento de dados.\nComo arrumar dados com Pandas.\n\nCi√™ncia de Dados: Visualiza√ß√£o\n\nO que √© visualiza√ß√£o de dados.\nSumariza√ß√£o com Pandas; Gr√°ficos com o Matplotlib.\nExtra: seaborn e outras bibliotecas; gr√°ficos avan√ßados.\n\nCi√™ncia de Dados: Modelagem\n\nO que √© modelagem de dados.\nAula te√≥rica sobre modelos de machine learning.\n\nCi√™ncia de Dados: Projetos\n\nEtapas e exemplo de um script de ci√™ncia de dados.\nFun√ß√µes de modelagem.\nExtra: apresentar trabalho.\n\nOutros Temas em Programa√ß√£o\n\nGit e Github.\nBoas pr√°ticas de programa√ß√£o (python‚Äôs pep8).\nExtra: regex; web scrapping.",
    "crumbs": [
      "Bem Vindos!"
    ]
  }
]