[
  {
    "objectID": "aula1-python1.html",
    "href": "aula1-python1.html",
    "title": "1¬† Introdu√ß√£o ao Python I",
    "section": "",
    "text": "1.1 Porque Python?",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Introdu√ß√£o ao Python I</span>"
    ]
  },
  {
    "objectID": "aula1-python1.html#sintaxe",
    "href": "aula1-python1.html#sintaxe",
    "title": "1¬† Introdu√ß√£o ao Python I",
    "section": "1.2 Sintaxe",
    "text": "1.2 Sintaxe\n\n\n1.2.1 Scripts\nUm script √© um arquivo de texto com instru√ß√µes a serem executadas por um computador que antes traduzir√° o arquivo para linguagem de m√°quina.\nUm script √© um texto instrucional como qualquer outro, escrito em um tipo de linguagem especial, ‚Äúde programa√ß√£o‚Äù, ou ‚Äúc√≥digo‚Äù, mas √© um texto, quase como uma receita de bolo de cenoura.\nComo em qualquer linguagem, temos um vocabul√°rio √† disposi√ß√£o, um conjunto de palavras (ou tokens) existentes, organizadas em categorias como substantivos, adjetivos, etc. N√≥s combinamos as palavras em frases (ou statements) para descrever as instru√ß√µes. Por fim, organizamos o texto em par√°grafos (ou blocks), conjuntos de frases que devem ser lidas juntas, para definir a estrutura e facilitar o entendimento do texto.\n\n\n\n1.2.2 Sintaxe B√°sica\nA sintaxe dentro do Python √© muito semelhante com a linguagem humana. O programa ‚Äúl√™‚Äù de cima para baixo, da esqueda para a direita de forma sequencial!\nNote ao longo dos programas: espa√ßos, quebras de linha, tabs, coment√°rios‚Ä¶\n\n#Vamos fazer essa soma!\n\nsoma = 2 + 2 # soma bem facil...\nsoma2=2+2\n\nprint(soma, soma2)\n\n4 4",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Introdu√ß√£o ao Python I</span>"
    ]
  },
  {
    "objectID": "aula1-python1.html#vari√°veis",
    "href": "aula1-python1.html#vari√°veis",
    "title": "1¬† Introdu√ß√£o ao Python I",
    "section": "1.3 Vari√°veis",
    "text": "1.3 Vari√°veis\n\nAs vari√°veis no python s√£o bem parecidas com as vari√°veis da matem√°tica. Serve como caixinhas que carregam algo dentro e, sempre que o programa ler ela, entender√° o seu conte√∫do.\nx = \"julia\"  #toda vez que o programa ler x, ler√° a string julia\ny = 5        #toda vez que o programa ler y, ler√° o n√∫mero inteiro 5\nz = 2.5      #toda vez que o programa ler z, ler√° o n√∫mero float 2,5\nVari√°veis s√£o um nome, associado √† um valor, que mora na mem√≥ria do computador.\nTenha em mente ao nomear uma vari√°vel que: - N√£o se pode usar os termos reservados;\n\nNomes de vari√°veis podem conter apenas letras, n√∫meros e underscores(_). Podem come√ßar com uma letra ou um underscore, mas n√£o com um n√∫mero;\nEspa√ßos n√£o s√£o permitidos em nomes de vari√°veis (usa-se underscores para separa as palavras);\nDicas: nomes de vari√°veis devem ser concisos, por√©m descritivos.\n\nNa pr√°tica, quando escrevemos essas var√≠aveis, n√∫meros e strings em c√©lulas de c√≥digo, observamos diferentes cores que indicam o que o python est√° enxergando.\nTermos reservados s√£o termos que j√° possuem um ‚Äúsignificado‚Äù para o Python, ent√£o n√£o podemos usa-los como vari√°veis.",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Introdu√ß√£o ao Python I</span>"
    ]
  },
  {
    "objectID": "aula1-python1.html#tipos-de-dados",
    "href": "aula1-python1.html#tipos-de-dados",
    "title": "1¬† Introdu√ß√£o ao Python I",
    "section": "1.4 Tipos de Dados",
    "text": "1.4 Tipos de Dados\n\n\n\n1.4.1 String\nUma string √© um ‚Äúdesenho‚Äù, onde o programa n√£o enxerga nenhum valor num√©rico mas consegue diferir os ‚Äúdesenhos‚Äù entre si. Seu s√≠mbolo √© ‚Äô ‚Äô ou ‚Äù ‚Äú, indicando ao programa que √© uma string. Um n√∫mero pode ter valor num√©rico (int ou float por exemplo) ou n√£o (str).\nObs: o python √© uma linguagem extremamente sens√≠vel, ent√£o a string ‚Äújulia‚Äù e a string ‚ÄúJulia‚Äù n√£o s√£o iguais para ele.\n\"Julia\"\n\"luana\"\n\"123456\"\nUma ferramenta que voc√™s usar√£o e que ‚Äúrespiram‚Äù strings √© o len().\n‚ÄúLen‚Äù √© a brevia√ß√£o para a palavra Length, ou seja, comprimento, e √© exatamente o que ele mede: essa fun√ß√£o retorna o n√∫mero de caract√©res de uma string.\nObs: os ESPA√áOS contam como caracteres.\nlen(\"julia cruz\") --&gt; retorna o n√∫mero 10 (um inteiro)\n\n\n1.4.2 Inteiro\nOs inteiros s√£o n√∫meros que n√£o s√£o strings e n√£o possuem valor depois da v√≠gula, ou seja, s√£o n√∫meros inteiros :D. Usados em express√µes matem√°ticas para contas.\n5\n6\n12\n1000\n\n\n1.4.3 Inteiro\nS√£o semelhantes aos n√∫meros inteiros por√©m considera e demanda valores depois da v√≠rgula, mesmo que seja 0. Se misturam com os inteiros em equa√ß√µes matem√°ticas.\n1.0\n2.3\n45.002\n1000.0\n\n\n1.4.4 Booleano\nUm valor booleano √© um tipo de dado que pode representar apenas dois estados distintos: verdadeiro ou falso. √â fundamental em muitos aspectos da programa√ß√£o e da l√≥gica, pois permite tomar decis√µes com base em condi√ß√µes.\nverdadeiro = True\nfalso = False",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Introdu√ß√£o ao Python I</span>"
    ]
  },
  {
    "objectID": "aula1-python1.html#operadores",
    "href": "aula1-python1.html#operadores",
    "title": "1¬† Introdu√ß√£o ao Python I",
    "section": "1.5 Operadores",
    "text": "1.5 Operadores\n\n\n\n1.5.1 Operadores Aritim√©ticos\nOs operadores aritm√©ticos s√£o usados para realizar opera√ß√µes matem√°ticas entre operandos.\n\n\n\n\nimage.png\n\n\n\nprint(2+2)\n\n4\n\n\n\nprint(2*5 - 7)\n\n3\n\n\n\nprint(4%2)\n\n0\n\n\n\nprint(3%2)\n\n1\n\n\n\ndivisao_inteira = 10 // 6\nprint(divisao_inteira, 10/6)\n\n1 1.6666666666666667\n\n\n\n1.5.1.1 Ordem de Preced√™ncia\n\n# Parenteses\nexpressao_1 = ((2 + 5) * 3)\nprint(expressao_1)\n\nexpressao_2 = (2 + 5 * 3)\nprint(expressao_2)\n\nexpressao_3 = (1 + 5 ** 2)\nprint(expressao_3)\n\n21\n17\n26\n\n\n\nprint(((2*3)**3)/7)\n\n30.857142857142858\n\n\n\n\n\n1.5.2 Operadores l√≥gicos\nOs operadores l√≥gicos s√£o usados alguma rela√ß√£o entre operandos. Quando utilizados, eles retornam valores booleanos (True ou False).\n\n\n\n\nimage.png\n\n\n\n\n\n\n\n\n\n\n1.5.3 Operadores de Atribui√ß√£o\nOs operadores de atribui√ß√£o s√£o usados para atibuir valores a vari√°veis\n\n\n\nnumero = 5\nnumero += 1\nprint(numero)\n\n6\n\n\n\nnumero = 3\nnumero -= 1\nprint(numero)\n\n2\n\n\n\nnumero = 7\nnumero *= 5\nprint(numero)\n\n35\n\n\n\nnumero = 9\nnumero /= 5\nprint(numero)\n\n1.8\n\n\n\nnumero = 5\nnumero %= 2\nprint(numero)\n\n1\n\n\n\n\n\n\n\nüòé",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Introdu√ß√£o ao Python I</span>"
    ]
  },
  {
    "objectID": "aula1-python1.html#control-flow",
    "href": "aula1-python1.html#control-flow",
    "title": "1¬† Introdu√ß√£o ao Python I",
    "section": "1.6 Control Flow",
    "text": "1.6 Control Flow\n\n\n\n1.6.1 Condicionais\n\n1.6.1.1 if\n\n\n1.6.1.2 if else\n\n\n1.6.1.3 if elif else\n\n\n\n1.6.2 Loops\n\n1.6.2.1 while\n\n\n1.6.2.2 for\n\n\n\n1.6.3 Keywords\n\n1.6.3.1 break\n\n\n1.6.3.2 continue",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Introdu√ß√£o ao Python I</span>"
    ]
  },
  {
    "objectID": "aula1-python1.html#fun√ß√µes",
    "href": "aula1-python1.html#fun√ß√µes",
    "title": "1¬† Introdu√ß√£o ao Python I",
    "section": "1.7 Fun√ß√µes",
    "text": "1.7 Fun√ß√µes\n\n\n\n1.7.1 Sintaxe e Defini√ß√£o\n\n\n1.7.2 Argumentos\n\n\n\n\n1.7.3 Fun√ß√µes An√¥nimas",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Introdu√ß√£o ao Python I</span>"
    ]
  },
  {
    "objectID": "aula1-python1.html#recapitulando",
    "href": "aula1-python1.html#recapitulando",
    "title": "1¬† Introdu√ß√£o ao Python I",
    "section": "Recapitulando",
    "text": "Recapitulando",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Introdu√ß√£o ao Python I</span>"
    ]
  },
  {
    "objectID": "aula1-python1.html#extras",
    "href": "aula1-python1.html#extras",
    "title": "1¬† Introdu√ß√£o ao Python I",
    "section": "1.8 Extras",
    "text": "1.8 Extras\n\n\n1.8.1 T√≥picos Adicionais em Fun√ß√µes\n\n1.8.1.1 *args e **kwargs\n\nO operador * e ** s√£o operadores de ‚Äúdesempacotamento‚Äù. Transformam uma lista em v√°rios argumentos ‚Äúsoltos‚Äù. Suponha que voc√™ tenha uma lista de argumentos que quer passar para uma fun√ß√£o, no lugar de pegar cada elemento da lista individualmente, voc√™ pode usar *:\n\nargs = [1, 2, 3]\n\nprint(1, 2, 3) #resultado quisto\nprint(args[0], args[1], args[2]) #pior\nprint(*args) #melhor\n\n1 2 3\n1 2 3\n1 2 3\n\n\nO operador ** √© similar, mas transforma um dicion√°rio em v√°rios argumentos nomeados:\n\nargs = (1, 2, 3)\nkwargs = {'sep': '-', 'end': '!\\n'}\n\nprint(1, 2, 3, sep = '-', end = '!\\n') #resultado quisto\nprint(args[0], args[1], args[2], sep = kwargs['sep'], end = kwargs['end']) #pior\nprint(*args, **kwargs) #melhor\n\n1-2-3!\n1-2-3!\n1-2-3!\n\n\nTamb√©m podemos fazer a opera√ß√£o inversa, criar uma fun√ß√£o que receba um n√∫mero desconhecido de argumentos (soltos/desempacotados). Podemos preceder qualquer nome de argumento com * ou **, e eles coletar√£o argumentos n√£o utilizados, e os empacotar√£o em uma tuple e dicion√°rio, respectivamente.\n\ndef f(a, *args):\n  print(args)\n\nprint(f(4, 1, 2, 3)) # a = 4 !!!\n\ndef g(a, **kwargs):\n  print(kwargs)\n\ng(4, um = 1, dois = 2, tres = 3)\n\n(1, 2, 3)\nNone\n{'um': 1, 'dois': 2, 'tres': 3}\n\n\nIsso √© √∫til porque a partir disso, podemos utilizar esses argumetos com base nos m√©todos de dicion√°rio e tuples. Ou, podemos desempacotar e pass√°-los diretamente √† outras fun√ß√µes:\n\ndef my_sum(*args):\n    result = 0\n    for x in args:\n        result += x\n    print(result)\n\nmy_sum(1, 2, 3, 4, 5, 6)\n\ndef my_print(*args, **kwargs):\n  print(*args, **kwargs)\n\nmy_print('oi', 'ol√°', sep = ', ', end = '!')\n\n21\noi, ol√°!\n\n\n\ndef calcular_imc(*args, **kwargs):\n    resultados = []\n\n    for i, pessoa in enumerate(args):\n        peso = kwargs.get(f'peso{i}', None)\n        altura = kwargs.get(f'altura{i}', None)\n\n        if peso is None or altura is None:\n            print(f\"Faltam dados para a pessoa {i+1}. Peso e altura s√£o necess√°rios.\")\n            continue\n\n        if peso &lt;= 0 or altura &lt;= 0:\n            print(f\"Valores inv√°lidos para a pessoa {i+1}. Peso e altura devem ser positivos.\")\n            continue\n\n        imc = peso / (altura ** 2)\n        resultados.append(imc)\n\n    return resultados\n\nimcs = calcular_imc(1,2,3, peso0=60, altura0=1.7, peso1=70, altura1=1.75, peso2=80, altura2=1.8)\nprint(imcs)\n\n[20.761245674740486, 22.857142857142858, 24.691358024691358]\n\n\n\n\n1.8.1.2 Ambientes e Busca de Valores\n\n\na = 1\nb = 2\nc = 3\nd = 4\n\ndef fun(a, **kwargs):\n    b = 20\n    return [a, b, c, d]\n\nfun(a = 10, c = 30)\n\n[10, 20, 3, 4]\n\n\n\ndef fun(a, **kwargs):\n    b = 20\n    return [a, b, c, d, e]\n\nfun(a = 10, c = 30)\n\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[45], line 5\n      2     b = 20\n      3     return [a, b, c, d, e]\n----&gt; 5 fun(a = 10, c = 30)\n\nCell In[45], line 3, in fun(a, **kwargs)\n      1 def fun(a, **kwargs):\n      2     b = 20\n----&gt; 3     return [a, b, c, d, e]\n\nNameError: name 'e' is not defined\n\n\n\n\n\n\n1.8.2 Erros/Exce√ß√µes\n\n1.8.2.0.1 Tipos de exce√ß√µes\nRefer√™ncia: https://docs.python.org/3/library/warnings.html, https://www.tutorialsteacher.com/python/error-types-in-python\nExistem v√°rios motivos diferentes para um script n√£o rodar, √© importante saber os mais comuns para ajudar na hora de investigar o que est√° de errado com um c√≥digo.\n\nErro de sintaxe: SyntaxError, IndentationError, TabError\nErro de falta de mem√≥ria: MemoryError, OverflowError\nErro de refer√™ncia: IndexError, KeyError, NameError\nErro de opera√ß√£o: ZeroDivisionError, TypeError\nErro de l√≥gica: o python realiza o c√≥digo, mas n√£o faz o que voc√™ queria que ele fizesse\nExce√ß√µes: ‚Äúo python sabe o que fazer com o c√≥digo mas n√£o consegue realizar a a√ß√£o quista‚Äù\nAvisos: n√£o interrompem o c√≥digo, mas indicam que algo pode estar errado\n\n\n\n1.8.2.0.2 Como lidar com exce√ß√µes?\nRefer√™ncia: https://www.w3schools.com/python/python_try_except.asp\nAvisar ao utilizador do c√≥digo que houve algum erro espec√≠fico:\n\ntry:\n    juros = int(input(\"Qual a taxa de juros desejada? \"))\n    print(\"A taxa escolhida foi {0}%.\".format(juros))\nexcept:\n    print(\"A taxa de juros deve ser um n√∫mero\")\n\nEm um loop, indicar que um dos itens n√£o funcionou, mas realizar a opera√ß√£o para o resto dos itens:\n\nimport requests\n\npaginas = []\nurlList = ['https://finance.yahoo.com/quote/PETR4.SA', 'urlquebrado.com', 'https://finance.yahoo.com/quote/VALE3.SA']\n\nfor url in urlList:\n    try:\n        request = requests.get(url)\n        result = f\"result - {url}\" #algo com os dados da p√°gina\n        paginas.append(result)\n    except:\n        paginas.append(\"NA\")\n        print(f\"A p√°gina {url} n√£o pode ser lida\")\n\npaginas",
    "crumbs": [
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Introdu√ß√£o ao Python I</span>"
    ]
  },
  {
    "objectID": "aula2-python2.html",
    "href": "aula2-python2.html",
    "title": "2¬† Introdu√ß√£o ao Python II",
    "section": "",
    "text": "2.1 OOP\nCome√ßamos com uma apresenta√ß√£o.\nO objetivo de criar uma fun√ß√£o era dar um nome √† uma opera√ß√£o espec√≠fica, para que n√£o seja necess√°rio escrever essa opera√ß√£o por extenso toda vez que se precise realiz√°-la. Al√©m disso, fica muito mais f√°cil fazer manuten√ß√£o no c√≥digo se existe um erro nessa opera√ß√£o.\nAs classes seguem um objetivo similar, mas servem para dar nome a uma estrutura de dados.",
    "crumbs": [
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Introdu√ß√£o ao Python II</span>"
    ]
  },
  {
    "objectID": "aula2-python2.html#oop",
    "href": "aula2-python2.html#oop",
    "title": "2¬† Introdu√ß√£o ao Python II",
    "section": "",
    "text": "2.1.1 Classes, Objetos, e M√©todos\nAs classes s√£o compostas de:\n\nAtributos ou Propriedades (Attributes ou Properties): S√£o dados ou estados caracter√≠sticos daquela classe. Por exemplo, a classe ‚Äúa√ß√µes‚Äù pode ser modelada como tendo um pre√ßo m√©dio, um volume di√°rio, e um ticker.\nM√©todos: S√£o as fun√ß√µes que s√£o espec√≠ficos daquela classe, muitas vezes utilizam os pr√≥prios atributos da classe para realizar uma opera√ß√£o. Por exemplo, pode-se criar um m√©todo na classe ‚Äúa√ß√µes‚Äù que mutliplique o pre√ßo m√©dio pelo volume di√°rio para se obter o volume financeiro m√©dio.\n\nMas ent√£o, o que s√£o os objetos?\n\nClasse (class), estrutura de dados / procedimentos / fun√ß√µes que podem se repetir no programa;\nObjeto (object), inst√¢ncias (exemplos espec√≠ficos) das classes.\n\nQualquer estrutura que possua m√∫ltiplas inst√¢ncias pode ser caracterizada como uma classe (class), e qualquer inst√¢ncia/exemplo dessa estrutura pode ser um objeto (object). Exemplo: a√ß√µes e PETR4.SA:\n\n\n\n\n2.1.2 Sintaxe e Defini√ß√£o\nUsamos a palavra class, o nome da classe (com a primeira letra em ma√≠sculo, por conven√ß√£o), e ‚Äú()‚Äù, indicando uma a√ß√£o (no caso, criar um objeto da classe).\nNormalmente a defini√ß√£o de uma classe come√ßa pelo m√©todo init. ele √© um m√©todo especial, o m√©todo construtor, e indica que todas as linhas subordinadas a ele devem ser executadas quando um objeto daquela classe √© criado. As linhas que est√£o subordinadas ao m√©todo init s√£o aquelas que estabelecem os atributos.\nAl√©m disso, a palavra self √© uma refer√™ncia a todos os atributos de um objeto. Os m√©todos levam como argumento o pr√≥prio objeto em si, ou seja, o m√©todo que tem self como argumento pode acessar e trabalhar com todos os elementos do objeto em si.\nDepois do m√©todo construtor (init), em geral, v√™m os m√©todos ordin√°rios, aqueles que executam a√ß√µes.\n\nclass aluno():\n  #criando atributos\n    def __init__(self, nome, nota1, nota2):\n        self.nome = nome\n        self.nota1 = nota1\n        self.nota2 = nota2\n        \n  #criando m√©todos\n    def media(self):\n        return (self.nota1 + self.nota2) / 2\n\n\nmichel = aluno(nome = \"Michel\", nota1 = 7, nota2 = 10)\nprint(michel.nome, michel.media())\n\nMichel 8.5\n\n\n\nclass Stocks():\n    def __init__(self, ticker_name, price_inDolars, volume_inUnits, beta_float,\n                 divDate_string, enterpriseValue_inDolars, price_inList):\n        self.ticker = ticker_name # preenchendo name com o valor referente ao argumento full_name\n        self.price_last = price_inDolars\n        self.volume_last_day = volume_inUnits\n        self.beta = beta_float\n        self.divDate = divDate_string\n        self.enterpriseValue = enterpriseValue_inDolars\n        self.price_hist = price_inList\n        self.portShare = 0# n√£o vem de argumento, sempre uma a√ß√£o come√ßa com esse valor de argumento\n\n    def eatfinVolume(self): # self entra como argumento para que o procedimento possa acessar os atributos e seus valores.\n        return self.price_last * self.volume_last_day\n\n    def addPrice(self, price):\n        self.price_hist.append(price)\n\n    def changeShare(self, newshare):\n        self.portShare = newshare\n\n    def printPrice(self):\n        print(\"The stock \" + self.ticker + \" has a last price of \" + str(self.price_last))\n\n    def __str__(self):\n        return \"The stock \" + str(self.ticker) + \" has a last price of \" + str(self.price_last)\n\n\npetr = Stocks(ticker_name = \"PETR4.SA\",\n              price_inDolars = 30.13,\n              volume_inUnits = 93824145,\n              beta_float = 1.33,\n              divDate_string = \"Aug 12, 2022\",\n              enterpriseValue_inDolars = 594060000000,\n              price_inList = [29.80, 30.39, 29.44])\n\nprint(petr.ticker)\n\npetr.eatfinVolume()\n\npetr.printPrice()\n\npetr.price_last = 31.23\nprint(petr.price_last)\n\npetr.nationality = \"Brazil\"\nprint(petr.nationality)\n\nprint(petr)\n\nPETR4.SA\nThe stock PETR4.SA has a last price of 30.13\n31.23\nBrazil\nThe stock PETR4.SA has a last price of 31.23",
    "crumbs": [
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Introdu√ß√£o ao Python II</span>"
    ]
  },
  {
    "objectID": "aula2-python2.html#cole√ß√µes",
    "href": "aula2-python2.html#cole√ß√µes",
    "title": "2¬† Introdu√ß√£o ao Python II",
    "section": "2.2 Cole√ß√µes",
    "text": "2.2 Cole√ß√µes\n\n\nO nome cole√ß√µes vem de ‚Äúconjunto‚Äù de dados, e existem quatro tipos diferentes, que servem para objetivos diferentes, baseados em suas caracter√≠sticas:\n\n\n\n\nOrdenado\nMut√°vel\nDuplicatas\n\n\n\n\nListas\nsim\nsim\nsim\n\n\nTuples\nsim\nn√£o\nsim\n\n\nSets\nn√£o\nn√£o\nn√£o\n\n\nDicion√°rios\nsim\nsim\nn√£o\n\n\n\nEm termos mais simples listas s√£o as mais flex√≠veis e menos espec√≠ficas, tuples s√£o listas imut√°veis, e dicion√°rios s√£o listas nomeadas. Sets, os mais restritivos, funcionam como o conceito de ‚Äúconjunto‚Äù da matem√°tica.\nCada cole√ß√£o tem seus pr√≥prios m√©todos, d√™em uma olhada neles nos tutoriais abaixo:\n\nW3Schools: https://www.w3schools.com/python/python_lists.asp (mais simples e sucinto);\nDocumenta√ß√£o do Python: https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences (mais t√©cnico, mais informa√ß√µes).\n\n\n2.2.1 Listas\n\n\n2.2.1.1 Sintaxe e Defini√ß√£o\n\n\n\n2.2.1.2 Acessar e Alterar\n\n\n\n\n2.2.1.3 Adicionar, Unir, e Remover\n\n\n\n\n2.2.1.4 Tamanho, Ordem, e Posi√ß√£o\n\n\n\n\n2.2.1.5 Comparadores\n\n\n\n2.2.1.6 Loops e Comprehension\n\n\n\n\n2.2.2 Tuples\n\n\n2.2.2.1 Sintaxe e Defini√ß√£o\n\n\n\n2.2.2.2 Similaridades com Listas\n\n\n\n2.2.2.3 Unpacking\n\n\n\n2.2.3 Dicts\n\n\n2.2.3.1 Sintaxe e Defini√ß√£o\n\n\n\n2.2.3.2 Acessar e Alterar\n\n\n\n\n2.2.3.3 Similaridades com Listas\n\n\n\n\n\n\nüòé\n\n\n\n\n\n\n2.2.4 Sets\n\n\n2.2.4.1 Sintaxe e Defini√ß√£o\n\n\n\n2.2.4.2 Acessar e Alterar\n\n\n\n\n2.2.4.3 Set Operations\n\n\n\n2.2.4.4 Similaridades com Listas\n\n\n\n\n2.2.5 Fun√ß√µes Sobre Iter√°veis\n\n\n\nmy_list = ['S√£o Paulo', 'Flamengo']\n\n# o que √© um iter√°vel?\n\nenumerate(my_list), list(enumerate(my_list))\n#type(enumerate(my_list))\n\n(&lt;enumerate at 0x1f99a36b060&gt;, [(0, 'S√£o Paulo'), (1, 'Flamengo')])\n\n\n\n#sem enumerate:\nindex = 0\nfor i in my_list:\n    print('Parab√©ns ' + i + '! Voc√™ ficou em ' + str(index + 1) + '¬∫ lugar!')\n    index += 1\n\nParab√©ns S√£o Paulo! Voc√™ ficou em 1¬∫ lugar!\nParab√©ns Flamengo! Voc√™ ficou em 2¬∫ lugar!\n\n\n\n#com enumerate:\nfor index, i in enumerate(my_list):\n    print('Parab√©ns ' + i + '! Voc√™ ficou em ' + str(index + 1) + '¬∫ lugar!')\n\nprint(\"cof cof Copa do Brasil cof cof\")\n\nParab√©ns S√£o Paulo! Voc√™ ficou em 1¬∫ lugar!\nParab√©ns Flamengo! Voc√™ ficou em 2¬∫ lugar!\ncof cof Copa do Brasil cof cof\n\n\n\ndef maior_que_dois(x):\n    return x &gt; 2\n#Ou utilizar uma fun√ß√£o an√¥nima \"lambda\": lambda x: x &gt; 2\n\nmy_list = [1,2,3,4]\nprint(list(filter(maior_que_dois, my_list)))\nprint(list(filter(lambda x: x&gt;2, my_list)))\n\n[3, 4]\n[3, 4]\n\n\n\nmy_map = list(map(maior_que_dois, my_list)) # map: aplicar uma fun√ß√£o para todos os itens\nmy_map\n\n[False, False, True, True]\n\n\n\nprint(my_list)\nprint(my_map)\n[my_list, my_map]\n\n[(my_list[i], my_map[i]) for i in range(4)]\nlist(zip(my_list, my_map))\n# zip(): une tuplas, mas √© um objeto pr√≥prio\n# ‚Üí precisa fazer tuple(zip()) para ver a tupla mesmo\n\n[1, 2, 3, 4]\n[False, False, True, True]\n\n\n[(1, False), (2, False), (3, True), (4, True)]",
    "crumbs": [
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Introdu√ß√£o ao Python II</span>"
    ]
  },
  {
    "objectID": "aula2-python2.html#vari√°veis-novamente",
    "href": "aula2-python2.html#vari√°veis-novamente",
    "title": "2¬† Introdu√ß√£o ao Python II",
    "section": "2.3 Vari√°veis, Novamente",
    "text": "2.3 Vari√°veis, Novamente\nFalamos sobre como vari√°veis s√£o um conjunto nome-valor. Vamos explorar um pouco mais essa ideia.\nRefer√™ncia: https://nedbatchelder.com/text/names.html (fonte dos diagramas).\nObs: a discuss√£o aqui introduz um conceito te√≥rico, do mundo da Ci√™ncia da Computa√ß√£o. Al√©m de ser algo interessante, que vai ajudar voc√™ a entenderem como linguagens de programa√ß√£o funcionam, vai ajudar na pr√°tica a evitar um tipo espec√≠fico de erro.\nConsidere o c√≥digo x = 23, n√≥s temos o nome ‚Äúx‚Äù fazendo refer√™ncia ao valor (na mem√≥ria do computador) ‚Äú23‚Äù:\n\n\nx refers to 23\n\nx23\n\nSe fizermos y = x, n√£o criamos um novo objeto, mas temos agora um novo nome apontando para o mesmo valor:\n\n\nx and y both refer to 23\n\nxy23\n\nNote que poderia ser o contr√°rio, na cria√ß√£o de y, criava-se um novo valor (local na mem√≥ria) para ele, como abaixo, mas n√£o √©.\n\n\nx and y aren‚Äôt magically linked\n\nxy2323\n\nE se alterarmos a vari√°vel y, o que pode acontecer?\n\nO valor (o √∫nico que existe) √© alterado, e os dois nomes agora fazem refer√™ncia a esse valor atualizado.\nCria-se um novo valor para y, e agora cada nome se refere a um valor diferente.\n\nNo Python, neste caso, o que acontece √© a segunda op√ß√£o.\nSe rodarmos y = 12, o que n√£o acontece √©:\n\n\nx and y both refer to 23\n\nxy12\n\nE sim:\n\n\nx and y aren‚Äôt magically linked\n\nxy1223\n\nIsso √©, o valor foi primeiro copiado (para um novo local da mem√≥ria), e depois alterado. Esse comportamento tem o nome de ‚Äúcopy-on-modify‚Äù.\nEm oposi√ß√£o:\n\nPoder√≠amos chamar o comportamento em vermelho de ‚Äúcopy-on-creation‚Äù.\nO comportamento da ‚Äúop√ß√£o 2.‚Äù √© chamado de ‚Äúmodify in place‚Äù.\n\nMas esse comportamento depende do tipo do objeto. No exemplo acima, o valor foi copiado, porque era imut√°vel. Alguns tipos de valores s√£o mut√°veis e s√£o ‚Äúmodified-in-place‚Äù.\nVoc√™s viram que listas s√£o mut√°veis, vamos ver um exemplo com elas.\nO c√≥digo:\nnums = [1, 2, 3]\ntri = nums\nGera:\n\n\nnums and tri both refer to the same list\n\nnumstri123\n\nE se rodarmos nums.append(4)? Listas s√£o mut√°veis, ent√£o n√£o criaremos uma c√≥pia/um novo valor para nums, e sim, modificaremos o valor a quem nums se refere, in-place:\n\n\nchanging the list means both names see the change\n\nnumstri1234\n\nEssa diferen√ßa de comportamento, a depender do tipo do objeto, gera muita confus√£o. Para usu√°rios de R, notem que no R, todos (menos um) os tipos de objetos s√£o imut√°veis, e s√£o copied-when-modified, no Python, isso n√£o √© verdade.\nDo artigo do Ned Batchelder:\n\nThis Mutable Presto-Chango is the biggest issue people have with Python‚Äôs names and values. A value is shared by more than one name, and is modified, and all names see the change.\n\n\nKeep in mind, this is not a bug in Python, however much you might wish that it worked differently. Many values have more than one name at certain points in your program, and it‚Äôs perfectly fine to mutate values and have all the names see the change. The alternative would be for assignment to copy values, and that would make your programs unbearably slow.\n\nAgora, voc√™s sabem o mecanismo por tr√°s desse comportamento, e podem evitar cometer erros em rela√ß√£o √† isso.\nQuando voc√™s v√£o criar um objeto mut√°vel com base em outro, deve-se perguntar: ‚Äúeu quero que esse nome tenha a sua pr√≥pria c√≥pia independente dos dados, ou quero que ambos os nomes fa√ßam refer√™ncia ao mesmo dado?‚Äù.\n\nSe a sua inten√ß√£o √© a segunda, fa√ßa y = x.\nSe √© a segunda, os objetos mut√°veis tem um m√©todo .copy() exatamente para isso, faca y = x.copy()",
    "crumbs": [
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Introdu√ß√£o ao Python II</span>"
    ]
  },
  {
    "objectID": "aula2-python2.html#recapitulando",
    "href": "aula2-python2.html#recapitulando",
    "title": "2¬† Introdu√ß√£o ao Python II",
    "section": "Recapitulando",
    "text": "Recapitulando",
    "crumbs": [
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Introdu√ß√£o ao Python II</span>"
    ]
  },
  {
    "objectID": "aula2-python2.html#extras",
    "href": "aula2-python2.html#extras",
    "title": "2¬† Introdu√ß√£o ao Python II",
    "section": "2.4 Extras",
    "text": "2.4 Extras\n\n2.4.1 Bibliotecas\n\n\n2.4.2 Fun√ß√µes √öteis",
    "crumbs": [
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Introdu√ß√£o ao Python II</span>"
    ]
  },
  {
    "objectID": "aula3-python3.html",
    "href": "aula3-python3.html",
    "title": "3¬† Introdu√ß√£o ao Python III",
    "section": "",
    "text": "3.1 Vetores e Dataframes",
    "crumbs": [
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Introdu√ß√£o ao Python III</span>"
    ]
  },
  {
    "objectID": "aula3-python3.html#numpy",
    "href": "aula3-python3.html#numpy",
    "title": "3¬† Introdu√ß√£o ao Python III",
    "section": "3.2 Numpy",
    "text": "3.2 Numpy\n\n3.2.1 Cria√ß√£o e Caracter√≠sticas\n\n\n3.2.2 Subsetting\n\n\n3.2.3 Opera√ß√µes\n!! Texto de pausa !!",
    "crumbs": [
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Introdu√ß√£o ao Python III</span>"
    ]
  },
  {
    "objectID": "aula3-python3.html#pandas",
    "href": "aula3-python3.html#pandas",
    "title": "3¬† Introdu√ß√£o ao Python III",
    "section": "3.3 Pandas",
    "text": "3.3 Pandas\n\n3.3.1 Cria√ß√£o e Caracter√≠sticas\n\n\n3.3.2 Subset\n\n\n3.3.3 Operate\n\n\n3.3.4 Reshape\n\n\n3.3.5 Combine\n\n\n3.3.6 Aggregate",
    "crumbs": [
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Introdu√ß√£o ao Python III</span>"
    ]
  },
  {
    "objectID": "aula3-python3.html#recapitulando",
    "href": "aula3-python3.html#recapitulando",
    "title": "3¬† Introdu√ß√£o ao Python III",
    "section": "3.4 Recapitulando",
    "text": "3.4 Recapitulando",
    "crumbs": [
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Introdu√ß√£o ao Python III</span>"
    ]
  },
  {
    "objectID": "aula3-python3.html#extras",
    "href": "aula3-python3.html#extras",
    "title": "3¬† Introdu√ß√£o ao Python III",
    "section": "3.5 Extras",
    "text": "3.5 Extras\n\n3.5.1 Temas Avan√ßados em Numpy\n\n\n3.5.2 Temas Avan√ßados em Pandas",
    "crumbs": [
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Introdu√ß√£o ao Python III</span>"
    ]
  },
  {
    "objectID": "aula4-cd-manipulacao.html",
    "href": "aula4-cd-manipulacao.html",
    "title": "4¬† CD: Manipula√ß√£o",
    "section": "",
    "text": "4.1 Ci√™ncia de Dados",
    "crumbs": [
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>CD: Manipula√ß√£o</span>"
    ]
  },
  {
    "objectID": "aula4-cd-manipulacao.html#ci√™ncia-de-dados",
    "href": "aula4-cd-manipulacao.html#ci√™ncia-de-dados",
    "title": "4¬† CD: Manipula√ß√£o",
    "section": "",
    "text": "4.1.1 Introdu√ß√£o e Projetos\n\n\n4.1.2 Data Wrangle e Tidy Data\n!! Texto de pausa !!",
    "crumbs": [
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>CD: Manipula√ß√£o</span>"
    ]
  },
  {
    "objectID": "aula4-cd-manipulacao.html#data-wrangle-com-pandas",
    "href": "aula4-cd-manipulacao.html#data-wrangle-com-pandas",
    "title": "4¬† CD: Manipula√ß√£o",
    "section": "4.2 Data Wrangle com Pandas",
    "text": "4.2 Data Wrangle com Pandas\n!! vide o PPT !!",
    "crumbs": [
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>CD: Manipula√ß√£o</span>"
    ]
  },
  {
    "objectID": "aula4-cd-manipulacao.html#recapitulando",
    "href": "aula4-cd-manipulacao.html#recapitulando",
    "title": "4¬† CD: Manipula√ß√£o",
    "section": "Recapitulando",
    "text": "Recapitulando",
    "crumbs": [
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>CD: Manipula√ß√£o</span>"
    ]
  },
  {
    "objectID": "aula5-cd-visualizacao.html",
    "href": "aula5-cd-visualizacao.html",
    "title": "5¬† CD: Visualiza√ß√£o",
    "section": "",
    "text": "5.1 Sumariza√ß√£o com Pandas",
    "crumbs": [
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>CD: Visualiza√ß√£o</span>"
    ]
  },
  {
    "objectID": "aula5-cd-visualizacao.html#sumariza√ß√£o-com-pandas",
    "href": "aula5-cd-visualizacao.html#sumariza√ß√£o-com-pandas",
    "title": "5¬† CD: Visualiza√ß√£o",
    "section": "",
    "text": "5.1.1 Sumarizando Dataframes\n\n\n5.1.2 Sumarizando Vari√°veis Categ√≥ricas\n\n\n5.1.3 Sumarizando Vari√°veis Cont√≠nuas\n\n\n5.1.4 Analisando Grupos nos Dados\n!! Texto de pausa !!",
    "crumbs": [
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>CD: Visualiza√ß√£o</span>"
    ]
  },
  {
    "objectID": "aula5-cd-visualizacao.html#gr√°ficos-com-o-matplotlib",
    "href": "aula5-cd-visualizacao.html#gr√°ficos-com-o-matplotlib",
    "title": "5¬† CD: Visualiza√ß√£o",
    "section": "5.2 Gr√°ficos com o Matplotlib",
    "text": "5.2 Gr√°ficos com o Matplotlib\n\n5.2.1 Anatomia e Estilo de Programa√ß√£o\n\n\n5.2.2 Plots\n\n\n5.2.3 Est√©ticas\n\n\n5.2.4 Tema\n\n\n5.2.5 Plots Combinados",
    "crumbs": [
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>CD: Visualiza√ß√£o</span>"
    ]
  },
  {
    "objectID": "aula5-cd-visualizacao.html#recapitulando",
    "href": "aula5-cd-visualizacao.html#recapitulando",
    "title": "5¬† CD: Visualiza√ß√£o",
    "section": "Recapitulando",
    "text": "Recapitulando",
    "crumbs": [
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>CD: Visualiza√ß√£o</span>"
    ]
  },
  {
    "objectID": "aula5-cd-visualizacao.html#extras",
    "href": "aula5-cd-visualizacao.html#extras",
    "title": "5¬† CD: Visualiza√ß√£o",
    "section": "5.3 Extras",
    "text": "5.3 Extras\n\n5.3.1 Outras Bibliotecas Gr√°ficas",
    "crumbs": [
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>CD: Visualiza√ß√£o</span>"
    ]
  },
  {
    "objectID": "aula6-cd-modelagem.html",
    "href": "aula6-cd-modelagem.html",
    "title": "6¬† CD: Modelagem",
    "section": "",
    "text": "6.1 Modelagem\n!! Vide o ppt !!",
    "crumbs": [
      "<span class='chapter-number'>6</span>¬† <span class='chapter-title'>CD: Modelagem</span>"
    ]
  },
  {
    "objectID": "aula6-cd-modelagem.html#recapitulando",
    "href": "aula6-cd-modelagem.html#recapitulando",
    "title": "6¬† CD: Modelagem",
    "section": "Recapitulando",
    "text": "Recapitulando",
    "crumbs": [
      "<span class='chapter-number'>6</span>¬† <span class='chapter-title'>CD: Modelagem</span>"
    ]
  },
  {
    "objectID": "aula6-cd-modelagem.html#extras",
    "href": "aula6-cd-modelagem.html#extras",
    "title": "6¬† CD: Modelagem",
    "section": "6.2 Extras",
    "text": "6.2 Extras\n\n6.2.1 Detalhamento dos Modelos e Seus Hiperpar√¢metros",
    "crumbs": [
      "<span class='chapter-number'>6</span>¬† <span class='chapter-title'>CD: Modelagem</span>"
    ]
  },
  {
    "objectID": "aula7-cd-projetos.html",
    "href": "aula7-cd-projetos.html",
    "title": "7¬† CD: Projetos",
    "section": "",
    "text": "7.1 Organiza√ß√£o de um Script",
    "crumbs": [
      "<span class='chapter-number'>7</span>¬† <span class='chapter-title'>CD: Projetos</span>"
    ]
  },
  {
    "objectID": "aula7-cd-projetos.html#exemplo-de-script",
    "href": "aula7-cd-projetos.html#exemplo-de-script",
    "title": "7¬† CD: Projetos",
    "section": "7.2 Exemplo de Script",
    "text": "7.2 Exemplo de Script",
    "crumbs": [
      "<span class='chapter-number'>7</span>¬† <span class='chapter-title'>CD: Projetos</span>"
    ]
  },
  {
    "objectID": "aula7-cd-projetos.html#recapitulando",
    "href": "aula7-cd-projetos.html#recapitulando",
    "title": "7¬† CD: Projetos",
    "section": "Recapitulando",
    "text": "Recapitulando",
    "crumbs": [
      "<span class='chapter-number'>7</span>¬† <span class='chapter-title'>CD: Projetos</span>"
    ]
  },
  {
    "objectID": "aula8-outros.html",
    "href": "aula8-outros.html",
    "title": "8¬† Outros T√≥picos",
    "section": "",
    "text": "8.1 Git e Github",
    "crumbs": [
      "<span class='chapter-number'>8</span>¬† <span class='chapter-title'>Outros T√≥picos</span>"
    ]
  },
  {
    "objectID": "aula8-outros.html#boas-pr√°ticas-de-programa√ß√£o",
    "href": "aula8-outros.html#boas-pr√°ticas-de-programa√ß√£o",
    "title": "8¬† Outros T√≥picos",
    "section": "8.2 Boas Pr√°ticas de Programa√ß√£o",
    "text": "8.2 Boas Pr√°ticas de Programa√ß√£o",
    "crumbs": [
      "<span class='chapter-number'>8</span>¬† <span class='chapter-title'>Outros T√≥picos</span>"
    ]
  },
  {
    "objectID": "aula8-outros.html#o-campo-da-programa√ß√£o",
    "href": "aula8-outros.html#o-campo-da-programa√ß√£o",
    "title": "8¬† Outros T√≥picos",
    "section": "8.3 O Campo da Programa√ß√£o",
    "text": "8.3 O Campo da Programa√ß√£o",
    "crumbs": [
      "<span class='chapter-number'>8</span>¬† <span class='chapter-title'>Outros T√≥picos</span>"
    ]
  },
  {
    "objectID": "aula8-outros.html#extras",
    "href": "aula8-outros.html#extras",
    "title": "8¬† Outros T√≥picos",
    "section": "8.4 Extras",
    "text": "8.4 Extras\n\n8.4.1 REGEX\n\n\n8.4.2 Web Scrapping",
    "crumbs": [
      "<span class='chapter-number'>8</span>¬† <span class='chapter-title'>Outros T√≥picos</span>"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "GVCode Trainee",
    "section": "",
    "text": "Bem Vindos!\nEste √© o material do curso de Trainee da GVCode. Cada cap√≠tulo est√° associado a uma aula presencial.\nEsse material foi 100% escrito pelos veteranos da entidade, e est√° sendo otimizado desde 2020! Ao final, temos algumas das bibliografias utilizadas em sua confec√ß√£o.",
    "crumbs": [
      "Bem Vindos!"
    ]
  },
  {
    "objectID": "index.html#aulas",
    "href": "index.html#aulas",
    "title": "GVCode Trainee",
    "section": "Aulas",
    "text": "Aulas\nIntrodu√ß√£o ao Python I (30/set a 4/out)\n\nO que √© um script; sintaxe; vari√°veis; tipos de dados.\nOperadores; control flow; fun√ß√µes.\nExtra: *args; condi√ß√µes (try except).\n\nIntrodu√ß√£o ao Python II (7/out a 11/out)\n\nPrograma√ß√£o orientada ao objeto.\nCole√ß√µes (list, dict, tuple, set); subsetting e m√©todos.\nIter√°veis loops, comprehension, e enumerate, filter, zip, e map.\nExtra: fun√ß√µes √∫teis, f-strings\n\nIntrodu√ß√£o ao Python III (14/out a 18/out)\n\nNumpy: arrays e vetoriza√ß√£o; opera√ß√µes e subsetting.\nPandas: dataframes; opera√ß√µes.\nExtra: t√≥picos avan√ßados em Numpy e Pandas.\n\nCi√™ncia de Dados: Manipula√ß√£o (21/out a 25/out)\n\nIntrodu√ß√£o √† ci√™ncia de dados; o que √© processamento de dados.\nComo arrumar dados com Pandas.\n\nCi√™ncia de Dados: Visualiza√ß√£o (28/out a 1/nov)\n\nO que √© visualiza√ß√£o de dados.\nSumariza√ß√£o com Pandas; Gr√°ficos com o Matplotlib.\nExtra: seaborn e outras bibliotecas; gr√°ficos avan√ßados.\n\nCi√™ncia de Dados: Modelagem (4/nov a 8/nov)\n\nO que √© modelagem de dados.\nAula te√≥rica sobre modelos de machine learning.\n\nCi√™ncia de Dados: Projetos (11/nov a 15/nov)\n\nEtapas e exemplo de um script de ci√™ncia de dados.\nFun√ß√µes de modelagem.\nExtra: apresentar trabalho.\n\nOutros Temas em Programa√ß√£o (18/nov a 22/nov)\n\nGit e Github.\nBoas pr√°ticas de programa√ß√£o (python‚Äôs pep8).\nExtra: regex; web scrapping.",
    "crumbs": [
      "Bem Vindos!"
    ]
  }
]